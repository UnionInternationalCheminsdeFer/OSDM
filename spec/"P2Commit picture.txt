
```mermaid
sequenceDiagram
    actor Purchaser
    participant Aggregator
    participant Provider1
    participant Provider2
    



    note over Purchaser: Confirm booking

    Purchaser ->> Aggregator: POST /bookings/{bookingId}/fulfillments
    note over Aggregator: Check if it will work
    Aggregator ->> Provider1 : GET /bookings/{bookingId}/fulfillment-check
    Provider1 ->> Aggregator: http: 204/40*
    alt http-code != 204
        note over Aggregator: Stop process
        Aggregator ->> Purchaser: Not possible to fulfill. Problem returned
    end
    Aggregator ->> Provider2 : GET /bookings/{bookingId}/fulfillment-check
    Provider2 ->> Aggregator: http: 204/40*
    alt http-code != 204
        note over Aggregator: Stop process    
        Aggregator ->> Purchaser: Not possible to fulfill. Problem returned
    end
    note over Aggregator: All providers are checked,<br> then collect the money followed by confirm
    Aggregator ->> Provider1 : POST /bookings/{bookingId}/fulfillments
    Provider1 ->> Aggregator: http: 20*
    alt http-code !=  20*
         Aggregator ->> Purchaser:  http-code 
    end
    Aggregator ->> Provider2 : POST /bookings/{bookingId}/fulfillments
    Provider2 ->> Aggregator: http: 20*
    alt http-code !=  20*
        Aggregator ->> Provider1 : Refund provider1 booking (technical error)
        Provider1 ->> Aggregator :refunded
        alt error
        note over Aggregator: Big problems <br> Must be handled manually
        Aggregator->> Purchaser : big problem http-code 50*
        else
            note over Aggregator: Fulfillment failed in a controlled way.
            Aggregator ->> Purchaser:  http-code 40*
        end
    end

    note over Aggregator: All confirmed, return positive response
    Aggregator ->> Purchaser: fulfilled booking http-code: 20* with Fulfillments

```
