@startuml

hide empty methods
hide empty attributes

title: Bookings Data Model

class Trip <<R,Orchid>> #linen {
}

class TripLeg <<D, Green>> #linen {
}

class Offer <<R,orchid>> #lightcyan {

}


class ExchangeOffer <<R,orchid>> #lightgreen {

  id
  offer: Offer
  exchangeFee: Price
  exchangePrice: Price
}

class AncillaryOfferPart <<D,green>> {
 
}

class AdmissionOfferPart <<D,green>> {

}

class ReservationOfferPart<<D,green>> {
}


class Product <<R,orchid>> {
}

class Fare <<D,green>> {

}

class Passenger <<R, orchid>> {
}

class PersonDetail<<D,green>> {
  preferredLanguage: string
  abstract: string
  firstName: string
  lastName: string
  email: string
  phoneNumber: string
  address: Address
}

class Purchaser <<R, orchid>> {
  id
  externalReference
  details: PersonDetail
}

class Complaint <<R, orchid>> {
  id*
  reference
  status
  customerComplaint:  CustomerComplaint
  missingInformation: [string]
  decision: ComplaintDecision
}

class CustomerComplaint <<D, green>> {
  applicationTime: Date
  journeyDetails: ClaimedJourneyDetails
  claimManager: PersonDetail
  affectedPassengers: [Passenger]
  supportingDocuments: Document
  bookingIds: [string]
  ticketControlNumbers: [string]
  requestedPaymentType: string
  bankAccount: BankAccountReference
  
}

class Document <<D, green>> {
  id: string
  title: string
  content: string
  format: string
  
}

class ClaimedJourneyDetails <<D, green>> {
  impact: string
  finalDelay: string
  onReturn: boolean
  delayedJourney: [ClaimedLeg]
 
}

class ComplaintDecision <<D, green>>{
  compensationAmount: Price
  refundVoucher: FulfillmentDocument
  explanation: FulfillmentDocument
  shortExplanation: string
  DelayedJouney: Trip
}

class BankAccountReference <<D, green>>{
  iban
  ownerName
}

class Booking <<R,orchid>> #lightcyan {
  id*
  abstract: string
  reference: string
  status* : BookingStatus
  provisionalPrice: Price
  confirmedPrice: Price
  requestedInformation: string
  ticketTimeLimit
  fulfillmentType: fulfillmentType
  bookedOffers: Offers
  appliedPromoCodes: [PromoCode]
  purchaser*: Purchaser
  passengers: [Passenger]
  fulfillments: [Fulfillment]
  refundOffers: [RefundOffer]
  exchangeOperations: [ExchangeOperation]
  complaints: [Complaint]
  links: [Link]
}
note left: possible states PREBOOKED, CONFIRMED, FULFILLED, CANCELLED, REFUNDED, EXCHANGE_ONGOING, ERROR\n Booked represents the state between the booking\nconfirmation and the issuance of the tickets.

class FulfillmentType <<D,green>> #lightcyan  {
  type
}

note right of Product
  reference is the unique internal id that allows to
  link fulfillments to products. It has no functional meaning
end note

class Fulfillment  <<R,orchid>> #bisque{
  id*
  status
  price: Price
  controlNumber
  offerParts: [OfferPartReference]
  documents: [FulfillmentDocument]
  fulfillmentItems: [fullfillmentItem]
}

class FulfillmentItem <<D, green>>{
  fulfilmentMedia: FulfillmentMediaType
  travelReference: string
  controlId: string
  securityFeatures: [type: SecurityFeatureType, data: string]
  securtyFeatureLinks: [type: SecurityFeatureType, uri: string]
  isMandatory: boolean
  securePaperOnly: boolean
}

class FulfillmentDocument <<D, green>>{
  medium: FulfillmentMediaType
  type: string
  downloadLink: string
  downloadExpiry: Date
  content: string
  format: string

}

class RefundOffer <<R, orchid>> #lightgreen {
  id*
  abstract
  validUntil
  status
  reimbursementStatus
  reimbursementDateTime
  appliedOverruleCode
  fulfillments:[Fulfillment]
  RefundFee: Price
  RefundableAmount: Price
  links: [Link]
}

class ExchangeOperation <<R, orchid>> #lightgreen {
  id*
  abstract
  Status
  exchangeOffers: [ExchangeOffer]
  fulfillments
  ticketTimeLimit
  fulfillmentType
}

note bottom of Fulfillment
  Possible statuses:
  CONFIRMED, FULFILLED, CHECKEDIN, REFUNDED
end note

Booking "1"*-"1..n" Passenger
Booking "1"*-"1" Purchaser
Booking "1"-"0..n" RefundOffer
Booking "1"-"0..n" ExchangeOperation
Booking "1"-"0..1" FulfillmentType
RefundOffer "1"--"1..n" Fulfillment
ExchangeOperation "1"--"1..n" Fulfillment
ExchangeOperation "1"-"1..n" ExchangeOffer
Booking "1"*--"1..2" Offer
Trip "1" *- "1..n" TripLeg
Booking "1"*--"0..n" Fulfillment
Booking "1"*--"0..n" Complaint
Fulfillment "1"*--"0..n" FulfillmentDocument
Fulfillment "1"*--"0..n" FulfillmentItem
Complaint "1"*--"0..1" ComplaintDecision
Complaint "1"*--"0..1" CustomerComplaint
CustomerComplaint "1"*--"0..1" PersonDetail
CustomerComplaint "1"*--"0..1" ClaimedJourneyDetails
Complaint "1"*--"0..n" Document
Complaint "1"*--"1..n" Passenger
Complaint "1"*--"0..n" BankAccountReference
ComplaintDecision "1"*--"0..n" FulfillmentDocument

Purchaser *-- "0..1" PersonDetail

AdmissionOfferPart "1"*--"1..n" Product
ReservationOfferPart"1"*--"0..1" Product
AncillaryOfferPart "1"*--"0..1" Product

Offer "1" *-- "0..n" AdmissionOfferPart
Offer "1" *-- "0..n" ReservationOfferPart
Offer "1" *-- "0..n" Fare
Offer "1" *-- "0..n" AncillaryOfferPart
Offer "1"*--"0..1" Trip

AbstractOfferPart <|-- AdmissionOfferPart
AbstractOfferPart <|-- ReservationOfferPart
AbstractOfferPart <|-- AncillaryOfferPart

AdmissionOfferPart --> OfferPartReference
ReservationOfferPart --> OfferPartReference
AncillaryOfferPart --> OfferPartReference


AdmissionOfferPart .>"0..n" ReservationOfferPart:optional/included/mandatory
AdmissionOfferPart .>"0..n" AncillaryOfferPart:optional/included


note as floatingNote
FulfillmentOption, RequestedInformation and
TicketTimeLimit are only meaningful at
pre-booking stage
end note
@enduml
