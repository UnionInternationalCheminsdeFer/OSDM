openapi: 3.0.3
info:
  title: UIC 90918-10 - OSDM
  version: 1.5.0-rc1
  description: |
    Specifications for the OSDM API standard. The OSDM specification supports two
    modes of operation: Distributor Mode and Allocator Mode. The API works the same in 
    both mode, except that in allocator mode the API also returns fare information.
    The OSDM specification combines the allocator and distributor modes into one aligned
    API interface.
  contact:
    name: Nicolas Selleslagh, Clemens Gantert and Andreas Schlapbach
    url: https://unioninternationalcheminsdefer.github.io/OSDM/
    email: osdm@uic.org
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - description: OSDM Mock on Mocklab
    url: https://osdm.mocklab.io
  - description: Sqills Sandbox
    url: https://s3p-osdm.cloud.sqills.com
  - description: OEBB OSDM Simulator
    url: https://tickets-otest.oebb.at/osdm-sim/api
tags:
  - name: Places
    description: >-
      resources to search for places
  - name: Trips
    description: >-
      resources to search for trips
  - name: Offers
    description: >-
      resources to get bookable offers
  - name: Bookings
    description: >-
      resources to manipulate bookings
  - name: Fares
    description: >-
      resources to access fares
  - name: Reservations
    description: >-
      resources to access reservations
  - name: Passengers
    description: >-
      resources to manipulate a passenger's information at every stage of the flow
  - name: Purchaser
    description: >-
      resources to manipulate a purchaser's information at every stage of the flow
  - name: Fulfillments
    description: >-
      resources to retrieve fulfillments, e.g. tickets
  - name: Refund
    description: >-
      resources to get and accept a refund offer
  - name: Exchange
    description: >-
      resources to get exchange offers and book it
  - name: Complaint Management
    description: >-
      resources to manage complaints
  - name: Master Data
    description: >-
      resources to get master data
paths:
  /places:
    get:
      tags:
        - Master Data
      summary: Returns all places
      description: >-
        Returns all places
      operationId: getPlaces
      parameters:
        - in: query
          name: page
          description: >-
            can be used for pagination control
          schema:
            type: string
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      responses:
        "200":
          description: the requested places
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=10000"
                description: >-
                  A places resource is fairly persistent and has a medium time to live to allow short-term caching.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no place information found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"
    post:
      tags:
        - Places
      summary: returns place information for a given place request
      description: >-
        Returns places for a given place request based on the OJP specification.
      operationId: postPlaces
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      requestBody:
        description: request for place
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaceRequest"
      responses:
        "200":
          description: place information found matching criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no place information found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /places/{placeId}:
    get:
      tags:
        - Places
      summary: returns a place
      description: >-
        Returns places
      operationId: getPlacesId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: placeId
          schema:
            type: string
          required: true
          description: id of the place to get.
      responses:
        "200":
          description: the requested places
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=10000"
                description: >-
                  A places resource is fairly persistent and has a medium time to live to allow short-term caching.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no place information found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /trips/{tripId}:
    get:
      tags:
        - Trips
      summary: Returns a trip element representing a travel trip.
      description:
        A trip consists of one or more legs for a given tripId. Depending on the
        embed either references or full location definitions is returned.
      operationId: getTripsId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: tripId
          schema:
            type: string
            description: unique (on this server) and opaque id of the trip
          required: true
          description: id of the trip to get.
        - in: query
          name: stopBehavior
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
              - ORIGIN_DESTINATION_ONLY
              - REAL_BOARDING_ALIGHTING
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - PLACES
                - NONE
            default: [ALL]
            maxItems: 1
      responses:
        "200":
          description: the requested trip
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=10000"
                description: >-
                  A trip resource is fairly persistent and has a medium time to live to allow short-term caching.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TripResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /trips-collection:
    post:
      tags:
        - Trips
      summary: returns a collection of trips for a given OJP trip request
      description: >-
        Returns trips for a given trip request based on the OJP specification.
      operationId: postTrips
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      requestBody:
        description: request for trips
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TripSearchCriteria"
      responses:
        "200":
          description: trips found matching criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TripsCollectionResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no trips found
        "500":
          description: internal server error
          content:
            "application/problem+json":
              schema:
                $ref: "#/components/schemas/Problem"
        "501":
          description: not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /trips-collection/{tripsCollectionId}:
    get:
      tags:
        - Trips
      summary: Returns a collection of trips for a specified origin and destination (and via).
      description: >-
        The unique codes of the origin and destination can be resolved using the places service.
      operationId: getTripsCollectionId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: tripsCollectionId
          description: id of the trips
          schema:
            type: string
          required: true
        - in: query
          name: page
          description: >-
            can be used for pagination control
          schema:
            type: string
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - TRIPS
                - NONE
            default: [ALL]
            maxItems: 2
      responses:
        "200":
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TripsCollectionResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /trip-offers-collection:
    post:
      tags:
        - Offers
      summary: Returns trip offers for origin and destination (and via) places.
      operationId: postTripOffersCollection
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TripOfferRequest"
      responses:
        "200":
          description: Collection of trip offers found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TripOffersCollectionResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /trip-offers-collection/{tripOffersCollectionId}:
    get:
      tags:
        - Offers
      summary: Returns offers and trips for a specified origin and destination (and via).
      description: >-
        The unique codes of the origin and destination can be resolved using the places service.
      operationId: getTripOffersCollectionId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: tripOffersCollectionId
          schema:
            type: string
          required: true
          description: id of the trip offers
        - in: query
          name: page
          description: >-
            can be used for pagination control
          schema:
            type: string
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - TRIPOFFERS
                - TRIPOFFERS.TRIPS
                - TRIPOFFERS.OFFERS
                - TRIPOFFERS.OFFERS.OFFERPARTS
                - TRIPOFFERS.PASSENGERS
                - NONE
            default: [ALL]
            maxItems: 5
      responses:
        "200":
          description: Trip Offer Collection(s) found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TripOffersCollectionResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /trip-offers/{tripOfferId}:
    get:
      tags:
        - Offers
      summary: Returns offers for a specified tripOfferId.
      operationId: getTripOffersId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: tripOfferId
          schema:
            type: string
          required: true
          description: id of the trip offer to get.
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - TRIPS
                - OFFERS
                - OFFERS.OFFERPARTS
                - PASSENGERS
                - NONE
            default: [ALL]
            maxItems: 5
      responses:
        "200":
          description: Trip offer found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TripOfferResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /offers-collection:
    post:
      tags:
        - Offers
      summary: Returns offers for non-journey based products.
      description: >-
        Get offers based on key words or regional information not linked to trips. 
        This includes simple passes or one day tickets.
      operationId: postOffersCollection
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      requestBody:
        description: request parameter for offer search
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferSearch"
      responses:
        "200":
          description: offer collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OffersCollectionResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /offers-collection/{offersCollectionId}:
    get:
      tags:
        - Offers
      summary: Returns offers unbound to a journey.
      operationId: getOffersCollectionId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: offersCollectionId
          schema:
            type: string
          required: true
          description: id of the trip offers
        - in: query
          name: page
          description: >-
            can be used for pagination control
          schema:
            type: string
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - OFFERS
                - OFFERS.OFFERRPARTS
                - OFFERS.PASSENGERS
                - NONE
            default: [ALL]
            maxItems: 3
      responses:
        "200":
          description: Offer Collection(s) found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OffersCollectionResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /offers/{offerId}:
    get:
      tags:
        - Offers
      summary: Returns an offer for the id requested.
      description: >-
        Returns an offer.
      operationId: getOffersId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: offerId
          schema:
            type: string
          required: true
          description: id of the offer to get.
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - OFFERPARTS
                - TRIP
                - NONE
            default: [ALL]
            maxItems: 3
      responses:
        "200":
          description: Offer found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  "/offers/{offerId}/reservations/{reservationId}/available-preferences":
    get:
      tags:
        - Reservations
      summary: Allows validating reservation selection parameters.
      description: >-
        The selected place preferences of the customer are checked for availability and the in combination available preferences are returned.
        This service provides the availability service to be compliant with existing 90918-1 services (as-if-reservation).
      operationId: validateReservationPreferencesId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: offerId
          schema:
            type: string
          required: true
          description: id of the offer.
        - in: path
          name: reservationId
          schema:
            type: string
          required: true
          description: id of the reservation where to validate the place availability
        - in: query
          name: preferences
          description: >-
            Place preferences (see code list Reservation Place Preferences) the customer wants to have
          schema:
            type: array
            items:
              type: string
        - in: query
          name: preferencesBundle
          description: >-
            Place preferences the customer wants to have applying to a selection of passengers or transportables only
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PlacePreferencesBundle"
      responses:
        "200":
          description: places available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceAvailabilitiesResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  "/offers/{offerId}/reservations/{reservationId}/nearby":
    get:
      tags:
        - Reservations
      summary: >-
        Allows validating reservation selection parameters near to a reference place.
      description: >-
        Check whether the reservation can be located near the provided reference place
        If selected place preferences of the customer are provided they are checked for availability and the in 
        combination available preferences are returned. This service provides the availability service to be 
        compliant with existing 90918-1 services (as-if-reservation).
      operationId: validateReservationNearbyId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: offerId
          schema:
            type: string
          required: true
          description: id of the offer.
        - in: path
          name: reservationId
          schema:
            type: string
          required: true
          description: id of the reservation where to validate the place availability
        - in: query
          name: coachNumber
          description: coach of the referenced place
          schema:
            type: string
          required: true
        - in: query
          name: placeNumber
          description: place number of the referenced place
          schema:
            type: string
          required: true
        - in: query
          name: preferences
          description: >-
            Place preferences (see code list Reservation Place Preferences) the customer wants to have
          schema:
            type: array
            items:
              type: string
        - in: query
          name: preferencesBundle
          description: >-
            Place preferences the customer wants to have applying to a selection of passengers or transportables only
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PlacePreferencesBundle"
      responses:
        "200":
          description: nearby places available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceAvailabilitiesResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  "/offers/{offerId}/reservations/{reservationId}/place-map":
    get:
      tags:
        - Reservations
      summary: Provides available places for place selection.
      description: >-
        Provide the availability per place to be displayed in a graphical place map for place selection.
        If selected place preferences of the customer are provided they are checked for availability and the in 
        combination available preferences are returned.
      operationId: provideReservationSeatMap
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: offerId
          schema:
            type: string
          required: true
          description: id of the offer
        - in: path
          name: reservationId
          schema:
            type: string
          required: true
          description: id of the reservation where to validate the place availability
        - in: query
          name: preferences
          description: >-
            Place preferences (see code list Reservation Place Preferences) the customer wants to have
          schema:
            type: array
            items:
              type: string
        - in: query
          name: preferencesBundle
          description: >-
            Place preferences the customer wants to have applying to a selection of passengers or transportables only
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PlacePreferencesBundle"
      responses:
        "200":
          description: available places for selection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceAvailabilityResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  "/offers/{offerId}/fares/{fareId}/available-preferences":
    get:
      tags:
        - Fares
      summary: Allows validating reservation selection parameters.
      description: >-
        The selected place preferences of the customer are checked for availability and the in combination
        available preferences are returned. This service provides the availability service to be compliant 
        with existing 90918-1 services (as-if-reservation)
      operationId: validateFareReservationPreferencesId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: offerId
          schema:
            type: string
          required: true
          description: id of the offer
        - in: path
          name: fareId
          schema:
            type: string
          required: true
          description: id of the fare where to validate the place availability
        - in: query
          name: preferences
          description: >-
            Place preferences (see code list Reservation Place Preferences) the customer wants to have
          schema:
            type: array
            items:
              type: string
        - in: query
          name: preferencesBundle
          description: >-
            Place preferences the customer wants to have applying to a selection of passengers or transportables only
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PlacePreferencesBundle"
      responses:
        "200":
          description: Places available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceAvailabilitiesResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  "/offers/{offerId}/fares/{fareId}/nearby":
    get:
      tags:
        - Fares
      summary: >-
        Allows validating reservation selection parameters near to a reference place.
      description: >-
        Check whether the fare reservation can be located near the provided reference place (given by
        coach number and place number). If selected place preferences of the customer are provided they
        are checked for availability and the in combination available preferences are returned.
        This service provides the availability service to be compliant with existing 90918-1 services (as-if-reservation).
      operationId: validateFareReservationNearbyId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: offerId
          schema:
            type: string
          required: true
          description: id of the offer
        - in: path
          name: fareId
          schema:
            type: string
          required: true
          description: id of the fare where to validate the place availability
        - in: query
          name: coachNumber
          description: coach of the referenced place
          schema:
            type: string
          required: true
        - in: query
          name: placeNumber
          description: place number of the referenced place
          schema:
            type: string
          required: true
        - in: query
          name: preferences
          description: >-
            Place preferences (see code list Reservation Place Preferences) the customer wants to have
          schema:
            type: array
            items:
              type: string
        - in: query
          name: preferencesBundle
          description: >-
            Place preferences the customer wants to have applying to a selection of passengers or transportables only
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PlacePreferencesBundle"
      responses:
        "200":
          description: Places available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceAvailabilitiesResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  "/offers/{offerId}/fares/{fareId}/place-map":
    get:
      tags:
        - Fares
      summary: Provides available places for place selection
      description: >-
        Provide the availability per place to be displayed in a graphical place map for place selection.
        If selected place preferences of the customer are provided they are checked for availability and the in
        combination available preferences are returned.
      operationId: provideFareReservationPlaceMap
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: offerId
          schema:
            type: string
          required: true
          description: id of the offer
        - in: path
          name: fareId
          schema:
            type: string
          required: true
          description: id of the reservation fare where to get the place availability
        - in: query
          name: preferences
          description: >-
            Place preferences (see code list Reservation Place Preferences) the customer wants to have
          schema:
            type: array
            items:
              type: string
        - in: query
          name: preferencesBundle
          description: >-
            Place preferences the customer wants to have applying to a selection of passengers or transportables only
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PlacePreferencesBundle"
      responses:
        "200":
          description: selectable places
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceAvailabilityResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /bookings/{bookingId}/passengers/{passengerId}:
    get:
      tags:
        - Passengers
      summary: Returns the passenger's information at booking step.
      operationId: getBookingPassengersId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking
        - in: path
          name: passengerId
          schema:
            type: string
          required: true
          description: id of the passenger
      responses:
        "200":
          description: Passenger found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PassengerResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    patch:
      tags:
        - Passengers
      summary: Allows updating a passenger's information at booking step.
      operationId: patchBookingPassenger
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking the passenger is in.
        - in: path
          name: passengerId
          schema:
            type: string
          required: true
          description: id of the passenger
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Passenger"
      responses:
        "200":
          description: Passenger successfully patched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Passenger"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /bookings/{bookingId}/purchaser:
    get:
      tags:
        - Purchaser
      summary: Returns the purchaser's information at booking step.
      operationId: getBookingPurchaser
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking the purchaser is in.
      responses:
        "200":
          description: Purchaser found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaserResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    patch:
      tags:
        - Purchaser
      summary: Allows updating a purchaser's information at booking step.
      operationId: patchBookingPurchaser
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking the purchaser is in.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Purchaser"
      responses:
        "200":
          description: Purchaser successfully patched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Purchaser"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /products:
    get:
      tags:
        - Master Data
      summary: Returns all products available to the caller.
      operationId: getProducts
      parameters:
        - in: query
          name: page
          description: >-
            can be used for pagination control
          schema:
            type: string
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      responses:
        "200":
          description: Product found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCollectionResponse"
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=43200"
                description: >-
                  A product resource has a long time to live to allow long-term caching. Any update of the product 
                  information will lead to the creation of a new resource.
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /products/{productId}:
    get:
      tags:
        - Master Data
      summary: Returns a product for the id provided.
      operationId: getProductsId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: productId
          schema:
            type: string
            description: unique and opaque id of the product
          required: true
          description: id of the product to get
      responses:
        "200":
          description: Product found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=43200"
                description: >-
                  A product resource has a long time to live to allow long-term caching. Any update of the product 
                  information will lead to the creation of a new resource.
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /bookings:
    post:
      tags:
        - Bookings
      summary: Allows to create a booking based on a previously requested offer.
      operationId: postBookings
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingRequest"
      responses:
        "200":
          description: >-
            Booking prebooked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /bookings/{bookingId}:
    get:
      tags:
        - Bookings
      summary: Returns a booking with the id provided.
      operationId: getBookingsId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking to get.
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - BOOKEDOFFERS.TRIP
                - BOOKEDOFFERS
                - BOOKEDOFFERS.OFFERPARTS
                - PASSENGERS
                - TICKETS
                - REFUND_PROPOSITIONS
                - NONE
            default: [ALL]
            maxItems: 7
      responses:
        "200":
          description: booking found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    delete:
      tags:
        - Bookings
      summary: Deletes the booking with the id provided.
      description: >-
        It is only possible before the booking is confirmed or in case of a technical problem in confirming multiple 
        independent bookings within a sales transaction. Deletes on a confirmed booking must be documented
        and evidence on the issue must be provided on request. 
        The delete on a confirmed booking is allowed immediately after the confirmation of the booking, 
        but must be repeated according to the error handling rules in case the delete fails.
      operationId: deleteBookingsId
      parameters:
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking to delete.
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    patch:
      tags:
        - Bookings
      summary: Allows updating the fulfillment type of the booking.
      operationId: confirmBooking
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking to be patched
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingPatchRequest"
      responses:
        "200":
          description: booking fulfillment type updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /bookings/{bookingId}/fulfillments:
    post:
      tags:
        - Fulfillments
      summary: Triggers the fulfillment of the booking, but does not actually return the fulfillments.
      operationId: postFulfillments
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking to be patched
      responses:
        "200":
          description: >-
            Fulfillment successfully completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FulfillmentsResponse"
        "202":
          description: >-
            Fulfillment successfully initiated, retrieve booking to retrieve the fulfillment documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: "#/components/schemas/WarningCollection"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    patch:
      tags:
        - Fulfillments
      summary: Finalizes the fulfillments and returns the documents.
      operationId: patchFulfillments
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking to be patched
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FulfillmentsPatch"
      responses:
        "200":
          description: >-
            Fulfillment successfully completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FulfillmentsResponse"
        "202":
          description: >-
            Fulfillment successfully initiated, retrieve booking to retrieve the fulfillment documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: "#/components/schemas/WarningCollection"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /fulfillments/{fulfillmentId}:
    get:
      tags:
        - Fulfillments
      summary: Returns the fulfillment, aka. ticket for the provided id.
      operationId: getFulfillmentId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: fulfillmentId
          schema:
            type: string
          required: true
          description: id of the fulfillment to get.
      responses:
        "200":
          description: fulfillment found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FulfillmentResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    patch:
      tags:
        - Fulfillments
      summary: Finalizes the fulfillment for usage and returns the documents.
      operationId: patchFulfillment
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: fulfillmentId
          schema:
            type: string
          required: true
          description: id of the fulfillment to get.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FulfillmentPatch"
      responses:
        "200":
          description: >-
            Fulfillment successfully completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FulfillmentsResponse"
        "202":
          description: >-
            Fulfillment successfully initiated, retrieve booking to retrieve the fulfillment documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: "#/components/schemas/WarningCollection"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /bookings/{bookingId}/refundOffers:
    post:
      tags:
        - Refund
      summary: Initiates a refund process by creating a RefundOffer resource.
      description:
        The RefundOffer contains the required information on the potential operation. One refund offer can then be
        accepted via a PATCH, deleted or left to die at the end of its lifetime.
      operationId: postRefundOffersBookingId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefundOfferRequest"
      responses:
        "200":
          description: Refund offer created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundOffersCollectionResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /bookings/{bookingId}/refundOffers/{refundOfferId}:
    get:
      tags:
        - Refund
      summary: Returns the refund offer for the ids provided.
      operationId: getRefundOffersId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking
        - in: path
          name: refundOfferId
          schema:
            type: string
          required: true
          description: id of the refund offer to get.
      responses:
        "200":
          description: RefundOffer found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundOffersCollectionResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    patch:
      tags:
        - Refund
      summary: Allows to accept and confirm a refund offer.
      operationId: patchRefundOffersId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking
        - in: path
          name: refundOfferId
          schema:
            type: string
          required: true
          description: id of the refund offer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefundOfferConfirm"
      responses:
        "200":
          description: RefundOffer confirmed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundOffersCollectionResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    delete:
      tags:
        - Refund
      summary: Deletes a refundOffer without waiting for expiry.
      operationId: deleteRefundOffersId
      parameters:
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking
        - in: path
          name: refundOfferId
          schema:
            type: string
          required: true
          description: id of the refund offer
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /bookings/{bookingId}/exchangeOperations/{exchangeOperationId}:
    get:
      tags:
        - Exchange
      summary: >-
        Returns the exchange operation with the id provided. It may be a provisional or a confirmed exchange.
      operationId: getExchangeOperation
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking
        - in: path
          name: exchangeOperationId
          schema:
            type: string
          required: true
          description: id of the exchange operation
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - TRIP
                - OFFERS
                - OFFERS.OFFERPARTS
                - OFFERS.OFFERPARTS.PRODUCTS
                - PASSENGERS
            default: [ALL]
            maxItems: 5
      responses:
        "200":
          description: ExchangeOperation found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeOperationResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    patch:
      tags:
        - Exchange
      summary: >-
        Allows to update an ongoing exchange operation.
      operationId: patchExchangeOperation
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking to be exchanged.
        - in: path
          name: exchangeOperationId
          schema:
            type: string
          required: true
          description: id of the exchange operation.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExchangeOperationPatchRequest"
      responses:
        "200":
          description: Exchange successfully completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeOperationResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    delete:
      tags:
        - Exchange
      summary: >-
        Cancels an ongoing exchange operation in provisional state.
      operationId: deleteExchangeOperation
      parameters:
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: id of the booking containing the exchange operation
        - in: path
          name: exchangeOperationId
          schema:
            type: string
          required: true
          description: id of the exchangeOperation to delete.
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /exchange-trip-offers-collection:
    post:
      tags:
        - Exchange
      summary: >-
        Returns exchange offers for a specified fulfillments submitted given requested new trip 
        characteristics.
      operationId: postExchangeTripOffersCollection
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/idempotencyKey"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExchangeTripOfferRequest"
      responses:
        "200":
          description: Collection of exchange trip offers found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeTripOffersCollectionResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /exchange-trip-offers-collection/{exchangeTripOffersCollectionId}:
    get:
      tags:
        - Exchange
      summary: >-
        Returns offers and trips for a specified origin and destination (and via).
      operationId: getExchangeTripOffersCollectionId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: exchangeTripOffersCollectionId
          schema:
            type: string
          required: true
          description: id of the trip to get.
        - in: query
          name: page
          description: >-
            can be used for pagination control
          schema:
            type: string
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - TRIPOFFERS
                - TRIPOFFERS.TRIPS
                - TRIPOFFERS.OFFERS
                - TRIPOFFERS.OFFERS.OFFERPARTS
                - TRIPOFFERS.OFFERS.OFFERPARTS.PRODUCTS
                - TRIPOFFERS.PASSENGERS
                - NONE
            default: [ALL]
            maxItems: 7
      responses:
        "200":
          description: Trip Offer Collection(s) found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeTripOffersCollectionResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /exchange-trip-offers/{exchangeTripOfferId}:
    get:
      tags:
        - Exchange
      summary: Returns offers for a specified trip offer id.
      operationId: getExchangeTripOffersId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: exchangeTripOfferId
          schema:
            type: string
          required: true
          description: id of the trip to get.
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references
            only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - TRIPS
                - OFFERS
                - OFFERS.OFFERPARTS
                - OFFERS.OFFERPARTS.PRODUCTS
                - PASSENGERS
                - NONE
            default: [ALL]
            maxItems: 6
      responses:
        "200":
          description: Trip offer found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeTripOfferResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /complaints:
    post:
      tags:
        - Complaint Management
      summary: Allows adding the Complaint.
      operationId: createComplaint
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Complaint"
      responses:
        "200":
          description: complaint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComplaintResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /complaints/{complaintId}:
    get:
      tags:
        - Complaint Management
      summary: returns a complaint
      description: >-
        Returns a complaint
      operationId: getComplaint
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: complaintId
          schema:
            type: string
          required: true
          description: id of the complaint
      responses:
        "200":
          description: the requested complaint
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=10000"
                description: >-
                  A places resource is fairly persistent and has a medium time to live to allow short-term caching.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComplaintResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no place information found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

    patch:
      tags:
        - Complaint Management
      summary: Allows updating the Complaint.
      operationId: patchComplaint
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          name: complaintId
          schema:
            type: string
            format: uuid
          required: true
          description: id of the complaint to be patched
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComplaintPatchRequest"
      responses:
        "200":
          description: complaint updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComplaintResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          $ref: "#/components/responses/ConflictResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /coachLayouts:
    get:
      tags:
        - Master Data
      summary: Returns all coach layouts.
      description: >-
        Retrieve the coach layout description needed for graphical reservation. The coach
        layouts can either be retrieved as a complete list or specificity for a train identified via offerId and reservationId or fareId
      operationId: getCoachLayouts
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: query
          name: page
          description: >-
            can be used for pagination control
          schema:
            type: string
      responses:
        "200":
          description: coach layouts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoachLayoutsResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /coachLayouts/{layoutId}:
    get:
      tags:
        - Master Data
      summary: Returns a coach layout for a provided id.
      description: >-
        Retrieve a coach layout description needed for graphical reservation for a given layout id.
      operationId: getCoachLayoutsLayoutId
      parameters:
        - $ref: "#/components/parameters/requestor"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - in: path
          description: id of the layout
          name: layoutId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: coach layouts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoachLayoutResponse"
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /reductionCards:
    get:
      tags:
        - Master Data
      summary: Returns a collection of reduction card definitions.
      operationId: getReductionCards
      parameters:
        - in: query
          name: page
          description: >-
            can be used for pagination control
          schema:
            type: string
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      responses:
        "200":
          description: Reduction cards provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReductionCardCollectionResponse"
          headers:
            Expires:
              schema:
                type: string
                description: >-
                  Gives the date/time after which the response is considered stale (in "HTTP-date" format as defined by RFC 7231).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /zones:
    get:
      tags:
        - Master Data
      summary: Returns a collection of zone definitions.
      operationId: getZones
      parameters:
        - in: query
          name: page
          description: >-
            can be used for pagination control
          schema:
            type: string
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      responses:
        "200":
          description: zone definitions provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneCollectionResponse"
          headers:
            Expires:
              schema:
                type: string
                description: >-
                  Gives the date/time after which the response is considered stale (in "HTTP-date" format as defined by RFC 7231).
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

security:
  - oAuth2ClientCredentials: []

components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      description: See https://swagger.io/docs/specification/authentication/oauth2/
      flows:
        clientCredentials:
          # The token endpoint of the authorization server, needs to be specified here
          tokenUrl: "https://login.microsoftonline.com/tbd"
          scopes: {} # The scopes are not being used yet

  parameters:
    requestor:
      name: Requestor
      in: header
      description: >-
        The requestor header contains detailed information about who is calling the API. It can include
        information such as channel, organization, sales unit or workstation id and be used to configure 
        e.g. the fare range provided to the caller. The content of the string is part of a bilateral 
        contract by the two parties and not standardized by OSDM. It is recommend to encrypt the 
        information transferred.
      schema:
        type: string
      required: true

    acceptLanguage:
      name: Accept-Language
      in: header
      description: >-
        Describes the set of natural languages that are preferred for localized text in the response
        to the request (see RFC2616-sec14.4). Supporting English (en) is a must.
      schema:
        type: string
      required: false

    idempotencyKey:
      name: Idempotency-Key
      in: header
      description: >-
        The HTTP Idempotency request header field can be used to carry idempotency key in order to make 
        non-idempotent HTTP methods such as POST or PATCH fault-tolerant.
      schema:
        type: string
      required: false

    traceParent:
      name: traceparent
      in: header
      description: >-
        The traceparent header describes the position of the incoming request in its trace graph in a portable, 
        fixed-length format. Its design focuses on fast parsing. Every tracing tool MUST properly set 
        traceparent even when it only relies on vendor-specific information in tracestate (see W3C Trace Context).
      schema:
        type: string
      required: false

    traceState:
      name: tracestate
      in: header
      description:
        The tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs.
        Storing information in tracestate is optional (see W3C Trace Context).
      schema:
        type: string
      required: false

  responses:
    BadRequestResponse:
      description: Bad Request (400)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    ConflictResponse:
      description: Conflict (409)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    InternalServerErrorResponse:
      description: Internal Server Error (500)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    ServiceUnavailableResponse:
      description: Service Unavailable (503)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

  schemas:
    WarningCollection:
      type: array
      description: >-
        List of warnings.
      items:
        $ref: "#/components/schemas/Warning"

    Warning:
      type: object
      description: >-
        This element can be used to pass non-blocking information or events,
        such as a price difference with the initially offered price at booking time. 
        It is inspired on the JSon problem structure.
      required:
        - code
      properties:
        code:
          type: string
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the warning type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: "about:blank"
          example: "https://example.com/warns/price-updated"
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            warning.
          example: The price of the given offer part has been updated during the booking operation
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the warning.
            example: offers/offer1234
    PlaceResponse:
      type: object
      required:
        - places
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        places:
          type: array
          items:
            $ref: "#/components/schemas/Place"

    TripResponse:
      type: object
      required:
        - trip
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        trip:
          $ref: "#/components/schemas/Trip"

    PlaceRequest: ## OJP  # Reduced scope
      type: object
      description: >-
        Initial input for the place information request. This input defines what is originally looked for.
        Provided by OJP.
      properties:
        placeInput:
          $ref: "#/components/schemas/InitialPlaceInput"
        restrictions:
          $ref: "#/components/schemas/PlaceParam"

    PlaceParam: ## OJP  # Reduced scope
      type: object
      description: >-
        More parameters for restricting the request. Provided by OJP.
      properties:
        type:
          $ref: "#/components/schemas/PlaceType"
        usage:
          $ref: "#/components/schemas/PlaceUsage"
        ptModes:
          $ref: "#/components/schemas/ModeFilter"
        serviceBrandFilter:
          $ref: "#/components/schemas/ServiceBrandFilter"
        carrierFilter:
          $ref: "#/components/schemas/CarrierFilter"
        # topographicPlaceRef:  ## Out of scope
        #   $ref: "#/components/schemas/TopographicPlaceRef"
        pointOfInterestFilter:
          $ref: "#/components/schemas/PointOfInterestFilter"
        numberOfResults:
          description: >-
            Maximum number of results to be returned. The service is allowed to return fewer objects if reasonable
            or otherwise appropriate.
          type: integer
          format: int32
          minimum: 1
      # continueAt:   # Out of scope
      #  type: number
      #  format: int32
      # includePtModes:   # Out of scope
      #  type: boolean

    PlaceType: ## OJP
      type: string
      description: Provided by OJP.
      enum:
        - STOP
        - ADDRESS
        - POI
        - GEO_COORDINATE
        - TOPOGRAPHIC_PLACE

    PlaceUsage: ## OJP
      type: string
      description: >-
        Provided by OJP.
      enum:
        - ORIGIN
        - VIA
        - DESTINATION

    InitialPlaceInput: ## OJP
      type: object
      description: >-
        Initial input for the place information request. This input defines what is originally looked for.
        Provided by OJP.
      properties:
        #initialInput:
        #  anyOf:
        name:
          description: >-
            Name of the place object which is looked after. This is usually the user's input. If not given,
            the name of the resulting place objects is not relevant.
          type: string
          example: "Bern Bärengraben"
        geoPosition:
          $ref: "#/components/schemas/GeoPosition"
    #         - $ref: "#/components/schemas/GeoRestriction"   # Out of scope
    #         - $ref: "#/components/schemas/AllowedSystemId"    # Out of scope

    TripSearchCriteria: ## OJP # Renamed from TripRequest, reduced scope
      type: object
      description: >-
        Trip request structure. Provided by OJP.
      required:
        - origin
        - destination
      properties:
        departureTime: # EXT Array out of Scope
          type: string
          format: date-time
        arrivalTime:
          description: >-
            requested arrival time. If arrival time is provided the departure time must be omitted.
          type: string
          format: date-time
        origin: # EXT Array out of Scope
          description: >-
            Specifies the origin situation from where the user wants to start.
          $ref: "#/components/schemas/PlaceInput"
        destination: # EXT Array out of Scope
          description: >-
            Specifies the destination situation where the user is heading to.
          $ref: "#/components/schemas/PlaceInput"
        requestedSection: # EXT Indicates sub part of trip that is requested to price.
          $ref: "#/components/schemas/Section"
        via:
          description: >-
            Ordered series of points where the journey must pass through. If more
            than one via point is given all of them must be obeyed - in the correct
            order. The server is allowed to replace a via stop by equivalent stops.
          type: array
          items:
            $ref: "#/components/schemas/TripVia"
        # notVia:   # Out of scope
        #   description: >-
        #     Not-via restrictions for a TRIP, i.e. SCHEDULED STOP POINTs or STOP PLACEs
        #     that the TRIP is not allowed to pass through. If more than one not via point
        #     is given all of them must be obeyed.
        #   oneOf:
        #     - $ref: "#/components/schemas/StopPointRef"
        #     - $ref: "#/components/schemas/StopPlaceRef"
        # noChangesAt:   # Out of scope
        #   description: >-
        #     No-change-at restrictions for a TRIP, i.e. SCHEDULED STOP POINTs or STOP PLACEs
        #     at which no TRANSFER is allowed within a TRIP
        #   oneOf:
        #     - $ref: "#/components/schemas/StopPointRef"
        #     - $ref: "#/components/schemas/StopPlaceRef"
        params:
          description: >-
            Options to control the search behavior and response contents.
          $ref: "#/components/schemas/TripParam"
        embed:
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          type: array
          items:
            type: string
            enum:
              - TRIPS
              - NONE
              - ALL
          default: [ALL]

    TripVia: ## OJP
      type: object
      description: >-
        Via restrictions for a trip. Provided by OJP.
      required:
        - viaPoint
      properties:
        viaPoint:
          $ref: "#/components/schemas/PlaceRef"
        dwellTime:
          type: string
          format: duration
          description: desired dwell time at the via place
          example: "30M"

    BaseTripPolicyFilter: ## OJP # Reduced Scope
      type: object
      description: >-
        Policies that control the trip search behavior for both public and individual transport. 
        Provided by OJP.
      properties:
        noSingleStep:
          description: The user is not able to climb one step, i.e. wheel chair.
          type: boolean
          default: false
        # noStairs:  # Out of scope
        #   description: The user is not able to walk up/down stairs.
        #   type: boolean
        #   default: false
        # noEscalator:  # Out of scope
        #   type: boolean
        #   description: The user is not able to use an escalator.
        #   default: false
        # noElevator:  # Out of scope
        #   type: boolean
        #   description: The user is not able to use an elevator.
        #   default: false
        # noRamp:  # Out of scope
        #   type: boolean
        #   description: The user is not able to use an ramp.
        #   default: false
        noSight:
          type: boolean
          description: The user is not able to see.
          default: false

    TripMobilityFilter: ## OJP
      type: object
      description: >-
        Base mobility options to be applied for both public and individual transport.
        Provided by OJP.
      properties:
        # levelEntrance:  # Out of Scope
        #   description: >-
        #     The user needs vehicles with level entrance between platform and vehicle, f.e.
        #     for wheelchair access.
        #   type: boolean
        #   default: false
        bikeTransport:
          description: >-
            The user wants to carry a bike on public transport.
          type: boolean
          default: false
        walkSpeed:
          description: >-
            Deviation from average walk speed in percent. 100% percent is average speed.
          type: integer
          format: int32
          default: 100
        additionalTransferTime:
          description: >-
            Additional time added to all transfers (also to transfers between individual to
            public transport).
          type: string
          format: duration
          example: 0S

    ModeFilter: ## OJP
      type: object
      description: >-
        List of public transport modes to include or exclude. Provided by OJP.
      properties:
        exclude:
          description: Whether modes in list are to include or exclude from search.
          type: boolean
          default: True
        transportModes:
          description: List of Transport modes to include/exclude.
          type: array
          items:
            $ref: "#/components/schemas/Mode"

    CarrierFilter: ## OJP
      type: object
      description: >-
        Filter for in/exclusion of carriers. Provided by OJP.
      properties:
        exclude:
          description: Whether carrier in list are to include or exclude from search.
          type: boolean
          default: True
        carriers:
          description: Reference to carrier
          type: array
          items:
            $ref: "#/components/schemas/Company"

    ServiceBrandFilter: ## OJP
      type: object
      description: >-
        Filter for in/exclusion of service brands. Provided by OJP.
      properties:
        exclude:
          description: Whether service brand in list are to include or exclude from search.
          type: boolean
          default: True
        serviceBrands:
          description: Reference to service brand codes
          type: array
          items:
            $ref: "#/components/schemas/ServiceBrandCode"

    VehicleFilter: ## OJP # EXT
      type: object
      description: >-
        Filter for in/exclusion of vehicle based on vehicle number or line number.
      properties:
        exclude:
          description: Whether vehicle in list is to include or exclude from search.
          type: boolean
          default: True
        vehicleNumbers:
          type: array
          items:
            $ref: "#/components/schemas/VehicleNumber"
        lineNumbers:
          type: array
          items:
            $ref: "#/components/schemas/LineNumber"

    PointOfInterestFilter: ## OJP
      type: object
      description: >-
        Filter POIs by category. Provided by OJP.
      properties:
        exclude:
          description: Whether operators in list are to include or exclude from search.
          type: boolean
          default: True
        pointOfInterestCategory:
          description: >-
            These POI categories can be used to filter POIs. If more than one is given the filtering
            is by logical "OR" (when Exclude=FALSE) and logical "AND" (when Exclude=TRUE).
          type: array
          items:
            $ref: "#/components/schemas/PointOfInterestCategory"

    TripDataFilter: ## OJP # Reduced scope
      type: object
      description: >-
        Data to be included/excluded from search, f.e. modes, operators. Provided by OJP.
      properties:
        ptModeFilter:
          $ref: "#/components/schemas/ModeFilter"
        # lineFilter:  # Out of scope
        #   $ref: "#/components/schemas/LineDirectionFilter"
        carrierFilter: # EXT
          $ref: "#/components/schemas/CarrierFilter"
        serviceBrandFilter: # EXT
          $ref: "#/components/schemas/ServiceBrandFilter"
        # privateModeFilter:  # Out of scope
        #   $ref: "#/components/schemas/PrivateModeFilter"
        vehicleFilter:
          $ref: "#/components/schemas/VehicleFilter"

    TripParam: ## OJP # Reduced scope
      type: object
      description: >-
        Options to control the search behavior and response contents.
        number of results > either number of results or number of results before and after are used.
        Provided by OJP.
      properties:
        # allOf:
        dataFilter:
          $ref: "#/components/schemas/TripDataFilter"
        policyFilter:
          $ref: "#/components/schemas/BaseTripPolicyFilter"
        mobilityFilter:
          $ref: "#/components/schemas/TripMobilityFilter"
        numberOfResults:
          type: integer
          format: int32
          default: 5
        numberOfResultsBefore:
          type: integer
          format: int32
          default: 0
        numberOfResultsAfter:
          type: integer
          format: int32
          default: 5
        ignoreRealtimeData:
          type: boolean
          default: false
        transferLimit:
          description: The maximum number of interchanges the user will accept per trip.
          type: integer
          format: int32
          minimum: 0
        # optimizationMethod:  # Out of scope
        #  $ref: "#/components/schemas/OptimizationMethod"
        itModesToCover:
          $ref: "#/components/schemas/IndividualMode"
      #  - $ref: "#/components/schemas/BaseTripContentFilter"  ## Out of scope
      #  - $ref: "#/components/schemas/TripContentFilter"
      #  - $ref: "#/components/schemas/FareParam"

    TripsCollectionResponse: ## OJP  # Reduced scope
      type: object
      description: >-
        Trip response structure. Provided by OJP.
      required:
        - id
        - trips
      properties:
        # calcTime:
        #  type: integer
        #  minimum: 0
        # tripResponseContext:  # Out of scope
        #  $ref: "#/components/schemas/ResponseContext"
        #        tripResult:
        #          type: array
        #          items:
        #            $ref: "#/components/schemas/TripResult"
        warning:
          $ref: "#/components/schemas/WarningCollection"
        id:
          type: string
        trips:
          type: array
          items:
            $ref: "#/components/schemas/Trip"
        _links:
          $ref: "#/components/schemas/Link"

    Trip: ## OJP # Reduced scope
      type: object
      description: >-
        A complete trip from origin to destination. Provided by OJP.
      required:
        - id # EXT replaces tripId, fix to OJP submitted, see https://github.com/VDVde/OJP/issues/179
        - duration
        - startTime
        - endTime
        - transfers
        - legs # EXT replaces tripLegs, fix to OJP submitted, see https://github.com/VDVde/OJP/issues/179
      properties:
        id:
          description: >-
            Id of this trip for referencing purposes. Unique within a trip.
          type: string
        externalRef:
          description: >-
            External reference of this trip for referencing purposes. Unique within a trip specification.
          type: string
        duration:
          description: Overall duration of the trip
          type: string
          example: "PT20M"
        origin: # EXT
          description: >-
            Specifies the origin situation from where the user wants to start.
          $ref: "#/components/schemas/PlaceRef" # EXT no support for array
        destination: # EXT
          description: >-
            Specifies the destination situation where the user is heading to.
          $ref: "#/components/schemas/PlaceRef" # EXT no support for array
        startTime:
          description: Departure time at origin.
          type: string
          format: date-time
        endTime:
          description: Arrival time at destination
          type: string
          format: date-time
        transfers:
          description: Number of interchanges
          type: integer
          format: int32
          minimum: 0
        distance:
          description: >-
            Distance in meters over the the complete trip, i.e., including transfer legs.
          type: integer
          format: int32
          minimum: 0
        legs:
          description: Legs ot the trip
          type: array
          items:
            $ref: "#/components/schemas/TripLeg"
          minItems: 1
        operatingDays:
          $ref: "#/components/schemas/OperatingDays"
        operatingDaysDescription:
          type: string
          description: >-
            Textual description of the operation days, e.g. "Monday to Friday" or "Not on holidays".
        situationFullRefs:
          type: array
          items:
            $ref: "#/components/schemas/SituationFullRef"
        tripStatus:
          $ref: "#/components/schemas/TripStatus"
        _links:
          $ref: "#/components/schemas/Link"

    TripStatus:
      type: object
      properties:
        unplanned:
          description: Whether this trip is an additional one that has not been planned.
          type: boolean
          default: false
        cancelled:
          description: Whether this trip is cancelled and will not be run.
          type: boolean
          default: false
        deviation:
          description: Whether this trip deviates from the planned service pattern.
          type: boolean
          default: false
        delayed:
          description: Whether this trip is delayed.
          type: boolean
          default: false
        infeasible:
          description: Whether this trip cannot be used, due to operational delays and impossible transfers.
          type: boolean
          default: false

    TripSpecification:
      type: object
      description: >-
        A minimal trip specification from origin to destination.
      required:
        - legs # EXT replaces tripLegs, fix to OJP submitted, see https://github.com/VDVde/OJP/issues/179
      properties:
        externalRef:
          description: >-
            External reference of this trip for referencing purposes. Unique within a trip specification.
          type: string
        legs:
          type: array
          items:
            $ref: "#/components/schemas/TripLegSpecification"
          minItems: 1

    OperatingDays: ## OJP
      type: object
      description: >-
        Day of public transport operation of which the characteristics are defined in a specific
        service calendar and which may last more than 24 hours. Provided by OJP.
      required:
        - from
        - until # EXT to renamed to until
        - pattern
      properties:
        from:
          type: string
          description: Start date of period
          format: date
        until:
          type: string
          description: End date of period
          format: dateTime
        pattern:
          type: string
          description: >-
            Bit pattern for operating days between start date and end date.
            The length of the pattern is equal to the number of days from 
            start date to end date. A bit value of "1" indicates that an event
            actually happens on the day that is represented by the bit position.
    TripLeg: ## OJP
      type: object
      description: >-
        A single stage of a trip that is made without change of MODE or service (ie: 
        between each interchange). Provided by OJP.
      required:
        - id ## EXT replaces legId, fix to OJP submitted, see https://github.com/VDVde/OJP/issues/181
      properties:
        id:
          description: Id of this trip leg. Unique within trip result. A seqId is a leg id.
          type: string
        timedLeg:
          $ref: "#/components/schemas/TimedLeg"
        transferLeg:
          $ref: "#/components/schemas/TransferLeg"
        continuousLeg:
          $ref: "#/components/schemas/ContinuousLeg"

    TripLegSpecification:
      type: object
      description: >-
        A minimal trip leg specification.
      required:
        - externalRef
      properties:
        externalRef:
          description: >-
            External reference of this trip leg. Unique within trip result.
          type: string
        timedLeg:
          $ref: "#/components/schemas/TimedLegSpecification"
        transferLeg:
          $ref: "#/components/schemas/TransferLegSpecification"
        # continuousLeg:
        #   $ref: "#/components/schemas/ContinuousLeg"

    TimedLeg: ## OJP # Reduced scope
      type: object
      description: >-
        A leg which is bound to a timetabled schedule. Corresponds to a ride. Provided by OJP.
      required:
        - start # EXT legBoard renamed to start
        - end # EXT legAlight renamed to end
        - service
      properties:
        start:
          $ref: "#/components/schemas/LegBoard"
        intermediates:
          type: array
          items:
            $ref: "#/components/schemas/LegIntermediate"
        end:
          $ref: "#/components/schemas/LegAlight"
        service:
          $ref: "#/components/schemas/DatedJourney"
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/ServiceAttribute"
        operatingDays:
          $ref: "#/components/schemas/OperatingDays"
        operatingDaysDescription:
          type: string
          description: >-
            Textual description of the operation days, e.g. "Monday to Friday" or "not on holidays".
        # legTrack:  # Out of scope
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/LegTrack"
        duration: # EXT add attribute for consistency
          type: string
          format: duration
        co2Emission:
          $ref: "#/components/schemas/Quantity"

    TimedLegSpecification:
      type: object
      description: >-
        A minimal timed leg specification.
      required:
        - start # EXT legBoard renamed to start
        - end # EXT legAlight renamed to board
        - service
      properties:
        start:
          $ref: "#/components/schemas/LegBoardSpecification"
        intermediates:
          type: array
          items:
            $ref: "#/components/schemas/LegIntermediateSpecification"
        end:
          $ref: "#/components/schemas/LegAlightSpecification"
        service:
          $ref: "#/components/schemas/DatedJourney"

    TransferLegSpecification:
      type: object
      description: >-
        A minimal timed leg specification.
      required:
        - start # EXT legBoard renamed to start
        - end # EXT legAlight renamed to board
        - service
      properties:
        start:
          $ref: "#/components/schemas/PlaceInput"
        intermediates:
          type: array
          items:
            $ref: "#/components/schemas/PlaceInput"
        end:
          $ref: "#/components/schemas/PlaceInput"
        service:
          $ref: "#/components/schemas/DatedJourney"

    TransferLeg: ## OJP # Reduced scope
      type: object
      description: >-
        A leg which links other legs of a trip where a transfer between different places is required. 
        Provided by OJP.
      required:
        - start # EXT legStart renamed to start
        - end # EXT legEnd renamed to end
      properties:
        continuousMode:
          $ref: "#/components/schemas/ContinuousMode"
        transferMode:
          $ref: "#/components/schemas/TransferMode"
        start:
          description: Stop/Station to board.
          $ref: "#/components/schemas/PlaceRef"
        end:
          description: Stop/Station to alight.
          $ref: "#/components/schemas/PlaceRef"
        timeWindowStart: # Inlined from TimeWindow
          description: Time at which window begins.
          type: string
          format: date-time
        timeWindowEnd: # Inlined from TimeWindow
          description: Time at which window ends.
          type: string
          format: date-time
        duration:
          description: Overall duration of this interchange.
          type: string
          format: duration
          example: "PT20M"
        # walkDuration:  # Out of scope
        #   description: Walk time as part of the overall interchange duration.
        #   type: string
        #   format: duration
        #   example: "PT20M"
        # bufferTime:  # Out of scope
        #   description: >-
        #     Buffer time as part of the overall interchange duration. Buffer times,
        #     e.g. check in/out times, sometimes are mandatory for using certain
        #     services as f.e. airplanes, ferries or high speed trains.
        #   type: string
        #   format: duration
        #   example: "0SM"
        # legDescription:  # Out of scope
        #   type: string
        # length:  # Out of scope
        #   type: number
        #   minimum: 0
        # pathGuidance:  # Out of scope
        #   $ref: "#/components/schemas/PathGuidance"
        situationFullRef:
          type: array
          items:
            $ref: "#/components/schemas/SituationFullRef"
        co2Emission:
          $ref: "#/components/schemas/Quantity"

    ContinuousLeg: ## OJP # Reduced scope
      type: object
      description: >-
        A leg of a journey that is not bound to a timetable. Provided by OJP.
      required:
        - start # EXT legStart renamed to start
        - end # EXT legEnd renamed to end
        - service
      properties:
        start:
          description: Stop/Station to board.
          $ref: "#/components/schemas/Place"
        end:
          description: Stop/Station to alight.
          $ref: "#/components/schemas/Place"
        service:
          $ref: "#/components/schemas/ContinuousService"
        timeWindowStart: # Inlined from TimeWindow
          description: Time at which window begins.
          type: string
          format: date-time
        timeWindowEnd: # Inlined from TimeWindow
          description: Time at which window ends.
          type: string
          format: date-time
        duration:
          description: >-
            Duration of this leg according to user preferences like walk speed.
          type: string
          format: duration
          example: "1800S"
        # legDescription:  # Out of scope
        #   type: string
        # length:  # Out of scope
        #   type: number
        #   minimum: 0
        # pathGuidance:  # Out of scope
        #   $ref: "#/components/schemas/PathGuidance"
        situationFullRefs:
          type: array
          items:
            $ref: "#/components/schemas/SituationFullRef"
        co2Emission:
          $ref: "#/components/schemas/Quantity"

    ContinuousService: ## OJP
      type: object
      description: >-
        A vehicle movement on a continuous, non-timetabled service.
        Service of this leg. May be "walk" in most cases, but also cycling or taxi etc.
        Provided by OJP.
      required:
        - operatingDayRef
        - journeyRef
        - mode
        - publishedServiceName
        - originText
        - destinationText
      properties:
        continuousMode:
          $ref: "#/components/schemas/ContinuousMode"
        individualMode:
          $ref: "#/components/schemas/IndividualMode"
        operatingDayRef:
          $ref: "#/components/schemas/OperationDayRef"
        journeyRef:
          $ref: "#/components/schemas/JourneyRef"
        mode: # Ask Stefan
          type: string
          example: "Ask Stefan"
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/ServiceAttribute"
        publishedServiceName:
          type: string
          example: "Circle Line"
        originText:
          type: string
        destinationText:
          type: string

    ServiceAttribute:
      type: object
      properties:
        code:
          description: codes from the service facilities code list
          type: string
        name:
          type: string

    ContinuousMode: ## OJP
      type: string
      description: Types of modes that run at any time without a timetable. Provided by OJP.
      x-extensible-enum:
        - WALK
        - DEMAND_RESPONSIVE
        - REPLACEMENT_SERVICE

    IndividualMode: ## OJP
      type: string
      description: Modes which an individual powers themselves (such as walk, cycle). Provided by OJP.
      x-extensible-enum:
        - WALK
        - CYCLE
        - TAXI
        - SELF_DRIVE_CAR
        - OTHERS_DRIVE_CAR
        - MOTORCYCLE
        - TRUCK
        - SCOOTER
        - RIDE_POOL_CAR
        - CAR_SHARING
        - CYCLE_SHARING
        - SCOOTER_SHARING
      default: WALK

    TransferMode: ## OJP
      type: string
      description: Modes dedicated to perform transfers. Provided by OJP.
      x-extensible-enum:
        - WALK
        - PARK_AND_RIDE
        - BIKE_AND_RIDE
        - CAR_HIRE
        - BIKE_HIRE
        - PROTECTED_CONNECTION
        - GUARANTEED_CONNECTION
        - REMAIN_IN_VEHICLE
        - CHANGE_WITHIN_VEHICLE
        - CHECK_IN
        - CHECK_OUT
      default: WALK

    StopCallStatus: ## OJP
      type: object
      description: Status properties for the vehicle call at this stop. Provided by OJP.
      properties:
        order:
          description: Sequence number of this stop in the service pattern of the journey.
          type: integer
          format: int32
          minimum: 1
        requestStop:
          description: The vehicle journey calls at this stop only on demand.
          type: boolean
          default: false
        unplannedStop:
          description: This stop has not been planned by the planning department.
          type: boolean
          default: false
        notServicedStop:
          description: The vehicle will not call at this stop despite earlier planning.
          type: boolean
          default: false
        noBoardingAtStop:
          description: Boarding will not be allowed at this stop of this journey.
          type: boolean
          default: false
        noAlightingAtStop:
          description: Alighting will not be allowed at this stop of this journey.
          type: boolean
          default: false

    LegBoard: ## OJP
      type: object
      description: >-
        Describes the the situation at a stop or station at which the passenger boards a Leg
        of a trip including time-related information. Provided by OJP.
      #allOf:
      required:
        - stopPlaceRef ## EXT stopPlaceRef instead of stopPointRef
        - serviceDeparture
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/PlaceRef" ## EXT stopPlaceRef instead of stopPointRef
        plannedStopPointName:
          description: >-
            Name of the bay/quay/terminal where to board/alight from the vehicle. According to 
            planned timetable.
          type: string
          example: "3"
        estimatedStopPointName:
          description: >-
            Name of the bay/quay/terminal where to board the vehicle. As to the latest realtime status.
          type: string
          example: "8"
        serviceDeparture: # EXT directly inline service time
          description: >-
            Describes the departure situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"
        status:
          $ref: "#/components/schemas/StopCallStatus"

    LegBoardSpecification:
      type: object
      description: Minimal leg board specification.
      required:
        - placeInput ## EXT stopPlaceRef instead of stopPointRef
        - serviceDeparture
      properties:
        placeInput:
          $ref: "#/components/schemas/PlaceInput" ## EXT stopPlaceRef instead of stopPointRef
        serviceDeparture:
          description: >-
            Describes the departure situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"

    LegIntermediate: ## OJP
      type: object
      description: >-
        Describes the situation at a stop or station that lies between the LegBoard and 
        LegAlight stop or station including time-related information. Provided by OJP.
      #allOf:
      required:
        - PlaceRef ## EXT stopPlaceRef instead of stopPointRef
        - serviceArrival
        - serviceDeparture
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/PlaceRef" ## EXT stopPlaceRef instead of stopPointRef
        plannedStopPointName:
          description: >-
            Name of the bay/quay/terminal where to board/alight from the vehicle. According to 
            planned timetable.
          type: string
          example: "3"
        estimatedStopPointName:
          description: >-
            Name of the bay/quay/terminal where to board the vehicle. As to the latest realtime status.
          type: string
          example: "8"
        serviceArrival: # EXT directly inline service time
          description: >-
            Describes the arrival situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"
        serviceDeparture: # EXT directly inline service time
          description: >-
            Describes the departure situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"
        status:
          $ref: "#/components/schemas/StopCallStatus"

    LegIntermediateSpecification:
      type: object
      description: Minimal leg intermediate specification.
      required:
        - stopPlaceRef ## EXT stopPlaceRef instead of stopPointRef
        - serviceArrival
        - serviceDeparture
      properties:
        placeInput:
          $ref: "#/components/schemas/PlaceInput" ## EXT stopPlaceRef instead of stopPointRef
        serviceArrival:
          description: >-
            Describes the arrival situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"
        serviceDeparture:
          description: >-
            Describes the departure situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"

    LegAlight: ## OJP
      type: object
      description: >-
        Describes the situation at a stop or station at which the passenger alights from a Leg 
        of a trip including time-related information. Provided by OJP.
      #allOf:
      required:
        - stopPlaceRef ## EXT stopPlaceRef instead of stopPointRef
        - stopPlaceName ## EXT stopPlaceName instead of stopPointName
        - serviceArrival
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/PlaceRef" ## EXT stopPlaceRef instead of stopPointRef
        stopPlaceName:
          type: string
          example: Luzern
        plannedStopPointName:
          description: >-
            Name of the bay/quay/terminal where to board/alight from the vehicle. According to 
            planned timetable.
          type: string
          example: "3"
        estimatedStopPointName:
          description: >-
            Name of the bay/quay/terminal where to board the vehicle. As to the latest realtime status.
          type: string
          example: "8"
        serviceArrival: # EXT directly inline service time
          description: >-
            Describes the arrival situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"
        status:
          $ref: "#/components/schemas/StopCallStatus"

    LegAlightSpecification:
      type: object
      description: Minimal leg alight specification
      required:
        - placeInput ## EXT stopPlaceRef instead of stopPointRef
        - serviceArrival
      properties:
        stopPlaceInput:
          $ref: "#/components/schemas/PlaceInput" ## EXT stopPlaceRef instead of stopPointRef
        serviceArrival:
          description: >-
            Describes the arrival situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"

    ServiceTime: ## OJP
      type: object
      description: >-
        Contains at least scheduled time, but can contain real time and estimated times. Provided by OJP.
      required:
        - timetabledTime
      properties:
        timetabledTime:
          type: string
          format: date-time
        estimatedTime:
          type: string
          format: date-time
        observedTime:
          type: string
          format: date-time

    DatedJourney: ## OJP # Reduced scope
      type: object
      description: >-
        Vehicle journey that runs at a specific date. Provided by OJP.
      required:
        # - operatingDayRef
        # - journeyRef
        # - mode
        # - publishedServiceName # EXT
        # - privateMode # EXT
        - operators # EXT replaces operatorRefs
        # - originText
        # - destinationText
      properties:
        operatingDayRef:
          $ref: "#/components/schemas/OperationDayRef"
        # journeyRef:  # Out of scope
        #   $ref: "#/components/schemas/JourneyRef"
        mode:
          $ref: "#/components/schemas/Mode"
        productCategory:
          $ref: "#/components/schemas/ProductCategory"
        publishedServiceName:
          description: >-
            Line name or service description as known to the public, f.e. "512", "S8"
            or "Circle Line" or "ICE 488".
          type: string
          example: S1
        vehicleNumbers: # EXT Fix to OJP submitted, see https://github.com/VDVde/OJP/issues/173
          type: array
          items:
            $ref: "#/components/schemas/VehicleNumber"
        lineNumbers:
          type: array
          items:
            $ref: "#/components/schemas/LineNumber"
        operators:
          description: >-
            Reference to transport operators including their textual representation.
            For UIC see: https://unioninternationalcheminsdefer.github.io/OSDM/spec/catalog-of-code-lists/
            As a leg can be operated by more than operator we model it as an array here.
          type: array
          items:
            $ref: "#/components/schemas/NamedCompany"
        serviceStatus:
          $ref: "#/components/schemas/ServiceStatus"
        situationFullRefs:
          type: array
          items:
            $ref: "#/components/schemas/SituationFullRef"

    Mode: ## OJP
      type: object
      description: >-
        A method of transportation such as bus, rail, etc. Provided by OJP.
      required:
        - ptMode
      properties:
        ptMode: # EXT
          description: >-
            TAP-TSI/UIC contains a sensible subset of SIRI Transport Modes.
          type: string
          x-extensible-enum:
            - HIGH_SPEED_TRAIN
            - HISTORIC_TRAIN
            - INTERCITY
            - REGIONAL
            - INTERREGIONAL
            - URBAN
            - TRAM
            - UNDERGROUND
            - NIGHT_TRAIN
            - SHARED_TAXI
            - MOTOR_RAIL
            - MOUNTAIN_TRAIN
            - PLANE
            - COACH_GROUP
            - SHIP
            - BUS
        name:
          description: Name of the mode
          type: string
          example: rail
        shortName:
          description: Short name or acronym of the mode
          type: string
          example: S
        description:
          description: Additional text that further describes the mode
          type: string

    ProductCategory: ## OJP
      type: object
      description: >-
        Product category based on NeTEx/SIRI. A product category is a classification for vehicle journeys
        to express some common properties of journeys for marketing and fare products. Provided by OJP.
      required:
        - name
        - shortName
        - productCategoryRef
      properties:
        name:
          description: >-
            Full name of this product category, e.g. "TGV Lyria" in Switzerland and France.
            UIC: Long name of Service Brand
          type: string
          example: TGV Lyria
        shortName:
          description: >-
            Short name or acronym of the product category, likely to be published, e.g. "TGV"
            UIC: Abbreviation of Service Brand
          type: string
          example: TGV
        productCategoryRef:
          $ref: "#/components/schemas/ProductCategoryRef"

    ServiceStatus:
      type: object
      description: >-
        Parameters which describe the current status of a dated vehicle journey.
        Provided by OJP.
      properties:
        unplanned:
          type: boolean
          description: Whether this trip is an additional one that has not been planned.
          default: false
        cancelled:
          type: boolean
          description: Whether this trip is cancelled and will not be run.
          default: false
        deviation:
          type: boolean
          description: Whether this trip deviates from the planned service pattern.
          default: false
        occupancy:
          type: string
          description: >-
            Passenger load status on vehicle. If omitted, not known. 
            Equivalent to siri:OccupancyEnumeration which describes three values: 
            "full", "seatingAvailable" and "standingAvailable".
    Place: ## OJP # Reduced scope
      type: object
      description: >-
        A geographic place of any type which may be specified as the origin or destination of a trip. Provided by OJP.
      # allOf:
      #- oneOf:
      #  - $ref: "#/components/schemas/AddressStructure"
      #  - $ref: "#/components/schemas/PointOfInterest"
      #  - $ref: "#/components/schemas/StopPlace"
      #  - $ref: "#/components/schemas/StopPointStructure"  # Out of scope
      #  - $ref: "#/components/schemas/TopographicPlaceStructure"  # Out of scope
      #  - $ref: "#/components/schemas/FareConnectionPoint # EXT OSDM extension
      #- $ref: "#/components/schemas/GeoPosition"
      required:
        - id
        # - name  ## EXT
        # - geoPosition  ## EXT
      properties:
        id:
          type: string
          description: >-
            id  defining the place. The code is provided as URN, relative URNs are allowed with base path urn:uic:stn "0850000"
          example: "urn:uic:stn:8500000"
        name:
          type: string
          example: Zürich HB
        address:
          $ref: "#/components/schemas/Address"
        pointOfInterest:
          $ref: "#/components/schemas/PointOfInterest"
        stopPlace:
          $ref: "#/components/schemas/StopPlace"
        # stopPoint:
        #  - $ref: "#/components/schemas/StopPointStructure"  # Out of scope
        # topographicPlace:
        #  - $ref: "#/components/schemas/TopographicPlaceStructure"  # Out of scope
        fareConnectionPoint: # EXT OSDM extension for virtual border points
          $ref: "#/components/schemas/FareConnectionPoint"
        geoPosition:
          $ref: "#/components/schemas/GeoPosition"
        _links:
          $ref: "#/components/schemas/Link"

    Address: ## OJP # Reduced scope
      type: object
      description: >-
        A descriptive data associated with a place that can be used to describe the unique geographical context of a
        place for the purposes of identifying it. may be refined as either a road address, a postal address or both.
        Provided by OJP.
      # allOf:
      required:
        - code # EXT code instead of addressCode, see https://github.com/VDVde/OJP/issues/183
        - name # EXT name instead of addressName, see https://github.com/VDVde/OJP/issues/183
      properties:
        code:
          description: id of the address
          type: string
          example: NL:1916200000022621
        # privateCode:  # Out of scope
        #   description: Code of this address in private/foreign/proprietary coding schemes.
        #   $ref: "#/components/schemas/PrivateCode"
        name:
          description: Name or description of address for use in passenger information.
          type: string
          example: Oude Trambaan 7, 2265CA Leidschendam, Nederland
        # nameSuffix:  # Out of scope
        #   description: House number of the address. If none is given, either a crossing street can be given, or the whole street is meant.
        #   type: string
        # - $ref: "#/components/schemas/AddressDetail"
        countryName:
          description: Country of the address.
          type: string
          example: The Netherlands
        countryCode:
          $ref: "#/components/schemas/CountryCode"
        postCode:
          description: Postal code of the address.
          type: string
          example: 2265CA
        city: # EXT
          description: City name
          type: string
          example: Leidschendam
        topographicPlaceName:
          description: >-
            TopographicPlace name of the address. If set it should at least contain the city name.
          type: string
          example: Leidschendam
        # topographicPlaceRef:  # Out of scope
        #   description: If at least one is set, only place objects within the given localities are allowed.If at least one is set, only place objects within the given localities are allowed.Reference to a TopographicPlace
        #   $ref: "#/components/schemas/TopographicPlaceRef"
        street:
          description: Street name of the address.
          type: string
          example: Oude Trambaan
        houseNumber:
          description: House number of the address. If none is given, either a crossing street can be given, or the whole street is meant.
          type: string
          example: 7
        # crossRoad:  # Out of scope
        #   description: Crossing. This can be used to be more specific without using house numbers.
        #   type: string

    CountryCode:
      type: string
      description: ISO country code (2 alpha), relative URNs with base urn:iso:std:iso:3166 are recommended
      example: DE

    PointOfInterest: ## OJP # Reduced scope
      type: object
      description: >-
        A type of place to or through which passengers may wish to navigate as part of
        their journey and which is modelled in detail by journey planners. Provided by OJP.
      required:
        - code # EXT code instead of pointOfInterestCode, see https://github.com/VDVde/OJP/issues/183
        - name # EXT name instead of pointOfInterestName, see https://github.com/VDVde/OJP/issues/183
      properties:
        code:
          description: id of the Point of Interest.
          type: string
        name:
          description: Name or description of point of interest for use in passenger information.
          type: string
          example: Park Rozenrust
        # nameSuffix:  # Out of scope
        #   description: >-
        #     Additional description of the point of interest that may be appended to the name if enough space
        #     is available. F.e. "Exhibition Center".
        #   type: string
        # pointOfInterestCategory:  # Out of scope
        #   description: Categories this POI is associated with. Order indicates descending relevance.
        #   $ref: "#/components/schemas/PointOfInterestCategory"
        # privateCode:  # Out of scope
        #   description: Code of this address in private/foreign/proprietary coding schemes.
        #   $ref: "#/components/schemas/PrivateCode"
        # topographicPlaceRef:  # Out of scope
        #   description: >-
        #     If at least one is set, only place objects within the given localities are allowed. If at least one is set,
        #     only place objects within the given localities are allowed. Reference to a TopographicPlace.
        #   $ref: "#/components/schemas/TopographicPlaceRef"

    PointOfInterestCategory: ## OJP
      type: object
      description: >-
        A categorisation of points of interest in respect of the activities undertaken at them 
        (defined by key-value-pairs). Provided by OJP.
      # oneOf:
      #  required:
      #   - pointOfInterestClassification  #EXT no longer mandatory
      properties:
        osmTags:
          description: Open Street Map tag structure (key-value)
          type: array
          items:
            $ref: "#/components/schemas/OsmTag"
        #    required:
        #      - osmTag
        #  - type: object
        #    properties:
        pointOfInterestClassifications:
          description: >-
            Classification of the POI (when it is not from OSM). The codification of the 
            classification Id may include de codification source (for example 
            "IGN:[classificationCode]")
          type: array
          items:
            type: string

    OsmTag: ## OJP
      type: object
      description: >-
        Structure of an Open Street Map tag. Provided by OJP.
      properties:
        tag:
          type: string
          description: Name of Open Street Map tag (amenity, leisure, tourism, bike, ...)
          example: name
        value:
          type: string
          description: Value for Open Street Map tag (charging_station, hostel, yes, ...)
          example: Rozenrust
      required:
        - tag
        - value

    StopPlace: ## OJP # Reduced scope
      type: object
      description: >-
        A place extended by accessibility limitation properties and some attributes of the associated equipment, 
        comprising one or more places where vehicles may stop and where passengers may board or leave vehicles 
        or prepare their trip, and which will usually have one or more wellknown names. Provided by OJP.
      #allOf:
      required:
        - ref # EXT ref instead of stopPlaceRef
        - name # EXT name instead of stopPlaceName
      properties:
        ref:
          description: Reference to a Stop Place
          $ref: "#/components/schemas/PlaceRef"
        name:
          description: Name of this stop place for use in passenger information.
          type: string
          example: Zürich HB
        # nameSuffix:  # Out of scope
        #   description: Additional description of the stop place that may be appended to the name if enough space is available.
        #   type: string
        #   example: Exhibition Center
        # privateCode:  # Out of scope
        #   description: Code of this stop place in private/foreign/proprietary coding schemes.
        #   $ref: "#/components/schemas/PrivateCode"
        # topographicPlaceRef:  # Out of scope
        #   description: If at least one is set, only place objects within the given localities are allowed.If at least one is set, only place objects within the given localities are allowed.Reference to a TopographicPlace
        #   $ref: "#/components/schemas/TopographicPlaceRef"
        # - $ref: "#/components/schemas/StopAttributes" # Out of scope

    PlaceInput:
      type: object
      description: structure used to specify places in requests
      properties:
        placeInput:
          type: string
          example: "urn:uic:stn:8500000"
        geoPosition:
          $ref: "#/components/schemas/GeoPosition"
    
    PlaceRef: ### OJP
      type: object
      properties:
        placeRef:
          $ref: "#/components/schemas/Link"
        geoPosition:
          $ref: "#/components/schemas/GeoPosition"
        
    ProductCategoryRef: ## OJP
      description: >-
        Reference to a product category. Product categories should be defined once and used
        uniformly in all channels (e.g. NeTEx, SIRI, OJP). Provided by OJP.
      type: string
      example:
        - "urn:uic:sbc:76"
        - "urn:uic:sbc:43"

    OperationDayRef: ## OJP
      type: string
      description: Reference to an operating day. Provided by OJP.
      example: "OperatingDay:12345"

    JourneyRef: ## OJP
      type: string
      description: Reference to a journey. Provided by OJP.
      example: "ServiceJourney:1"

    SituationFullRef: ## OJP
      type: string
      description: >-
        Reference to situation message. Message details might be found in response 
        context or through other communication channels. Provided by OJP.
    VehicleNumber:
      type: string
      description: >-
        The vehicle number(s) of the vehicle that runs this timed leg. On some legs a vehicle can
        have multiple vehicle numbers, e.g. if it is split into two trains at a intermediate stop.
        E.g. the vehicle numbers of "TGV 9218", "TH 9340" or "ICE 15".
        For backwards compatibility with Hermes/Hosa the length of the string must be restricted
        to 5 characters. If's longer, it is not possible to use the H2O converter.
      example:
        - "9218"
        - "9340"
        - "15"

    LineNumber:
      type: string
      description: >-
        Especially on regional traffic, a vehicle is defined by a line number. 
        E.g. the line numbers of "S 52" or "B 19".
      example:
        - "52"
        - "19"

    OfferSearchCriteria:
      type: object
      properties:
        freeText:
          type: string
          description: >-
            Allows the API consumer to provide a free-text based search. Usage of the provided
            text in the search process is left to the OSDM provider but should be documented.
        flexibilities:
          description: >-
            Defines the flexibility levels desired of the fares returned.
            This refers to the after sales flexibility levels as defined in IRS-90918-10
          type: array
          items:
            $ref: "#/components/schemas/Flexibility"
        comfortClasses:
          type: array
          items:
            $ref: "#/components/schemas/ComfortClass"
          description: >-
            The classes returned might be different from the requested classes.
        serviceClassTypes:
          type: array
          items:
            $ref: "#/components/schemas/ServiceClassType"
          description: >-
            The classes returned might be different from the requested classes.
          maxItems: 4
        requestedOfferParts:
          type: array
          items:
            $ref: "#/components/schemas/OfferPartType"
        regulatoryConditions:
          type: array
          items:
            $ref: "#/components/schemas/RegulatoryConditions"
        currency:
          $ref: "#/components/schemas/Currency"
          description: The currency returned might be different from the one requested.

    OfferPartType:
      type: string
      description: >-
        Allows to request offerparts of a certain type. 
        To support H/H use ["RESERVATION", "ANCILLARY"].
        Default is to get search for offers of all types.
      enum:
        - ADMISSION
        - RESERVATION
        - ANCILLARY
        - FARE_ADMISSION
        - FARE_RESERVATION
        - FARE_ANCILLARY
        - ALL

    TripOfferRequest:
      type: object
      description: >-
        Defines the parameters needed to request an offer. Either a tripSearchCriteria
        or a list of trip specifications can be passed in to request trip offer.
        If you are searching for fares you pass in the complete trip and the use the 
        returnSearchCriteria to define which part you need fares (including virtual 
        border points).
      properties:
        tripSpecifications:
          type: array
          items:
            $ref: "#/components/schemas/TripSpecification"
        tripSearchCriteria:
          $ref: "#/components/schemas/TripSearchCriteria"
        returnSearchParameters:
          type: object
          description: >-
            This property can be used in case a return trip is being requested. 
            This will allow to benefit from return-specific fares or product
          properties:
            inwardReturnDate:
              type: string
              format: date-time
              description: >-
                Needs to be provided when creating the collection of outward travels so that the
                provider knows when a return travel can be expected and propose appropriate
                product and fares.
            outwardTripOfferCollectionId:
              type: string
              description: >-
                Needs to be provided when creating the collection of inward travels so that the provider
                can relate the inward travels to the outward travels context.
            outwardOfferTag:
              type: string
              description: >-
                Needs to be provided when creating the collection of inward travels so that the provider
                knows what the outward offer is and and propose compatible offers only if desired or mandatory.
        requestedFulfillmentOptions:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentOption"
        passengerSpecifications:
          type: array
          items:
            $ref: "#/components/schemas/PassengerSpecification"
        promotionCodes:
          type: array
          items:
            $ref: "#/components/schemas/PromotionCode"
        corporateCodes:
          type: array
          items:
            $ref: "#/components/schemas/CorporateCode"
        offerSearchCriteria:
          $ref: "#/components/schemas/OfferSearchCriteria"
        embed:
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          type: array
          items:
            type: string
            enum:
              - ALL
              - TRIPOFFERS
              - TRIPOFFERS.TRIP
              - TRIPOFFERS.OFFERS
              - TRIPOFFERS.OFFERS.OFFERPARTS
              - TRIPOFFERS.PASSENGERS
              - NONE
          default: [ALL]
          maxItems: 5

    TripOffersCollectionResponse:
      type: object
      required:
        - id
        - tripOffers
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        id:
          type: string
        tripOffers:
          type: array
          items:
            $ref: "#/components/schemas/TripOffer"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    TripOfferResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        tripOffer:
          $ref: "#/components/schemas/TripOffer"

    TripOffer:
      type: object
      required:
        - id
        - trip
        - offers
        - passengers
      properties:
        id:
          type: string
        summary:
          type: string
          description: A human-readable description of the trip offer.
          example: Trip offer for Bruxelles-Midi 2022-07-01 10:05 CET, 44 €, full flexible
        trip:
          $ref: "#/components/schemas/Trip"
        offers:
          type: array
          description: >-
            Non trip offers like day passes can be returned as up- or cross-selling items
            to trip offers.
          items:
            discriminator:
              propertyName: offerType
            oneOf:
              - $ref: "#/components/schemas/Offer"
              - $ref: "#/components/schemas/NonTripOffer"
          minItems: 1
        passengers:
          type: array
          items:
            $ref: "#/components/schemas/Passenger"
          minItems: 1
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    RequestedInformation:
      type: string
      description: >-
        Boolean-expression indicating the data that must be set in the data
        model in order to proceed to next step of the process.
    OfferSummary:
      type: object
      required:
        - minimalPrice
        - overallServiceClass
        - overallFlexibility
      description: >-
        The offer summary indicates the most relevant service class, level, flexibility or accommodation 
        that describe this offer, but this does not imply that these values exactly apply to all parts of
        the offer. 
        Let's consider, as a simplified example, a trip composed of two legs, one with both 1st and 
        2nd class, and one with only 2nd. 
        On this trip, the railway is expected to propose one offer with overallServiceClass FIRST composed 
        of one admission in 1st class on the first legs and one admission in 2nd class on the second one, 
        plus a second offer with overallServiceClass SECOND composed of two second class admissions.
        Likewise for all 'overall' attributes. The purpose of these attributes is to convey to the client
        system the service class, level, flexibility and accommodation that best represent this offer so to
        facilitate presentation to the final user.
      properties:
        minimalPrice:
          $ref: "#/components/schemas/Price"
        overallServiceClass:
          $ref: "#/components/schemas/ServiceClass"
        overallComfortClass:
          $ref: "#/components/schemas/ComfortClass"
        overallAccommodationType:
          $ref: "#/components/schemas/AccommodationType"
        overallAccommodationSubType:
          $ref: "#/components/schemas/AccommodationSubType"
        overallFlexibility:
          $ref: "#/components/schemas/Flexibility"

    OfferResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        offer:
          oneOf:
            - $ref: "#/components/schemas/Offer"
            - $ref: "#/components/schemas/NonTripOffer"

    Offer:
      description: >-
        An offer for a given leg or trip.
      type: object
      required:
        - id
        - offerType
      properties:
        id:
          type: string
        offerType:
          type: string
          enum:
            - Offer
        summary:
          type: string
          description: A human-readable description of the Offer.
          example: Bruxelles-Midi - Paris-Nord 2022-07-01 10:05 CET, Normal Fare, 50 €
        offerSummary:
          $ref: "#/components/schemas/OfferSummary"
        priceGuaranteedUntil:
          type: string
          format: date-time
          description: >-
            Indicates until when the price for the given offer is guaranteed.
        isReusable:
          type: boolean
          default: false
          description: >-
            Indicates whether the offerId can be used in more than one booking.
        offerTag:
          type: object
          description: >-
            The offerTag can/must (depending on the mandatory flag) be used in some cases to restrict the 
            set of offers returned in a subsequent and related offer search to only compatible ones.
            Note the offerTag does not need to be unique.
          properties:
            id:
              type: string
            isMandatory:
              type: boolean
              default: false
        coveredLegIds:
          type: array
          items:
            type: string
          description: >-
            Indicate which legs are covered by the specific offer. Not used for fares.
        returnTags:
          type: array
          items:
            type: string
          description: >-
            List of tags (and their type) that allow identifying sets of compatible offers when booking a return trip
            involving return-specific fares. All returnTags must be present in the counterpart offer to allow combination
            If no tag is provided, there is no return constraint on this specific offer.
        tripTags:
          type: array
          items:
            type: string
          description: >-
            List of tags (and their type) that allow identifying sets of compatible offers when trying to combine multiple offers covering one single trip. 
            At least one (not all) tripTags must be in common to allow combination
            If no tag is provided, there is no trip constraint on this specific offer.
        appliedThroughTicketTags:
          type: array
          items:
            type: string
          description: >-
            the list of all through ticket tags that were effectively used in building or booking the offer.
            Cross-checking this list with the products, the actual groupings applied can be identified.
        requestedInformation:
          $ref: "#/components/schemas/RequestedInformation"
        availableFulfillmentTypes:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentType"
        trip:
          $ref: "#/components/schemas/Trip"
          description: >-
            This trip will be included in the offer if the offer is part of the booking.
        validFrom:
          type: string
          format: date-time
          description: >-
            Defines the minimum validity period of the trip booked, meaning the period 
            during which it will be possible to travel with the fulfillments for this offer.
        validUntil:
          type: string
          format: date-time
          description: >-
            Defines the minimum validity period of the trip booked, meaning the period 
            during which it will be possible to travel with the fulfillments for this offer.
        admissions:
          type: array
          items:
            $ref: "#/components/schemas/Admission"
        reservations:
          type: array
          items:
            $ref: "#/components/schemas/Reservation"
        ancillaries:
          type: array
          items:
            $ref: "#/components/schemas/Ancillary"
        fees:
          type: array
          items:
            $ref: "#/components/schemas/Fee"
        fares:
          type: array
          items:
            $ref: "#/components/schemas/FareOnline"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    BookedOffer:
      description: >-
        The attribute 'offerSummary' is meaningful at trip-offer-collection response time only.
      type: object
      properties:
        id:
          type: string
        summary:
          type: string
          description: A human-readable description of the booked offer.
          example: Bruxelles-Midi - Paris-Nord 2022-07-01 10:05 CET, Normal Fare, 50 €
        coveredLegIds:
          type: array
          items:
            type: string
          description: >-
            Indicate which legs are covered by the specific offer. Not used for fares.
        appliedThroughTicketTags:
          type: array
          items:
            type: string
          description: >-
            All through ticket tags that were effectively used in building or booking the offer.
            Cross-checking this list with the products, the actual groupings applied can be identified.
        trip:
          $ref: "#/components/schemas/Trip"
          description: >-
            This trip will be included in the offer if the offer is part of the booking.
        admissions:
          type: array
          items:
            $ref: "#/components/schemas/Admission"
        reservations:
          type: array
          items:
            $ref: "#/components/schemas/Reservation"
        ancillaries:
          type: array
          items:
            $ref: "#/components/schemas/Ancillary"
        fees:
          type: array
          items:
            $ref: "#/components/schemas/Fee"
        fares:
          type: array
          items:
            $ref: "#/components/schemas/FareOnline"
      required:
        - id

    ComfortClass:
      description: >-
        Generic class classification, mostly used to harmonize choice and
        representation across multiple carriers.
      type: string
      x-extensible-enum:
        - FIRST
        - SECOND
    Flexibility:
      type: string
      x-extensible-enum:
        - FULL_FLEXIBLE
        - SEMI_FLEXIBLE
        - NON_FLEXIBLE

    CommonOfferPartAttributes:
      type: object
      properties:
        price:
          $ref: "#/components/schemas/Price"
        pricingMode:
          type: string
          enum:
            - COLLECTIVE
            - INDIVIDUAL
          default: INDIVIDUAL
        appliedReductions:
          type: array
          items:
            $ref: "#/components/schemas/CardReference"
        appliedPromotionCodes:
          type: array
          items:
            $ref: "#/components/schemas/PromotionCode"
        appliedCoporateCodes:
          type: array
          items:
            $ref: "#/components/schemas/CorporateCode"
        passengerIds:
          type: array
          items:
            description: Id of the passenger
            type: string
        providerBookingReference:
          type: string
          description: >-
            The booking reference of the booking the offer part is in on the provider side.
        finalProviderBookingReference:
          type: string
          description: >-
            The booking reference of the order the offer part is in on the final provider 
            side = the provider actually hosting or allocating  the product.
        availableFulfillmentOptions:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentOption"
        validFrom:
          type: string
          format: date-time
          description: Validity of offer towards passenger
        validUntil:
          type: string
          format: date-time
          description: Validity of offer towards passenger
        numericAvailability:
          type: integer
          format: int32
          description: >-
            If supported by the allocator system, this returns the number of remaining available
            offerparts, i.e. admissions, reservation or ancillaries.
        refundable:
          type: string
          description: >-
            If set to YES the offerpart is refundable without a fee before the day of departure.
            NO when not refundable or refundable with 100% fee, WITH_CONDITIONS in all other cases.
          enum:
            - YES
            - NO
            - WITH_CONDITIONS
        exchangeable:
          type: string
          description: >-
            If set to YES the offerpart is exchangeable without a fee before the day of departure. 
            NO when not exchangeable or exchangeable with 100% fee, WITH_CONDITIONS in all other cases.
          enum:
            - YES
            - NO
        afterSaleConditions:
          type: array
          description: Fine grained specification of the after sale condition of the booking.
          items:
            $ref: "#/components/schemas/AfterSaleCondition"
        products:
          type: array
          description: >-
            In offer mode, in almost all cases exactly one product is referenced. Only on some French
            trips consisting of a TGV and a TER two products need to be used.
            In fare mode, no product exists as first needs to created from the different fares.
          items:
            type: object
            properties:
              product:
                $ref: "#/components/schemas/Product"
              legIds:
                description: indices of the legs in the trip given by the provider of the offer
                type: array
                items:
                  type: string
      required:
        - price
        - validFrom
        - refundable
        - exchangeable

    AfterSaleCondition:
      type: object
      properties:
        condition:
          $ref: "#/components/schemas/AfterSaleConditionType"
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        afterSaleFee:
          $ref: "#/components/schemas/Price"

    AfterSaleConditionType:
      type: string
      x-extensible-enum:
        - PLACE_CHANGE
        - EXCHANGE
        - REFUND

    ProductCollectionResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        products:
          type: array
          description: The list of all products available to the caller.
          items:
            $ref: "#/components/schemas/Product"

    ProductResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        product:
          $ref: "#/components/schemas/Product"

    Product:
      type: object
      description: >-
        Structured description of the product, its name, comfort and sales / after-sales conditions
      required:
        - id
        - code
      properties:
        id:
          type: string
          description: id of the product
        summary:
          type: string
          description: A human-readable description of the product.
          example: TGV Lyria Loisir 2
        code:
          type: string
          description: >-
            The product code expressed in the provider system (could be a
            mapping from an even lower-level provider).
          example: PT00AD
        description:
          type: string
          description: Textual description of the product.
          example: Loisir Non-flex Adult Fare
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
          description: >-
            Structured description of the sales or after-sales conditions.
        serviceClass:
          $ref: "#/components/schemas/ServiceClass"
        comfortClass:
          $ref: "#/components/schemas/ComfortClass"
        isTrainBound:
          type: boolean
          default: false
        isReturnProduct:
          type: boolean
          default: false
        fulfillmentOptions:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentOption"
        serviceConstraintText:
          type: string
        carrierConstraintText:
          type: string
        tariff:
          type: string
          description: >-
            Mapping to Tariff 42 of IRS-90918-3 (Hermes/Hosa). Helps the H2O converter in mapping
            offers to a requested tariff. See legacyReservationParameter.tariff in OSDM offline.
        throughTicketTags:
          type: array
          items:
            type: string
          description: >-
            List of tags (and their type) that allow identifying sets of offers for which related 
            contracts can be grouped into one through ticket.
        combinationTags:
          type: array
          items:
            $ref: "#/components/schemas/CombinationTag"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    CombinationTag:
      type: object
      description: >-
        Tag to indicate that some products from a provider can be sold only when in conjunction
        with product(s) from another provider using the same tag. At least one, not all, 
        combinationTags must be in common to allow combination. No combinationTags indicate 
        that there are no combination constraints on the product.
      properties:
        id:
          type: string
        needsToBeCombined:
          description: >-
            If false it means that this product can be sold also when not in conjunction with
            a product with the same tag. This is needed to propose specific products from one 
            provider that depend on public ones of another.
          type: boolean
          default: false

    FulfillmentMediaType:
      type: string
      description: >-
        Fulfillment types. RCT2, RCCST and UIC_PDF are official UIC standards.
      x-extensible-enum:
        - RCT2
        - RCCST
        - UIC_PDF
        - PDF_A4
        - PKPASS
        - TICKETLESS

    Admission:
      type: object
      description:
        An admission represents a travel right, or the entitlement to travel onboard a train between
        the given origin and destination, following the given route. It does not include a seat reservation.
      required:
        - id
        - commonOfferPartAttributes
      properties:
        id:
          type: string
        commonOfferPartAttributes:
          $ref: "#/components/schemas/CommonOfferPartAttributes"
        isReservationRequired:
          type: boolean
        reservations:
          type: array
          items:
            $ref: "#/components/schemas/OfferPartReference"
        ancillaries:
          type: array
          items:
            type: object
            properties:
              relationType:
                type: string
                enum:
                  - OPTIONAL
                  - INCLUDED
              ancillary:
                $ref: "#/components/schemas/OfferPartReference"
        fees:
          type: array
          items:
            $ref: "#/components/schemas/OfferPartReference"

    SelectedPlaces:
      type: object
      description: >-
        place selection options and selected options in an offer
        - reference place for adjacent reservation
        - selected optional place options
        - selected places from a graphical place selection (coach and places)
      properties:
        referencePlace:
          type: object
          description: reference place for an adjacent reservation
          properties:
            placeNumber:
              type: string
            coachNumber:
              type: string
        options:
          type: array
          items:
            $ref: "#/components/schemas/SelectedOption"
        coaches:
          description: selected coach and places for graphical reservation
          type: array
          items:
            $ref: "#/components/schemas/SelectedCoach"

    Reservation:
      type: object
      description: >-
        Reservation includes the reference to the in the initial offer. 
        The offer needs to be updated with the selected places before the confirmation
        which creates the reservation details including the reserved places.
      required:
        - id
        - commonOfferPartAttributes
        - reservationDetail
      properties:
        id:
          type: string
        commonOfferPartAttributes:
          $ref: "#/components/schemas/CommonOfferPartAttributes"
        reservationDetail:
          $ref: "#/components/schemas/ReservationDetail"
        placeSelection:
          $ref: "#/components/schemas/SelectedPlaceOption"
        optionality:
          description: >-
            INCLUDED: the reservation is included in the offer
            MANDATORY: the reservation is mandatory for the booking
            OPTIONAL: the reservation is not included but can be added optionally
          type: string
          enum:
            - INCLUDED
            - MANDATORY
            - OPTIONAL
        ancillaries:
          type: array
          items:
            type: object
            properties:
              relationType:
                type: string
                enum:
                  - OPTIONAL
                  - INCLUDED
              ancillary:
                $ref: "#/components/schemas/OfferPartReference"
        fees:
          type: array
          items:
            $ref: "#/components/schemas/OfferPartReference"

    Ancillary:
      type: object
      required:
        - id
        - commonOfferPartAttributes
      properties:
        id:
          type: string
        commonOfferPartAttributes:
          $ref: "#/components/schemas/CommonOfferPartAttributes"
        optionality:
          description: >-
            INCLUDED: the ancillary is included in the offer but is not mandatory 
            OPTIONAL: the ancillary is not included but can be optionally added
          type: string
          enum:
            - INCLUDED
            - OPTIONAL
        category:
          type: string
        fees:
          type: array
          items:
            $ref: "#/components/schemas/OfferPartReference"

    Fee:
      type: object
      required:
        - id
        - price
      properties:
        id:
          type: string
        summary:
          type: string
          description: A human-readable description of the fee.
          example: Reservierungsentgelt, 5 €
        price:
          $ref: "#/components/schemas/Price"
        applicability:
          type: string
          x-extensible-enum:
            - BOOKING
            - TRIP
            - OFFERPART
        providerBookingReference:
          type: string
          description: >-
            The booking reference of the booking the offer part is in on the provider side.
        refundable:
          type: string
          enum:
            - YES
            - NO
            - WITH_CONDITIONS
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
          description: >-
            Structured description of the sales or after-sales conditions.
        productCode:
          type: string
          description: >-
            The product code expressed in the provider system (could be a
            mapping from an even lower-level provider).
          example: Reservierungsentgelt

    PromotionCode:
      type: object
      required:
        - code
        - issuer
      description: >-
        The promotion code is a token that reduces the price at POST booking time OR
        Token that reduces the price at POST trip-offer-collection time OR
        Token to receive offers that are not available without it.
      properties:
        code:
          description: >-
            The code issued by the issuer
          type: string
          example: SPRING_DISCOUNT
        issuer:
          description: >-
            The party that issues the promotion code, in case of a railway it's its RICS code
          type: string

    CorporateCode:
      type: object
      description: >-
        The corporate code is a token that reduces the price that reduces the price at POST trip-offer-collection time OR
        trip-offer-request or Token to receive offers that are not available without it, associated with an agreement
        between allocator/carrier and a corporate client
      required:
        - code
        - issuer
      properties:
        code:
          description: >-
            The code issued by the referenced company
          type: string
          example: 123456
        issuer:
          $ref: "#/components/schemas/Company"
        beneficiary:
          description: >-
            The name of the party that benefits from the corporate code, intended to be used to present to the end user
          type: string
          example: Siemens

    OfferPartReference:
      type: object
      description: >-
        References all the offer part elements in an uniform format.
        In its part, an OfferPartReference can refer to reservation, admission, ancillary or fee.
      required:
        - id
      properties:
        id:
          type: string
        summary:
          type: string
          description: A human-readable description of the offer part reference.
          example: ICE Wifi on Board of train ICE 3, 2022-07-11
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    BookingRequest:
      type: object
      required:
        - offers
      properties:
        purchaser:
          $ref: "#/components/schemas/PurchaserSpecification"
        offers:
          type: array
          items:
            $ref: "#/components/schemas/OfferSelection"
          description: >-
            The list of offers that need to be provisionally booked, with possibly the reservations and ancillaries associated that should be booked as well.
        promotionCodes:
          type: array
          items:
            $ref: "#/components/schemas/PromotionCode"
        embed:
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          type: array
          items:
            type: string
            enum:
              - ALL
              - BOOKEDOFFERS
              - BOOKEDOFFERS.TRIPS
              - BOOKEDOFFERS.OFFERPARTS
              - PASSENGERS
              - REFUND_PROPOSITIONS
              - NONE
          default: [ALL]
          maxItems: 6

    OfferSelection:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: id of the selected offer or exchangeOffer
        optionalReservationIds:
          type: array
          items:
            type: string
            description: >-
              If relevant, ids of the selected optional reservations.
        optionalAncillaryIds:
          type: array
          items:
            type: object
            properties:
              ancillaryId:
                type: string
                description: >-
                  If relevant, ids of the selected optional ancillaries.
              passengerIds:
                type: array
                items:
                  type: string
                  description: >-
                    Id of the passengers the selected optional ancillaries are for.
        passengers:
          type: array
          items:
            $ref: "#/components/schemas/Passenger"
          description: >-
            If needed (cf requiredInformation) or desired, this array allows providing the required details on some or all passengers
        placeSelections:
          type: object
          properties:
            reservationId:
              type: string
            placeSelection:
              $ref: "#/components/schemas/SelectedPlaceOption"
        afterSaleByDistributorOnly:
          description: >-
            in case the distributor has proposed this offer in conjunction with an offer of another provider constrained
            by a combinationTag, this flag must be set to true to indicate to the provider that after-sale must be done 
            on the totality of the distributor's booking. Only after-sale requests triggered by the distributor can be 
            safely processed on this offer. When the flag is not set, standard provider logic applies.
          type: boolean
          default: false
        throughTicketTag:
          description: >-
            in case the carriage contracts represented by this offer have been grouped with carriage contracts from other
            providers by the distributor. The same throughTicketTag that was used to perform the grouping can be specified here.
          type: string

    BookingResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        booking:
          $ref: "#/components/schemas/Booking"

    Booking:
      type: object
      required:
        - id
        - status
        - passengers
      properties:
        id:
          type: string
        summary:
          type: string
          description: A human-readable description of the booking.
          example: Booking 2345 for Clemens Gantert
        reference:
          type: string
          description: >-
            The unique booking reference in the provider system. Usually refers to an order number or PNR.
        status:
          $ref: "#/components/schemas/BookingStatus"
        provisionalPrice:
          $ref: "#/components/schemas/Price"
        confirmedPrice:
          $ref: "#/components/schemas/Price"
        requestedInformation:
          $ref: "#/components/schemas/RequestedInformation"
        ticketTimeLimit:
          type: string
          format: date-time
        fulfillmentType:
          $ref: "#/components/schemas/FulfillmentType"
        bookedOffers:
          type: array
          items:
            $ref: "#/components/schemas/BookedOffer"
        appliedPromoCodes:
          type: array
          items:
            $ref: "#/components/schemas/PromotionCode"
        purchaser:
          description: >-
            Some caller do want to provide information about the purchaser, thus this attribute 
            can not be made mandatory.
          $ref: "#/components/schemas/Purchaser"
        passengers:
          type: array
          items:
            $ref: "#/components/schemas/Passenger"
        fulfillments:
          type: array
          items:
            $ref: "#/components/schemas/Fulfillment"
        refundOffers:
          type: array
          items:
            $ref: "#/components/schemas/RefundOffer"
          description: >-
            Refund offers are created with the details of the to-be-confirmed refund operation. 
            One refund offer can then be confirmed, which turns it into a refund.
        exchangeOperations:
          type: array
          items:
            $ref: "#/components/schemas/ExchangeOperation"
        paymentMethods:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethod"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    BookingStatus:
      type: string
      enum:
        - PREBOOKED
        - CONFIRMED
        - FULFILLED
        - CANCELLED
        - REFUNDED
        - EXCHANGE_ONGOING
        - ERROR

    FulfillmentType:
      type: string
      x-extensible-enum:
        - ETICKET
        - CIT_PAPER
        - PASS_CHIP
        - PASS_REFERENCE

    BookingPatchRequest:
      type: object
      description: >-
        Allows setting the required fulfillment type, e.g. value paper
        or e-ticket and preferred fulfillment media. 
        The latter is optional and relevant in some cases only.
      properties:
        promotionCodes:
          type: array
          items:
            $ref: "#/components/schemas/PromotionCode"
        requestedFulfillmentType:
          $ref: "#/components/schemas/FulfillmentType"
        preferredFulfillmentMedia:
          $ref: "#/components/schemas/FulfillmentMediaType"
        exchangeOffers:
          type: array
          items:
            $ref: "#/components/schemas/OfferSelection"
        paymentMethods:
          description: >-
            Methods of payment used by the customer to the distributor. In case of voucher payment, 
            the amount of the voucher is not required in input.
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethod"

    FulfillmentOption:
      type: object
      description: >-
        CIT paper implies printing on value paper which is stock controlled.
      properties:
        type:
          $ref: "#/components/schemas/FulfillmentType"
        media:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentMediaType"

    FulfillmentsPatch:
      type: object
      description: >-
        Changes the fulfillment to status FULFILLED.
      properties:
        fulfillmentUpdates:
          type: array
          items:
            type: object
            properties:
              fulfilledFulfillmentId:
                type: string

    FulfillmentPatch:
      type: object
      description: >-
        an available fulfillment to status USABLE.
      properties:
        usage:
          $ref: "#/components/schemas/FulfillmentUsage"

    FulfillmentUsage:
      type: object
      description: >-
        change an available fulfillment by adding the parameters for the usage to status FULFILLED.
      properties:
        startOfUsage:
          type: string
          format: date-time
        travelDates:
          type: array
          items:
            type: string
            format: date
        fromPlace:
          $ref: "#/components/schemas/PlaceRef"
        selectedZoneIds:
          type: array
          items:
            type: string

    FulfillmentsResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        fulfillments:
          type: array
          items:
            $ref: "#/components/schemas/Fulfillment"

    FulfillmentResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        fulfillment:
          $ref: "#/components/schemas/Fulfillment"

    Fulfillment:
      type: object
      description: >-
        A fulfillment is a document (or part of a document in allocator mode) that
        - allows the passenger to prove its travel right
        - provides easier access to trains and stations
        - allows an exchange for other services (voucher)
        A fulfillment refers to services of one or multiple offer parts or a fare (allocator mode).
      required:
        - id
      properties:
        id:
          type: string
        summary:
          type: string
          description: A human-readable description of the fulfillment.
          example: e-ticket 12345
        status:
          $ref: "#/components/schemas/FulfillmentStatus"
        availableUsage:
          $ref: "#/components/schemas/AvailableFulfillmentUsage"
        controlNumber:
          type: string
          description: Ticket Control Number.
        offerParts:
          type: array
          items:
            $ref: "#/components/schemas/OfferPartReference"
        documents:
          description: Final document created for fulfillment.
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentDocument"
        fulfillmentItems:
          description: Fulfillment items to be integrated into tickets (allocator mode).
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentItem"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    AvailableFulfillmentUsage:
      description: >-
        parameters to be used to change the status of a fulfillment in status AVAILABLE to FULFILLED so it can be used by the passenger.
      type: object
      properties:
        travelValidityRanges:
          description: >-
            ranges for the start of validity to be used in a patch for available fufillments. (e.g. a 1 hour ticket not available during peak hours in the morning and afternoon)
          type: array
          items:
            type: object
            properties:
              from:
                type: string
                format: date-time
              until:
                type: string
                format: date-time
        travelDates:
          description: >-
            travel dates that can be selected. Note: date only is used to cover properly the case of passes including multiple time zones.
          type: array
          items:
            type: string
            format: date
        fromPlaceRequired:
          description: >-
            indication whether a starting place for the ticket must be provided.
          type: boolean
          default: false
        maxAvailableZones:
          description: >-
            upper limit to the numver of selected zones.
          type: integer
          format: int32
        availableZones:
          description: >-
            zones that can be selected for the fulfillment. Zone ids are defined in the context of a fare provider. TODO: add masterdata service on ZoneDefinition (ZoneDefinition is included in OSDM offline data)
          type: array
          items:
            type: object
            properties:
              provider:
                $ref: "#/components/schemas/Company"
              id:
                type: string
              name:
                type: string
            required:
              - provider
              - id

    FulfillmentStatus:
      description: >-
        Individual fulfillments of a multi journey booking need an separate patch to create the usable fulfilment in status FULFILLED before they are in an intermediate state AVAILABLE where they don't provide a document for travel. Fulfillments can be ON_HOLD in case they are booked but not yet available (e.g. a booking providing 2 journey per week) or passed in case the fulfillment was not patched for usage within the required time.
      type: string
      enum:
        - CONFIRMED
        - AVAILABLE
        - ON_HOLD
        - EXPIRED
        - FULFILLED
        - CHECKEDIN
        - REFUNDED

    FulfillmentDocument:
      type: object
      description: >-
        Document created for fulfillment. Either downloadLink + downloadExpiry or content + format must
        be provided.
      properties:
        medium:
          $ref: "#/components/schemas/FulfillmentMediaType"
        type:
          type: string
          x-extensible-enum:
            - BOOKING_RECEIPT
            - TICKET
            - BOARDING_PASS
            - INFORMATION
            - VOUCHER
        downloadLink:
          type: string
          format: uri
        downloadExpiry:
          type: string
          format: date-time
          description: >-
            Expiration time of the download link, the document will not be available at the given URI 
            after this time.
        content:
          type: string
          format: base64
          description: base64 encoded binary of the actual fulfillment document
        format:
          type: string
          example: "application/pdf"
          description: >-
            Physical format of the document provided in the content field in Mime-Type format, e.g. 
            application/pdf, image/jpeg, etc. Must be filled if the "content" field is present.
    FulfillmentItem:
      type: object
      description: >-
        Fulfillment items to be integrated in to tickets, 
        e.g. visual security elements, additional bar codes, control keys.
      properties:
        fulfillmentMedia:
          description: >-
            list of fulfillment media where this item applies
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentMediaType"
        passengerReference:
          description: reference to a passenger
          type: string
        controlId:
          type: string
        securityFeatures:
          description: "visual elements, bar codes"
          type: array
          items:
            type: object
            properties:
              type:
                $ref: "#/components/schemas/SecurityFeatureType"
              data:
                description: base 64 encoded data
                type: string
        securityFeatureLinks:
          type: array
          items:
            type: object
            properties:
              type:
                $ref: "#/components/schemas/SecurityFeatureType"
              uri:
                description: link to download the security feature
                type: string
                format: uri
        isMandatory:
          description: >-
            The use of the provided features is mandatory.
          type: boolean
          default: false
        securePaperOnly:
          description: >-
            The security feature must be used on secure paper.
          type: boolean
          default: false

    SecurityFeatureType:
      description: >-
        Defines type and format of the security feature.
      type: object
      properties:
        type:
          type: string
          enum:
            - VISUAL_ELEMENT
            - BAR_CODE
        format:
          type: string
          enum:
            - PNG
            - GIF
            - SVG

    RefundOffersCollectionResponse:
      type: object
      required:
        - id
        - refundOffers
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        id:
          type: string
        refundOffers:
          type: array
          items:
            $ref: "#/components/schemas/RefundOffer"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    RefundOffer:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: id of the refund offer
        summary:
          type: string
          description: A human-readable description of the refund offer.
          example: Refund Offer for Paris-Barcelona Andre Dupont 2022-07-23
        validUntil:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/RefundStatus"
        reimbursementStatus:
          description: >-
            If set to IMMEDIATE the distributor is allowed to return the 
            reimbursement amount immediately.
          type: string
          enum:
            - IMMEDIATE
            - DELAYED
          default: IMMEDIATE
        reimbursementDateTime:
          type: string
          format: date-time
        appliedOverruleCode:
          description: >-
            Reason for and type of an after sale, Code list in IRS 90918-10.
          type: string
        fulfillments:
          type: array
          items:
            $ref: "#/components/schemas/Fulfillment"
        refundFee:
          $ref: "#/components/schemas/Price"
        refundableAmount:
          $ref: "#/components/schemas/Price"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    RefundOfferRequest:
      type: object
      description: >-
        Request for a refund offer. 
        Fulfillments can be provided in case the booking contains multiple individual fulfillments.
      required:
        - fulfillmentIds
      properties:
        fulfillmentIds:
          type: array
          items:
            type: string
            description: id of the fulfillment to refund
        overruleCode:
          $ref: "#/components/schemas/OverruleCode"
        refundDate:
          type: string
          format: date-time
          description: >-
            Indicates for passes the date taken as reference to compute possible partial refund. It is also the date taken
            as reference to invalidate the pass partially refunded.
    RefundOfferConfirm:
      type: object
      description: >-
        Changes the refund offer to status CONFIRMED. De-confirmation by setting PROPOSED status is not supported by API.
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/RefundStatus"

    RefundStatus:
      type: string
      enum:
        - PROPOSED
        - CONFIRMED

    OverruleCode:
      type: string
      description: >-
        Reason for and type of an after sale, code list in IRS 90918-10.
        The PRM_SUPPORT_UNAVAILABLE overrule code shall only be used by
        the UIC PRM ABT tool.
      x-extensible-enum:
        - CONNECTION_BROKEN
        - EQUIPMENT_FAILURE
        - PAYMENT_FAILURE
        - PRM_SUPPORT_UNAVAILABLE
        - SALES_STAFF_ERROR
        - STOP_NOT_SERVED
        - STRIKE
        - TECHNICAL_FAILURE
        - TICKET_NOT_USED

    ExchangeTripOfferRequest:
      type: object
      description: >-
        Defines the parameters needed to request an exchange offer, either based on either an
        existing trip (that is then passed in) plus a set of offer search
        criteria, or based on trip-search and offer search criteria. At least one
        of the trip or tripSearchCriteria must be set.
      required:
        - tripOfferRequest
        - fulfillmentIds
      properties:
        tripOfferRequest:
          $ref: "#/components/schemas/TripOfferRequest"
        fulfillmentIds:
          type: array
          items:
            type: string
        overruleCode:
          $ref: "#/components/schemas/OverruleCode"

    ExchangeTripOffersCollectionResponse:
      type: object
      required:
        - id
        - exchangeTripOffers
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        id:
          type: string
        exchangeTripOffers:
          type: array
          items:
            $ref: "#/components/schemas/ExchangeTripOffer"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    ExchangeTripOfferResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        tripOffer:
          $ref: "#/components/schemas/ExchangeTripOffer"

    ExchangeTripOffer:
      type: object
      required:
        - id
        - trip
      properties:
        id:
          type: string
        summary:
          type: string
          description: A human-readable description of the exchange offer
          example: Exchange offer for Bruxelles-Midi 2022-07-01 10:05 CET
        trip:
          $ref: "#/components/schemas/Trip"
        exchangeOffers:
          type: array
          items:
            $ref: "#/components/schemas/ExchangeOffer"
        passengers:
          type: array
          items:
            $ref: "#/components/schemas/Passenger"
        fulfillments:
          type: array
          items:
            $ref: "#/components/schemas/Fulfillment"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    ExchangeOperationResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        exchangeOperation:
          $ref: "#/components/schemas/ExchangeOperation"

    ExchangeOperation:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        status:
          $ref: "#/components/schemas/ExchangeStatus"
        exchangeOffers:
          type: array
          items:
            $ref: "#/components/schemas/ExchangeOffer"
        fulfillments:
          type: array
          items:
            $ref: "#/components/schemas/Fulfillment"
        ticketTimeLimit:
          type: string
          format: date-time
        fulfillmentType:
          $ref: "#/components/schemas/FulfillmentType"

    ExchangeStatus:
      type: string
      enum:
        - PREBOOKED
        - CONFIRMED
        - FULFILLED
        - ERROR

    ExchangeOperationPatchRequest:
      type: object
      description: >-
        Allows modifying a general setting for the booking:
         * setting the required fulfillment type, e.g. value paper
           or e-ticket and preferred fulfillment media. 
           The latter is optional and relevant in some cases only.
         * Provisionally exchanging some of the fulfillments in the booking
      properties:
        requestedFulfillmentType:
          $ref: "#/components/schemas/FulfillmentType"
        preferredFulfillmentMedia:
          $ref: "#/components/schemas/FulfillmentMediaType"
        embed:
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          type: array
          items:
            type: string
            enum:
              - ALL
              - TRIP
              - OFFERS
              - OFFERS.OFFERPARTS
              - OFFERS.OFFERPARTS.PRODUCTS
              - PASSENGERS
            maxItems: 5

    ExchangeOffer:
      type: object
      properties:
        offer:
          $ref: "#/components/schemas/Offer"
        exchangeFee:
          $ref: "#/components/schemas/Price"
        exchangePrice:
          $ref: "#/components/schemas/Price"

    OfferSearch:
      type: object
      description: >-
        Search parameter for an offer search on offers not based on a trip (e.g. passes).
      properties:
        searchTags:
          description: >-
            list of tags to search for
          type: array
          items:
            type: string
        nutsCodes:
          description: >-
            Nomenclature des units territoriales statistiques COMMISSION REGULATION (EU) No 31/2011
          type: array
          items:
            type: string
        origin:
          $ref: "#/components/schemas/PlaceInput"
        destination:
          $ref: "#/components/schemas/PlaceInput"
        travelPeriods:
          type: array
          items:
            type: string
            format: date-time
        passengerSpecifications:
          type: array
          items:
            $ref: "#/components/schemas/PassengerSpecification"
        promotionCodes:
          type: array
          items:
            $ref: "#/components/schemas/PromotionCode"
        corporateCodes:
          type: array
          items:
            $ref: "#/components/schemas/CorporateCode"
        requestedFulfillmentOptions:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentOption"
        offerSearchCriteria:
          $ref: "#/components/schemas/OfferSearchCriteria"
        embed:
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          type: array
          items:
            type: string
            enum:
              - OFFERPARTS
              - NONE
              - ALL
          default: [ALL]
          maxItems: 1

    OffersCollectionResponse:
      type: object
      required:
        - id
        - offers
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        id:
          type: string
        offers:
          type: array
          items:
            $ref: "#/components/schemas/NonTripOffer"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    NonTripOffer:
      type: object
      description: >-
        Non trip offers do not reference a trip. E.g., a day pass or a reduction card.
      required:
        - id
        - offerType
      properties:
        id:
          type: string
        offerType:
          type: string
          enum:
            - NonTripOffer
        summary:
          type: string
          description: A human-readable description of the offer.
          example: Super Saver One Day Pass
        offerSummary:
          $ref: "#/components/schemas/OfferSummary"
        priceGuaranteedUntil:
          type: string
          format: date-time
          description: >-
            Indicates until when the price for the given offer is guaranteed.
        isReusable:
          type: boolean
          default: false
          description: >-
            Indicates whether the offerId can be used in more than one booking.
        offerTag:
          type: object
          description: >-
            The offerTag can/must (depending on the mandatory flag) be used in some cases to restrict the 
            set of offers returned in a subsequent and related offer search to only compatible ones.
            Note the offerTag does not need to be unique.
          properties:
            id:
              type: string
            isMandatory:
              type: boolean
              default: false
        requestedInformation:
          $ref: "#/components/schemas/RequestedInformation"
        availableFulfillmentTypes:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentType"
        validFrom:
          type: string
          format: date-time
          description: >-
            Defines the minimum validity period of the trip booked, meaning the period 
            during which it will be possible to travel with the fulfillments for this offer.
        validUntil:
          type: string
          format: date-time
          description: >-
            Defines the minimum validity period of the trip booked, meaning the period 
            during which it will be possible to travel with the fulfillments for this offer.
        admissions:
          type: array
          items:
            $ref: "#/components/schemas/Admission"
        ancillaries:
          type: array
          items:
            $ref: "#/components/schemas/Ancillary"
        fees:
          type: array
          items:
            $ref: "#/components/schemas/Fee"
        fares:
          type: array
          items:
            $ref: "#/components/schemas/FareOnline"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    CoachLayoutsResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        layouts:
          type: array
          items:
            $ref: "#/components/schemas/CoachLayout"

    CoachLayoutResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        coachLayout:
          $ref: "#/components/schemas/CoachLayout"

    CoachLayout:
      type: object
      description: >-
        coach layout providing data to draw a coach layout. The items of a coach
        are located via coordinates with (0,0) in the upper left corner. All
        coordinates are given without sign.
      required:
        - id
      properties:
        id:
          type: string
          description: id of this coachLayout on this server
        summary:
          type: string
          description: A human-readable description of the coach layout.
          example: Coach 3 in train T-122
        places:
          description: list of places included in the layout
          type: array
          items:
            type: object
            properties:
              number:
                description: place number as displayed physically on the place
                type: string
              direction:
                description: >-
                  Direction of a place, defined optional as it might be omitted in
                  case of berths in future. 
                  Code list according to UIC90918-1
                   - RIGHT: to right
                   - LEFT: to left
                   - UP: up (from right side of a coach pointing to the middle of the aisle)
                   - DOWN: down (from right side of the coach pointing to the middle of the aisle)
                type: string
                enum:
                  - RIGHT
                  - LEFT
                  - UP
                  - DOWN
              remarkId:
                description: >-
                  Remark concerning the place (e.g. to be used in a tool tip).
                  Code list according to UIC90918-1 
                   - value 1: place might have a table
                   - value 2: table at the place might be missing 
                   - value 3: place might have a different direction 
                   - value 4: place might have a table and a different direction 
                   - value 5: table at the place might be missing and place might have a different direction
                   - value 6: place might be in compartment
                   - value 7: place might be in open space
                type: string
                x-extensible-enum:
                  - MIGHT_HAVE_TABLE
                  - MIGHT_NOT_HAVE_TABLE
                  - MIGHT_HAVE_DIFFERENT_DIRECTION
                  - MIGHT_HAVE_TABLE_AND_DIFFERENT_DIRECTION
                  - MIGHT_NOT_HAVE_TABLE_AND_MIGHT_HAVE_DIFFERENT_DIRECTION
                  - MIGHT_BE_IN_COMPARTMENT
                  - MIGHT_BE_IN_OPEN_SPACE
              coords:
                $ref: "#/components/schemas/LayoutCoordinates"
            required:
              - number
              - coords
        signs:
          type: array
          items:
            type: object
            properties:
              icon:
                description: >-
                  Icon type of the graphical item type. Code list according to UIC90918-1
                  graphical item type e.g. silence area sign = 116
                type: string
              coords:
                $ref: "#/components/schemas/LayoutCoordinates"
            required:
              - icon
              - coords
        internals:
          type: array
          items:
            type: object
            properties:
              icon:
                description: >-
                  icon type of the graphical item type. Code list according to UIC90918-1
                  graphical item type e.g. seat = 1, berth = 2, couchette = 3
                type: string
              mounting:
                description: >-
                  indicates, that the item is located at the upper border (U), the
                  lower border (L), goes from upper to lower border (E) or is
                  placed free (F).
                type: string
                enum:
                  - UPPER_BORDER
                  - LOWER_BORDER
                  - UPPER_TO_LOWER_BORDER
                  - FREE
              coords:
                $ref: "#/components/schemas/LayoutCoordinates"
            required:
              - icon
              - coords
        gridSize:
          type: object
          properties:
            x:
              type: integer
              format: int32
            y:
              type: integer
              format: int32
        _links:
          type: array
          description: Context information required by the services.
          items:
            $ref: "#/components/schemas/Link"

    LayoutCoordinates:
      type: object
      required:
        - x
        - y
        - zOrder
      properties:
        x:
          description: >-
            horizontal coordinate of the center of the place
          type: integer
          format: int32
        y:
          description: >-
            vertical coordinate of the center of the place
          type: integer
          format: int32
        zOrder:
          description: >-
            Graphical layer where this item has to be placed. 
            Code list according to UIC90918-1
              - value 0: lowest layer usually used for walls 
              - value 1: middle layer usually used by places
              - value 2: top layer usually used by icons
          type: string

    Problem:
      type: object
      description: >-
        Problem Details for HTTP APIs (RFC 7807) defines a "problem detail" as a way
        to carry machine-readable details of errors in a HTTP response to avoid
        the need to define new error response formats for HTTP APIs.
        See: https://tools.ietf.org/html/rfc7807
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: "about:blank"
          example: "https://example.com/probs/passenger-too-young"
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.
    PlacePreferencesBundle:
      type: object
      description: >-
        Place preferences per passenger.
      properties:
        passengerId:
          type: string
        preferences:
          description: >-
            Place preferences (see code list Reservation Place Preferences) the customer wants to have
          type: array
          items:
            type: string

    PlaceAvailabilitiesResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        availablePlaces:
          type: array
          items:
            $ref: "#/components/schemas/AvailablePlace"

    ComplaintResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        complaint:
          $ref: "#/components/schemas/Complaint"

    CustomerComplaint:
      description: complaint details provided by the passengers
      type: object
      properties:
        applicationTime:
          description: >-
            date and time when the claim was made. This starts the legal time line to process the claim
          type: string
          format: date-time
        journeyDetails:
          $ref: "#/components/schemas/ClaimedJourneyDetails"
        claimManager:
          $ref: "#/components/schemas/PersonDetail"
        affectedPassengers:
          type: array
          items:
            $ref: "#/components/schemas/Passenger"
        supportingDocuments:
          type: array
          items:
            $ref: "#/components/schemas/Document"
        bookingIds:
          description: list of booking Ids
          type: array
          items:
            type: string
        ticketControlNumber:
          description: list of ticket control number (visible ticket identification for the customer)
          type: array
          items:
            type: string
        requestedPaymentType:
          type: string
          x-extensible-enum:
            - VOUCHER
            - MONEY
        bankAccount:
          $ref: "#/components/schemas/BankAccountReference"

    BankAccountReference:
      description: bank account
      type: object
      properties:
        iban:
          description: IBAN to be used in Europe
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}"
        accountId:
          description: bank account id to be used outside of EU
          type: string
        bankIdCodelist:
          type: string
          x-extensible-enum:
            - SWIFT
        bankId:
          type: string
        ownerName:
          type: string
          example: "John Doe"

    Document:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          example: "delay confirmation written by staff on board"
        content:
          type: string
          format: base64
          description: base64 encoded binary of the actual document
        format:
          type: string
          example: "application/pdf"
          description: >-
            Physical format of the document provided in the content field in Mime-Type format, e.g. 
            application/pdf, image/jpeg, etc. Must be filled if the "content" field is present.
    ClaimedJourneyDetails:
      type: object
      properties:
        impact:
          description: impact that was caused by the event
          type: string
          x-extensible-enum:
            - DELAY ## delayed arrival
            - JOURNEY_ABANDONED ## trip way abandoned during the travel
            - JOURNEY_NOT_STARTED ## trip was not started due to the delay
            - SERVICE_DEGRADED ## e.g. service class not provided
          example: JOURNEY_ABANDONED
        finalDelay:
          type: string
          format: duration
          example: PT30M
        onReturn:
          type: boolean
          default: false
        delayedJourney:
          type: array
          items:
            $ref: "#/components/schemas/ClaimedLeg"

    ClaimedLeg:
      type: object
      properties:
        trainNumber:
          type: string
        connectionMissed:
          description: connection missed due to a delay on the previous leg
          type: boolean
        serviceDegradation:
          type: array
          items:
            $ref: "#/components/schemas/ServiceDegradation"
        departureStation:
          $ref: "#/components/schemas/Place"
        arrivalStation:
          $ref: "#/components/schemas/Place"
        plannedDepartureTime:
          type: string
          format: date-time
        timetabledArrivalTime:
          type: string
          format: date-time
        observedArrivalTime:
          type: string
          format: date-time

    ServiceDegradation:
      description: >-
        enumeration of service degradations
      type: string
      x-extensible-enum:
        - RESERVED_PLACES_MISSING
        - BOOKED_ACCOMMODATION_TYPE_MISSING
        - BOOKED_CLASS_MISSING
        - BOOKED_MEAL_MISSING

    ComplaintPatchRequest:
      description: >-
        Changes to a claim already made.
        This covers upload of additional supporting documents, changes to  the passenger and claim manager data.
        The patch of the compensation amount requires an agreement between the involved parties and is used in
        case the legal time line for deciding the claim is passed.
      type: object
      properties:
        reason:
          type: string
          x-extensible-enum:
            - BANK_ACCOUNT
            - SETTLED_TIME_LIMIT_EXCEEDED ## an allocator settled the claim as the fare provided did not reply in due time. The compensation amount debited is provided
            - PASSENGER_CHANGE
        compensationAmount:
          $ref: "#/components/schemas/Price"
        claimManager:
          $ref: "#/components/schemas/PersonDetail"
        affectedPassengers:
          type: array
          items:
            $ref: "#/components/schemas/Passenger"
        supportingDocuments:
          type: array
          items:
            $ref: "#/components/schemas/Document"
        bankAccount:
          $ref: "#/components/schemas/BankAccountReference"

    Complaint:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          x-extensible-enum:
            - INITIATED
            - EVALUATING
            - DECidED
            - SETTLED
        customerComplaint:
          $ref: "#/components/schemas/CustomerComplaint"
        missingInformation:
          description: >-
            indication of missing customer information
          type: array
          items:
            type: string
        decision:
          $ref: "#/components/schemas/ComplaintDecision"
        _links:
          $ref: "#/components/schemas/Link"

    ComplaintDecision:
      type: object
      properties:
        compensationAmount:
          $ref: "#/components/schemas/Price"
        refundVoucher:
          $ref: "#/components/schemas/FulfillmentDocument"
        explanation:
          $ref: "#/components/schemas/FulfillmentDocument"
        shortExplanation:
          type: string
        delayedJourney:
          description: >-
            allocator or fare provider view on the delays. This might differ from the customer view
          type: array
          items:
            $ref: "#/components/schemas/Trip"

    ReductionCardCollectionResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        reductionCardsDelivery:
          $ref: "#/components/schemas/ReductionCardsDelivery"

    ReductionCardsDelivery:
      type: object
      description: Delivery of a list of reduction cards.
      properties:
        deliveryDate:
          description: date of the assembly of the reduction card data set
          type: string
          format: date-time
        reductionCards:
          type: array
          items:
            $ref: "#/components/schemas/ReductionCard"

    ReductionCard:
      type: object
      required:
        - issuer
        - id
        - name
      properties:
        issuer:
          $ref: "#/components/schemas/Company"
        id:
          description: id of the card type within the issue
          type: string
        name:
          $ref: "#/components/schemas/Text"
        includedCards:
          description: This card includes the listed cards
          type: array
          items:
            $ref: "#/components/schemas/CardReference"
        serviceClassTypes:
          description: >-
            list of service classes where this card applies
          type: array
          items:
            $ref: "#/components/schemas/ServiceClassType"
          maxItems: 4
        cardType:
          $ref: "#/components/schemas/CardType"
        cardIdRequired:
          description: the card id must be delivered in online sales
          type: boolean
          default: false
        _links:
          $ref: "#/components/schemas/Link"

    ZoneCollectionResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        zoneDelivery:
          $ref: "#/components/schemas/ZonesDelivery"

    ZonesDelivery:
      type: object
      description: Delivery of a list of zones.
      properties:
        deliveryDate:
          description: date of the assembly of the zone data set
          type: string
          format: date-time
        zones:
          type: array
          items:
            $ref: "#/components/schemas/ZoneDefinition"

    ZoneDefinition:
      type: object
      description: >-
        Definition of a zone used to define regional validity. The area of the zone can be defined via a geo-polygon, 
        a complete list of all contained stations or area codes from the NUTS code list. The carrier is either the carrier
        or transport authority responsible for the definition.
      required:
        - carrier
        - id
      properties:
        carrier:
          $ref: "#/components/schemas/Company"
        id:
          type: string
        name:
          type: string
        polygon:
          $ref: "#/components/schemas/Polygon"
        places:
          type: array
          items:
            $ref: "#/components/schemas/PlaceRef"
        nutsCodes:
          type: array
          items:
            type: string

    #### Fare-specific elements begin

    FareOnline:
      type: object
      description: >-
        The online representation of a fare.
      required:
        - id
        - type
        - prices
        - regionalConstraint
        - combinationConstraint
        - travelValidityConstraint
        - afterSalesCondition
      properties:
        id:
          description: id of the fare item to be included in accounting
          type: string
        type:
          $ref: "#/components/schemas/FareType"
        name:
          description: >-
            If the online fare is based on a offline fare it corresponds to the name
            of the corresponding offline fare.
          $ref: "#/components/schemas/Text"
        description:
          description: detailed description of the fare
          $ref: "#/components/schemas/Text"
        prices:
          description: allows specifying a price in multiple currencies
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Price"
        regionalConstraint:
          type: object
          description: >-
            Regional constraint of the fare- offline bulk data use the id of connection points whereas 
            in an online environment the connection point is included
          required:
            - regionalValidities
          properties:
            entryConnectionPoint:
              $ref: "#/components/schemas/FareConnectionPoint"
            exitConnectionPoint:
              $ref: "#/components/schemas/FareConnectionPoint"
            regionalValidities:
              $ref: "#/components/schemas/RegionalValidities"
            distance:
              description: Distance in km for statistics
              type: integer
              format: int32
              minimum: 0
        serviceConstraint:
          $ref: "#/components/schemas/ServiceConstraint"
        carrierConstraint:
          $ref: "#/components/schemas/CarrierConstraint"
        regulatoryConditions:
          $ref: "#/components/schemas/RegulatoryConditions"
        serviceClass:
          $ref: "#/components/schemas/ServiceClass"
        comfortClass:
          $ref: "#/components/schemas/ComfortClass"
        afterSalesCondition:
          type: object
          properties:
            conditions:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/AfterSaleCondition"
              description: >-
                Structured description of the after-sales conditions.
            isSupportingIndividualContracts:
              description: >-
                Indicates that the after sales of this fare can be treated independently per person.
              type: boolean
              default: false
        combinationConstraint:
          type: object
          properties:
            combinationModels:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/FareCombinationModel"
          required:
            - combinationModels
        fulfillmentConstraint:
          type: object
          properties:
            acceptedControlSecurityTypes:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/ControlSecurityType"
            acceptedBarCodes:
              description: for SiD fulfillment one of the listed bar codes is required
              type: array
              items:
                description: >-
                  Item according to IRS 90918-9: FCB, TLB, SSB
                type: string
                x-extensible-enum:
                  - FCB
                  - TLB
                  - SSB
            requiredBarCodes:
              description: >-
                One of the listed bar codes must be provided.
              type: array
              items:
                type: string
            requiredSiS:
              description: >-
                To guarantee security in system (SiS) of the fulfillment one of the listed interfaces is required.
              type: array
              items:
                description: >-
                  Interface type to ticket control data. REGISTRY means submitting
                  the data to the central UIC registry. PEER_TO_PEER means data exchange
                  is handled between the two parties directly.
                type: string
                x-extensible-enum:
                  - REGISTRY
                  - PEER_TO_PEER
            isIndividualTicketingForbidden:
              description: a separate fulfillment per passenger is forbidden
              type: boolean
              default: false
        reductionConstraint:
          type: object
          properties:
            requiredCards:
              description: >-
                One of the listed cards is required to be valid at the time of travel.
              type: array
              items:
                $ref: "#/components/schemas/CardReference"
          required:
            - requiredCards
        travelValidityConstraint:
          type: object
          description: >-
            travel validity data are needed to create barcode and control data (IRS 90918-4)
            in allocator mode even in case they have been checked during the online sale
          properties:
            validTravelDates:
              $ref: "#/components/schemas/CalendarOnline"
            validityRange:
              type: object
              properties:
                timeUnit:
                  type: string
                  enum:
                    - DAYS
                    - HOURS
                    - MINUTES
                value:
                  type: integer
                  format: int32
                hoursAfterMidnight:
                  description: validity extended after midnight
                  type: integer
                  format: int32
              required:
                - timeUnit
                - value
            excludedTimeRanges:
              description: time ranges excluded from the validity (e.g. off peak fulfillments)
              type: array
              items:
                type: object
                properties:
                  from:
                    description: minutes of the day in the time zone of travel
                    type: integer
                    format: int32
                  until:
                    description: minutes of the day in the time zone of travel
                    type: integer
                    format: int32
                  scope:
                    type: string
                    enum:
                      - START_OF_TRAVEL
                      - COMPLETE_RANGE
                required:
                  - from
                  - until
                  - scope
            numberOfTravelDays:
              description: number of allowed travel days (e.g. 3 travel days within 2 weeks)
              type: integer
              format: int32
            returnConstraint:
              description: a return trip with the same carrier must be sold in combination
              type: object
              properties:
                latestReturn:
                  description: number of days after departure or start of validity of the last return
                  type: integer
                  format: int32
                  minimum: 0
                earliestReturn:
                  description: number of days after departure or start of validity of the earliest return
                  type: integer
                  format: int32
                  minimum: 0
                excludedWeekdays:
                  description: weekdays (ISO day of the week, 1 = Monday) between travel and return where travel is not allowed
                  type: array
                  items:
                    type: integer
                    format: int32
              required:
                - latestReturn
                - earliestReturn
            trainValidity:
              $ref: "#/components/schemas/TrainValidity"
            validityType:
              description: >-
                Type of usage, either as single trip or multiple trips. Unrestricted fares might be combined 
                into single trips if appropriate.
              type: string
              default: SINGLE_TRIP
              x-extensible-enum:
                - SINGLE_TRIP
                - MULTIPLE_TRIPS
                - UNRESTRICTED
            tripAllocationConstraint:
              $ref: "#/components/schemas/TripAllocationConstraint"
            tripInterruptionConstraint:
              $ref: "#/components/schemas/TripInterruptionConstraint"
          required:
            - validityRange
        availablePlaces:
          type: array
          items:
            $ref: "#/components/schemas/AvailablePlace"
        selectedPlaceOption:
          $ref: "#/components/schemas/SelectedPlaceOption"
        reservationDetails:
          type: array
          items:
            $ref: "#/components/schemas/ReservationDetail"
        coveredSection:
          description: >-
            The section of the fare that is covered by the fare. The leg id allows 
            to uniquely identify a place if it is passed through several times.
          $ref: "#/components/schemas/Section"
        passengerConstraints:
          description: >-
            passenger constraint to be included in bar codes
          type: array
          items:
            type: object
            properties:
              number:
                description: number of passengers with this constraint
                type: integer
                format: int32
              upperAgeLimit:
                type: integer
                format: int32
              lowerAgeLimit:
                type: integer
                format: int32
        involvedTCOs:
          description: >-
            The ticket controlling organizations (TCOs) involved in the control.
            Used to provide TCOs access to the ticket in the control data (UIC IRS 90918-4).
          type: array
          items:
            $ref: "#/components/schemas/Company"
        legacyAccountingIdentifier:
          type: object
          description: identifier of the fare in the current 301 accounting file
          required:
            - serialId
          properties:
            serialId:
              description: sequential number of regional validities
              type: integer
              format: int32
              minimum: 0
              maximum: 99999
            addId:
              description: >-
                Sequential number of regional validities (leading positions in case the series
                is too short).
              type: integer
              format: int32
              minimum: 0
              maximum: 99
            tariffId:
              description: Tarif id for the old serie format.
              type: integer
              format: int32
              minimum: 0
              maximum: 9999
        legacyReservationParameter:
          type: object
          description: reservation parameter to support the UIC 90918-1 interface for booking
          properties:
            travelClass:
              description: 90918-1 class code in reservation
              type: string
            serviceLevelCode:
              description: service level code defined in UIC 90918-1
              type: string
            serviceCode:
              description: service code to be used in reservation
              type: string
            berthType:
              description: berth type code in UIC 90918-1 to be used in reservation
              type: string
            coachTypeCode:
              description: coach type code in UIC 90918-1 to be used in reservation
              type: string
            compartmentTypeCode:
              description: compartment type code in UIC 90918-1 to be used in reservation
              type: string
            tariffs:
              description: tariff according to UIC 90918-1 to be used for booking
              type: array
              items:
                $ref: "#/components/schemas/LegacyReservationTariff"
          required:
            - travelClass
            - serviceLevelCode
            - serviceCode
        luggageConstraint:
          $ref: "#/components/schemas/LuggageConstraint"

    LuggageConstraint:
      type: object
      description: constraint on luggage
      properties:
        maxHandLuggage:
          description: Standard hand luggage pieces
          type: integer
          format: int32
        maxLargeLuggage:
          description: Standard non-hand luggage pieces
          type: integer
          format: int32
        restrictedLuggageItems:
          type: array
          items:
            $ref: "#/components/schemas/LuggageRestriction"
        luggageRules:
          type: array
          items:
            $ref: "#/components/schemas/LuggageRestrictionRule"

    LuggageRestrictionRule:
      description: >-
        named luggage restriction rule: CAN_CARRY = weight is ok if you can carry it yourself
      type: string
      x-extensible-enum:
        - CAN_CARRY

    LuggageRestriction:
      type: object
      properties:
        numberOfItems:
          description: number of luggage  items allowed with this restriction
          type: integer
          format: int32
        registrationIds:
          description: registrationIds to be included in a bar code on the fulfillment (UIC IRS 90918-4) (e.g. on a luggage tag)
          type: array
          items:
            type: string
        restrictions:
          description: all listed dimensions apply to the luggage items as upper limits
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/LuggageDimension"
      required:
        - numberOfItems
        - restrictions

    LuggageDimension:
      description: luggage dimension to be used in luggage restrictions
      type: object
      properties:
        dimension:
          description: >-
            type of the dimension. Combined sizes are the summ of the sizes  WIDTH_HEIGHT_LENGTH = sum of width, hight and length in cm (= linear equivalent).
          type: string
          x-extensible-enum:
            - WIDTH
            - HEIGHT
            - LENGTH
            - WIDTH_HEIGHT
            - WIDTH_HEIGHT_LENGTH
            - WEIGHT
            - VOLUME
        value:
          description: value of the dimension, weight in kg, length in cm, volume in liter.
          type: integer
          format: int32
      required:
        - dimension
        - value

    TripInterruptionProcess:
      description: >-
        MANUAL: passenger needs manual confirmation of train or station staff to interrupt the trip. 
        ACTIVATION: Passenger needs to deactivate the ticket during the interruption (via an app).
      type: string
      x-extensible-enum:
        - NONE
        - MANUAL
        - ACTIVATION

    TripAllocationProcess:
      description: >-
        NONE: Individual trips don't need to be allocated. 
        MANUAL: The passenger has to allocate a trip manually (This should not be used as it is by design non-interoperable). 
        ACTIVATION: Individual trips can be allocated by activation of the ticket. 
        FULFILLMENT: A new fulfillment needs to be created to allocate a trip.
      type: string
      x-extensible-enum:
        - NONE
        - MANUAL
        - ACTIVATION
        - FULFILLMENT

    TripAllocationUnit:
      description: >-
        Unit to allocate trips in a multi-trip fare. Trips can be allocated per day (e.g. Eurail) or per 
        duration (e.g. multiples of a duration unit to cover the trip) or as single trips (e.g. carnet))
        NONE: Individual trips don't need to be allocated. 
        TRIP: allocation per individual trip. 
        DAY: The allocation is per travel day.
        DURATION: the allocation is per duration.
      type: string
      x-extensible-enum:
        - NONE
        - TRIP
        - DAY
        - DURATION

    TripAllocationConstraint:
      type: object
      description: constraint on the use of a multiple trip ticket
      required:
        - allocationUnit
        - requiredProcesses
      properties:
        allocationUnit:
          $ref: "#/components/schemas/TripAllocationUnit"
        maxUnits:
          description: maximum number of allowed units to be allocated
          type: integer
          format: int32
        durationUnit:
          description: multiples of this duration can be allocated
          type: string
          format: duration
          example: "PT30M"
        requiredProcesses:
          description: one of the listed processes is required for the allocation of a single trip
          type: array
          items:
            $ref: "#/components/schemas/TripAllocationProcess"

    TripInterruptionConstraint:
      type: object
      description: >-
        rules on allowed trip interruptions. Interruptions due to a train change 
        indicated by a trip search must not be included here.
      required:
        - maxInterruptions
        - requiredProcesses
      properties:
        maxInterruptions:
          description: maximum number of allowed interruptions
          type: integer
          format: int32
        maxDuration:
          description: maximum duration of one interruption
          type: string
          format: duration
          example: "PT30M"
        totalMaxDuration:
          description: maximum duration of all interruptions on the route
          type: string
          format: duration
          example: "PT30M"
        requiredProcesses:
          description: one of the listed processes is required for the interruption of the trip
          type: array
          items:
            $ref: "#/components/schemas/TripInterruptionProcess"

    RegulatoryConditions:
      description: >-
        General conditions applied to cover legal regulations within the area of validity. Allocators must 
        reflect these terms and conditions in the conditions of combined offers and indicate them to the customer
        where required. Which indications are mandatory to be shown to the customer will be defined in the SCICs
         - CIV: terms and conditions according to COTIV regulation
         - MD:  terms and conditions according to SMPS regulation
         - EU-PRR: terms and conditions according to EU-PRR regulation
         - RESPLUS: terms and conditions according to RESPLUS agreement
      type: array
      items:
        type: string
        enum:
          - CIV
          - MD
          - EU-PRR
          - RESPLUS

    CalendarOnline:
      type: object
      properties:
        fromDate:
          type: string
          format: date-time
        untilDate:
          type: string
          format: date-time
        dates:
          description: >-
            dates included in the calendar. In case no dates are provided the range is assumed to be valid
          type: array
          items:
            type: string
            format: date-time
        utcOffset:
          description: >-
            offset to UTC in minutes (number of minutes to be added to get UTC dates)
          type: integer
          format: int32

    FareCombinationModel:
      type: object
      required:
        - model
      properties:
        model:
          description: >-
            Possible models are SEPARATE_TICKET, SEPARATE_CONTRACT, CLUSTERING, COMBINING. 
            The models need to be supported by the allocator.
          type: string
        combinableCarriers:
          description: >-
            List of all carriers where the model can be applied, in case the list is empty
            all combinations are allowed.
          type: array
          items:
            $ref: "#/components/schemas/Company"
        isValidOnlyWhenCombined:
          description: >-
            This combination model applies only in case the fare is combined with another carrier
          type: boolean
          default: false
        referenceCluster:
          description: >-
            In case of CLUSTERING model: the cluster to which the fare belongs
          type: string
        allowedClusters:
          description: >-
            In case of CLUSTERING model: the other clusters that allow a combination
          type: array
          items:
            type: string
        allowedCommonContracts:
          description: >-
            List of carriers where a common contract with separate fulfillments are allowed.
          type: array
          items:
            $ref: "#/components/schemas/Company"

    ServiceConstraint:
      type: object
      description: >-
        Either excluded or included service brands can be set.
      properties:
        restrictedToServiceBrands:
          type: array
          items:
            $ref: "#/components/schemas/ServiceBrandCode"
        excludedServiceBrands:
          type: array
          items:
            $ref: "#/components/schemas/ServiceBrandCode"
        description:
          $ref: "#/components/schemas/Text"

    RegionalValidities:
      type: array
      items:
        $ref: "#/components/schemas/RegionalValidity"

    RegionalValidity:
      type: object
      description: >-
        One of the elements Zone, ViaStation, TrainLink, Line, or Polygon defining the regional validity
      properties:
        seqNb:
          description: order number of the list item
          type: integer
          format: int32
        zone:
          $ref: "#/components/schemas/Zone"
        route:
          $ref: "#/components/schemas/Route"
        trainLink:
          $ref: "#/components/schemas/TrainLink"
        line:
          $ref: "#/components/schemas/Line"
        polygon:
          $ref: "#/components/schemas/Polygon"
        serviceConstraint:
          $ref: "#/components/schemas/ServiceConstraint"

    Line:
      type: object
      description: >-
        terminalStation - in case the product requires a destination within the zone (e.g. local ticket 
        to go to the main rail station). 
        entryStation - Station to enter the zone in case the product requires to enter the zone via a 
        specific station (e.g. local zone ticket to start from the main rail station).
      required:
        - carrier
      properties:
        binaryLineId:
          type: string
          description: >-
            Id to support local traffic standards (e.g. VDV,...).
        carrier:
          $ref: "#/components/schemas/Company"
        city:
          type: integer
          format: int32
        entryStation:
          $ref: "#/components/schemas/StopPlace" # EXT Changed from StopPoint
        lineIds:
          type: array
          items:
            type: string
        terminalStation:
          $ref: "#/components/schemas/StopPlace" # EXT Changed from StopPoint
        nutsCode:
          description: >-
            Nomenclature des units territoriales statistiques  
             COMMISSION REGULATION (EU) No 31/2011
          type: string

    TrainLink:
      type: object
      required:
        - fromStation
        - toStation
        - train
        - travelDate
      properties:
        fromStation:
          $ref: "#/components/schemas/StopPlace" # EXT Changed from StopPoint
        toStation:
          $ref: "#/components/schemas/StopPlace" # EXT Changed from StopPoint
        train:
          type: string
        travelDate:
          type: string
          format: date-time
          description: date and time of the departure where the train link starts

    Polygon:
      type: object
      properties:
        edges:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/GeoPosition"

    Route:
      description: >-
        route description including the first and last real stopPoint
      properties:
        routeItem:
          $ref: "#/components/schemas/RouteItem"
        routeItemList:
          description: >-
            list of route items referenced within the
          type: array
          items:
            $ref: "#/components/schemas/RouteItem"

    RouteItem:
      description: >-
        items to compose routes (Note - replaced viaStation, content compliant with viaStation in IRS 90918-4 and 90918-9)
      type: object
      properties:
        alternativeRouteItemIndices:
          description: >-
            list of alternative route parts to be used on this travel path referenced by the index in the provided list of route items
          type: array
          items:
            type: integer
            format: int32
        carrierConstraint:
          $ref: "#/components/schemas/CarrierConstraint"
        routeItemIndices:
          description: >-
            sequence of route items along the travel path referenced by the index in the provided list of route items
          type: array
          items:
            type: integer
            format: int32
        serviceConstraint:
          $ref: "#/components/schemas/ServiceConstraint"
        station:
          $ref: "#/components/schemas/StopPlace" # EXT Changed from StopPoint
        fareReferenceStation:
          $ref: "#/components/schemas/FareReferenceStation"

    FareReferenceStation:
      type: object
      description: >-
        Reference to a list of stations jointly valid in a fare. The fare
        reference station defines a set of station that are equivalent from 
        a tariff point of view. The code is issued by the carrier. Needed to
        generate bar codes as well as fulfillments.
      required:
        - name
        - code
        - carrier
        - stations
      properties:
        name:
          type: string
        code:
          type: string
        carrier:
          $ref: "#/components/schemas/Company"
        stations:
          type: array
          items:
            $ref: "#/components/schemas/PlaceRef"
          minItems: 1

    CarrierConstraint:
      type: object
      description: Either excluded or included carriers can be set.
      properties:
        includedCarrier:
          type: array
          items:
            type: string
        excludedCarrier:
          type: array
          items:
            type: string

    Zone:
      type: object
      description: >-
        carrier - carrier responsible for the transport.
        entryStation - Station to enter the zone in case the product requires to enter the zone via a specific station
        (e.g. local zone ticket to start from the main rail station).
        terminalStation - Terminal station in case the product requires a destination within the zone (e.g. local ticket
        to go to the main rail station).
      required:
        - carrier
      properties:
        binaryZoneId:
          type: string
          format: base64
          description: Id to support local traffic standards (e.g. VDV,...)
        carrier:
          $ref: "#/components/schemas/Company"
        city:
          type: integer
          format: int32
        entryStation:
          $ref: "#/components/schemas/StopPlace" # EXT Changed from StopPoint
        terminalStation:
          $ref: "#/components/schemas/StopPlace" # EXT Changed from StopPoint
        zoneIds:
          description: to be used in bar codes
          type: array
          items:
            type: integer
            format: int32
        nutsCode:
          description: Nomenclature des units territoriales statistiques COMMISSION REGULATION (EU) No 31/2011
          type: string

    ControlSecurityType:
      type: string
      description: >-
        SiP: secure paper tickets
        SiP: security in data (signed bar code)
        SiS: security in system
      x-extensible-enum:
        - SiP
        - SiD
        - SiS

    LegacyReservationTariff:
      type: object
      description: >-
        Legacy tariff code and number of items or persons in case UIC 90918-1 is used for booking.
      properties:
        number:
          description: number of items with this tariff code
          type: integer
          format: int32
        code:
          description: legacy tariff code
          type: integer
          format: int32

    FareType:
      type: string
      description: Basic UIC fare types used in 90918-10, 90918-4, and 90918-9.
      x-extensible-enum:
        - ADMISSION
        - RESERVATION
        - INTEGRATED_RESERVATION
        - ANCILLARY

    FareConnectionPoint:
      type: object
      description: >-
        Connection point connecting two fare regimes. The connection is possible between stations of the two provided station sets.
        A legacy border point code (id) might be provided as an additional code within the stations (code list BORDER_POINT provided in URN). 
        In case the connection point is a real station this station is indicated. 
        In case the connection point is between stations for each side of the border real stations must be provided. 
        Multiple sets of station can be provided in the rare case that the connection point connects more than two station (A-B and A-C).
        Multiple stations within a set at one side of the border might be provided in case of changes (new stations build near the border). 
        Providing the UIC code for the station is mandatory.
      required:
        - stationSets
      properties:
        name:
          type: string
        stationSets:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/PlaceRef" # EXT Changed from StopPoint

    TrainValidity:
      type: object
      description: >-
        Validity depending on boarding / leaving of a train. The ticket is valid
        from departure until the destination station in the train if departure or destination is within the from - until range.
        The validation can reference the departure or the destination time to decide the validity (e.g. Eurail/Interrail passes
        currently use the departure for the validity on night trains).
      required:
        - from
        - until
        - carriers
        - scope
      properties:
        from:
          type: string
          format: date-time
        until:
          type: string
          format: date-time
        carriers:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Company"
        excludedServiceBrands:
          type: array
          items:
            $ref: "#/components/schemas/ServiceBrandCode"
        includedServiceBrands:
          type: array
          items:
            $ref: "#/components/schemas/ServiceBrandCode"
        scope:
          type: string
          enum:
            - BOARDING
            - ARRIVAL
          default: BOARDING
      additionalProperties: false

    ##### Fare-specific elements end

    #### Common elements start
    ## Referenced by distributor as well as allocator part

    GeoPosition:
      type: object
      description: >-
        WGS84 coordinates position. Provided by OJP.
      required:
        - latitude
        - longitude
      properties:
        longitude:
          $ref: "#/components/schemas/Longitude"
        latitude:
          $ref: "#/components/schemas/Latitude"
        # altitude:   # Out of scope
        #   $ref: "#/components/schemas/Altitude"
        # precision:   # Out of scope
        #   $ref: "#/components/schemas/Precision"

    Longitude:
      type: number
      description: Longitude from Greenwich Meridian. -180 (West) to +180 (East). Decimal degrees. eg 2.356.
      format: float
      example: 8.54021
      minimum: -180.0
      maximum: 180.0

    Latitude:
      type: number
      description: Latitude from equator. -90 (South) to +90 (North). Decimal degrees. eg 56.356.
      format: float
      example: 47.37818
      minimum: -90.0
      maximum: 90.0

    Section:
      type: object
      description: >-
        Allows to indicate the sub-part of the trip. LegIds are only relevant if
        a trip can be referenced. When absent, the totality of the trip is priced.
      properties:
        startPlace:
          $ref: "#/components/schemas/PlaceRef"
        startLegId:
          type: string
        endPlace:
          $ref: "#/components/schemas/PlaceRef"
        endLegId:
          type: string

    Link:
      type: object
      description: >-
        The underlying system may provide links for pagination of links pointing on 
        further information (such as HTML download links, web sites or extended APIs).
        Mechanism to add flexible extensions specific to an underlying system. Implemented
        the JSON-HAL specification.
      additionalProperties:
        $ref: "#/components/schemas/LinkObject"

    LinkObject:
      type: object
      required:
        - href
      properties:
        type:
          type: string
          description: >-
            Hint to indicate the media type expected when dereferencing the target resource.
          example: application/json
        rel:
          type: string
          description: >-
            Allows to specify the relation the link is representing. see also RFC 5988
          example: "next"
        value:
          type: string
          description: >-
            Allows to provide a value to the link, for example id of the targeted resource or displayable representation for the link
          example: "urn:uic:sbc:43"
        href:
          type: string
          format: uri
          description: A URI
          example: "https://api.osdm.com/trips-collections/12345?cursor=2"

    Translation:
      type: object
      required:
        - language
        - text
      properties:
        language:
          type: string
          description: ISO-639-1 language code
        text:
          type: string
        shortText:
          type: string

    Text:
      type: object
      description: >-
        Directly included text in case of online services. Text must be encoded in UTF-8 format.
      required:
        - id
        - text
      properties:
        id:
          type: string
        translations:
          type: array
          items:
            $ref: "#/components/schemas/Translation"
        text:
          type: string
        shortText:
          type: string

    Price:
      type: object
      required:
        - currency
        - amount
      properties:
        currency:
          $ref: "#/components/schemas/Currency"
        amount:
          description: amount in cents
          type: integer
          format: int32
        scale:
          description: scale of the amount - the number of positions after the comma
          type: integer
          format: int32
          default: 2
        vats:
          type: array
          items:
            $ref: "#/components/schemas/VAT"

    Currency:
      type: string
      description: ISO 4217 currency codes
      example:
        - CHF
        - EUR
        - SEK

    VAT:
      type: object
      required:
        - countryCode
        - amount
      properties:
        countryCode:
          $ref: "#/components/schemas/CountryCode"
        amount:
          description: amount in cents
          type: integer
          format: int32
          example: 5
        scale:
          description: scale of the amount - the number of positions after the comma
          type: integer
          format: int32
          default: 2
        percentage:
          type: number
          format: float
        taxId:
          type: string
        scope:
          $ref: "#/components/schemas/VatScope"

    VatScope:
      type: string
      description: scope where the VAT applies
      x-extensible-enum:
        - INTERNATIONAL
        - NATIONAL
        - SHORT_DISTANCE
        - LONG_DISTANCE

    Company:
      type: string
      description: >-
        Identifies a company. For rail, a RICS company code or compatible ERA company code are used.
      example: "urn:uic:rics:1185"

    NamedCompany:
      type: object
      description: >-
        Identifies a company and provides textual representation. For rail, a RICS company code or compatible ERA company code are used.
      required:
        - ref
        - name
      properties:
        ref:
          $ref: "#/components/schemas/Company"
        name:
          description: >-
            Textual representation of the operator to be displayed unless the application is able to show the name by the operator references.
          type: string
          example: ACME Corp.

    ServiceBrandCode:
      type: string
      description: >-
        Service brand codes. For public transport, a code list can be found in OSDM's catalog of code list.
        For example, "163" denotes TGV Lyria and "175" denotes Glacier Express.
      example:
        - 163
        - 175

    ServiceClass:
      type: object
      description: Class of service.
      required:
        - type
        - name
      properties:
        type:
          $ref: "#/components/schemas/ServiceClassType"
        name:
          type: string
          description: The name the carrier itself uses to designate this specific service class.

    ServiceClassType:
      type: string
      description: >-
        Type of quality level, finer grained than the comfort class.
      x-extensible-enum:
        - BEST
        - HIGH
        - STANDARD
        - BASIC

    Condition:
      type: object
      description: >-
        Describes sales and after sales conditions applicable to the product. 
        For a product to be refundable or exchangeable, at least one refund or exchange 
        (respectively) condition must be present.
      required:
        - type
        - description
      properties:
        type:
          $ref: "#/components/schemas/ConditionType"
        description:
          type: string

    ConditionType:
      type: string
      x-extensible-enum:
        - SALE
        - PLACE_CHANGE
        - FULFILLMENT
        - EXCHANGE
        - REFUND
        - TRAVEL

    AvailablePlace:
      type: object
      description: >-
        Describes the details of the available places.
      required:
        - accommodationType
      properties:
        accommodationType:
          $ref: "#/components/schemas/AccommodationType"
        accommodationSubType:
          $ref: "#/components/schemas/AccommodationSubType"
        placeProperties:
          type: array
          items:
            $ref: "#/components/schemas/AvailablePlaceProperty"

    AvailablePlaceProperty:
      type: object
      properties:
        placeProperty:
          $ref: "#/components/schemas/PlaceProperty"
        numericAvailability:
          type: integer
          format: int32

    ReservationDetail:
      type: object
      description: >-
        Describes the details of the reserved place(s).
      required:
        - accommodationType
        - accommodationSubType
      properties:
        accommodationType:
          $ref: "#/components/schemas/AccommodationType"
        accommodationSubType:
          $ref: "#/components/schemas/AccommodationSubType"
        reservedPlaces:
          description: >-
            Reserved places in a confirmed reservation. 
            Multiple place packs are needed to combined person and bicycle reservations
          type: array
          items:
            $ref: "#/components/schemas/ReservedPlace"

    ReservedPlace:
      type: object
      description: >-
        Selection of places with common properties description element - textual description of the places
        placeProperties is mandatory for allocator mode, for distributors the textual description is used
      required:
        - id
        - passengerIds
        - vehicle
        - coach
      properties:
        id:
          type: string
        passengerIds:
          type: array
          items:
            description: Id of the passenger
            type: string
        vehicle:
          description: vehicle number (e.g. train number)
          type: string
        coach:
          type: string
        places:
          description: descriptive string of the places (e.g. 11-35,51)
          type: string
        placeIds:
          description: list of individual place numbers
          type: array
          items:
            type: string
        placeProperties:
          description: place properties to be indicated to the customer
          type: array
          items:
            type: object
            description: >-
              Place properties of places in the place pack. Properties without a number refer 
              to all places.
            required:
              - placeProperty
            properties:
              placeProperty:
                $ref: "#/components/schemas/PlaceProperty"

    PlaceProperty:
      type: string
      description: see code list

    AccommodationType:
      type: string
      description: >-
        Accommodation type definition out of the Accommodation Type Code List.
      default: SEAT

    AccommodationSubType:
      type: string
      description: >-
        Accommodation type definition out of the Accommodation Sub Type Code List. If no 
        sub type is specified use ANY_SEAT.
      default: ANY_SEAT

    SelectedPlaceOption:
      type: object
      description: >-
        Place selection options and selected options in an offer
        - reference place for adjacent reservation
        - selected optional place properties
        - selected places from a graphical place selection
      properties:
        reservationOptions:
          $ref: "#/components/schemas/ReservationOption"
        vehicle:
          description: >-
            Vehicle / train number is necessary in case of train parts with different train numbers
          type: string
        referencePlace:
          $ref: "#/components/schemas/SelectedReferencePlace"
        options:
          type: array
          items:
            $ref: "#/components/schemas/SelectedOption"
        coaches:
          type: array
          items:
            $ref: "#/components/schemas/SelectedCoach"

    ReservationOption:
      type: object
      properties:
        preferences:
          description: possible preferences to be requested in reservation without changing the fare
          type: array
          items:
            $ref: "#/components/schemas/ReservationOptionGroup"
        graphicalReservation:
          description: graphical reservation is supported, interface type "NO","UIC_918",..
          type: string

    ReservationOptionGroup:
      type: object
      required:
        - preferenceGroup
        - preferences
      properties:
        preferenceGroup:
          type: string
          example: SEAT_DIRECTION
        preferences:
          type: array
          items:
            type: string
            example: "FORWARD_FACING"

    SelectedReferencePlace:
      type: object
      description: reference place for an adjacent reservation
      properties:
        coachNumber:
          type: string
        placeNumber:
          type: string

    SelectedOption:
      type: object
      description: >-
        Place selection of places for reservation linked to passengers.
      required:
        - passengerIds
        - accommodationType
        - accommodationSubType
      properties:
        passengerIds:
          type: array
          items:
            description: Id of the passenger
            type: string
        accommodationType:
          $ref: "#/components/schemas/AccommodationType"
        accommodationSubType:
          $ref: "#/components/schemas/AccommodationSubType"
        placeProperties:
          description: Properties of places as defined in 90810-10.
          type: array
          items:
            description: selection from the optional place properties provided in the offer
            type: string

    PlaceAvailabilityResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        reservation:
          $ref: "#/components/schemas/PlaceAvailability"

    PlaceAvailability:
      type: object
      description: Availability of places on vehicle.
      properties:
        vehicle:
          $ref: "#/components/schemas/Vehicle"
        preSelections:
          description: suggested pre-selection of places
          type: array
          items:
            type: object
            properties:
              coach:
                type: string
              place:
                type: string

    Vehicle:
      description: >-
        List of the coaches in a vehicle run ordered according to the physical
        ordering of the vehicle.
      type: array
      items:
        $ref: "#/components/schemas/Coach"

    Coach:
      type: object
      required:
        - number
        - layoutId
      properties:
        compartments:
          type: array
          items:
            $ref: "#/components/schemas/Compartment"
        number:
          description: coach number
          type: string
        status:
          $ref: "#/components/schemas/AvailabilityStatus"
        layoutId:
          description: id to identify the coach layout
          type: string
        layoutIdUpperDeck:
          description: id to identify a layout for the upper deck in a double deck coach
          type: string
        layoutIdLowerDeck:
          description: id to identify a layout for the lower deck in a double deck coach
          type: string
        direction:
          description: >-
            indication of the direction of travel standard direction is left
            to right with ascending coordinates in the layout values.
          type: string
          x-extensible-enum:
            - UNSPECIFIED
            - IN_DIRECTION
            - OPPOSITE_DIRECTION
            - CHANGING
            - STARING_IN_DIRECTION
        owner:
          $ref: "#/components/schemas/Company"
        specialCoach:
          type: string
          description: indication of special coach
          x-extensible-enum:
            - RESTAURANT_COACH
            - BICYCLE_COACH
            - LUGGAGE_COACH
            - TRAIN_HEAD

    Compartment:
      type: object
      description: >-
        Areas within a coach that holds places. Areas might be selectable
        as a whole. Usual areas would be classic compartments.
      properties:
        places:
          type: array
          items:
            $ref: "#/components/schemas/PlacePosition"
        status:
          type: string
        isSelectable:
          description: Indicates whether compartments are selectable as a whole only
          type: boolean
          default: false

    PlacePosition:
      type: object
      description: description of a place
      required:
        - number
        - status
      properties:
        number:
          description: place number as indicated at the place in the coach
          type: string
        status:
          $ref: "#/components/schemas/AvailabilityStatus"
        isNotSelectable:
          description: >-
            Flag to indicate individual places as non-selectable in
            case complete compartments must be selected.
          type: boolean
          default: false

    AvailabilityStatus:
      description: status of the place or coach
      type: string
      enum:
        - ALLOCATED
        - FREE
        - RESTRICTED
      default: FREE

    SelectedCoach:
      type: object
      properties:
        coachNumber:
          type: string
          description: selected coach in case of graphical booking
        places:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPlace"

    SelectedPlace:
      type: object
      description: selected place in case of graphical booking
      properties:
        passengerId:
          description: Id of the passenger
          type: string
        placeNumber:
          type: string

    PurchaserResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        purchaser:
          $ref: "#/components/schemas/Purchaser"

    Purchaser:
      type: object
      description: purchaser information
      required:
        - id
        - details
      properties:
        id:
          type: string
        externalRef:
          description: >-
            A stable reference to a purchaser from other elements, or from caller system.
            When received in input of a trip-offers-collection request, it must be echoed back in the
            response.
          type: string
        details:
          $ref: "#/components/schemas/PersonDetail"
        _links:
          $ref: "#/components/schemas/Link"

    PurchaserSpecification:
      type: object
      description: Minimal specification of a purchaser to request booking of an offer.
      required:
        - details
      properties:
        externalRef:
          description: >-
            A stable reference to a purchaser from other elements, or from caller system.
            When received in input of a trip-offers-collection request, it must be echoed back in the
            response.
          type: string
        details:
          $ref: "#/components/schemas/PersonDetail"

    PassengerResponse:
      type: object
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        passenger:
          $ref: "#/components/schemas/Passenger"

    Passenger:
      type: object
      description: passenger information needed at offering step
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: >-
            Id of the passenger resource in case service to patch a single passenger is provided.
        summary:
          type: string
          description: A human-readable description of the passenger.
          example: Andreas Schlapbach
        externalRef:
          description: >-
            A stable reference to a passenger from other elements, or from caller system.
            When received in input of a trip-offers-collection request, it must be echoed back in the
            response.
          type: string
        dateOfBirth:
          description: date of birth of the passenger
          type: string
          format: date
        type:
          $ref: "#/components/schemas/PassengerType"
        cards:
          description: reduction or loyalty cards owned by the passenger
          type: array
          items:
            $ref: "#/components/schemas/CardReference"
        gender:
          $ref: "#/components/schemas/Gender"
        details:
          $ref: "#/components/schemas/PersonDetail"
        passport:
          $ref: "#/components/schemas/IdentificationDocument"
        transportableDetails:
          $ref: "#/components/schemas/Transportable"
        prmNeeds:
          type: array
          description: >-
            For the persons with reduced mobility (PRMs) its specific needs for support are expressed.
          items:
            $ref: "#/components/schemas/PRMNeedType"
        _links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    PassengerSpecification:
      type: object
      description: >-
        Minimal specification of a passenger to request offers.
      required:
        - type
      properties:
        externalRef:
          description: >-
            A stable reference to a passenger from other elements, or from caller system.
            When received in input of a trip-offers-collection request, it must be echoed back in the
            response.
          type: string
          example: "TK-id-12345"
        type:
          $ref: "#/components/schemas/PassengerType"
        dateOfBirth:
          description: >-
            Date of birth of the passenger. Only needed for passengers of type persons, family child, PRM
            and wheelchair.
          type: string
          format: date
        cards:
          description: reduction or loyalty cards owned by the passenger
          type: array
          items:
            $ref: "#/components/schemas/CardReference"
        prmNeeds:
          type: array
          description: >-
            For the persons with reduced mobility (PRMs) its specific needs for support are expressed.
          items:
            $ref: "#/components/schemas/PRMNeedType"

    PassengerType:
      type: string
      description: >-
        Passenger type according to UIC passenger, i.e. passenger type list.
        See https://unioninternationalcheminsdefer.github.io/OSDM/spec/catalog-of-code-lists/
      x-extensible-enum:
        - DOG
        - PET
        - LUGGAGE
        - PRM
        - BICYCLE
        - PRAM
        - COMPANION_DOG
        - CAR
        - PERSON
        - MOTORCYCLE
        - TRAILER
        - FAMILY_CHILD
        - WHEELCHAIR
      example: PERSON
      default: PERSON

    PRMNeedType:
      type: string
      x-extensible-enum:
        - NEED_PRM_SUPPORT
        - WHEELCHAIR
        - ACCOMPANYING_DOG
        - COMPANION_SEAT
        - COMPANION

    PersonDetail:
      type: object
      description: >-
        Personal information potentially needed at booking step. To support privacy by design,
        it is not permitted to send personal information not required to create a valid booking.
      required:
        - firstName
        - lastName
      properties:
        preferredLanguage:
          type: string
          description: ISO-639-1 language code
        summary:
          type: string
          description: A human-readable description of the person.
          example: Andreas Schlapbach, Riedweg 4, 3074 Bern, schlpbch@gmail.com
        firstName:
          type: string
        lastName:
          type: string
        eMail:
          type: string
        phoneNumber:
          description: >-
            Preferably a mobile phone number, to be contacted in case changes to the booking occur, e.g.,
            in case of interruptions.
          type: string
        address:
          description: Address of the person, relevant for some pass holders
          $ref: "#/components/schemas/Address"

    Gender:
      type: string
      description: >-
        The gender of the passenger, which is important in the case of night trains.
      enum:
        - MALE
        - FEMALE
        - X

    Transportable:
      type: object
      description: >-
        Transportables which are handled similar to passengers like dogs, bicycles, car transport.
        These transportables might need a ticket or reservation.
      required:
        - type
      properties:
        type:
          description: >-
            Subset of the values from the passenger type code list IRS 90918-10
          type: string
          x-extensible-enum:
            - PET
            - BICYCLE
            - CAR
            - MOTOR_CYCLE
            - CAR_TRAILER
        car:
          $ref: "#/components/schemas/Car"
        motorCycle:
          $ref: "#/components/schemas/MotorCycle"
        trailer:
          $ref: "#/components/schemas/Trailer"

    Car:
      type: object
      required:
        - weight
        - length
        - width
        - height
        - model
      properties:
        weight:
          type: integer
          format: int32
          minimum: 0
        length:
          type: integer
          format: int32
          minimum: 0
        width:
          type: integer
          format: int32
          minimum: 0
        height:
          type: integer
          format: int32
          minimum: 0
        model:
          type: string
          description: Free text description of the model (e.g. BMW X5)
        attachedItems:
          description: Indication of items attached to the car
          type: array
          items:
            type: string
            x-extensible-enum:
              - ROOF_RACK
              - BICYCLE_STAND
        plate:
          description: >-
            The trailer plate is a personal data item and must not be provided in an offer request. 
            It must be patched into the offer after the customer accepted the offer for booking.
          type: string

    MotorCycle:
      type: object
      required:
        - isSideCarIncluded
      properties:
        isSideCarIncluded:
          type: boolean
          default: false
        plate:
          description: >-
            The trailer plate is a personal data item and must not be provided in an offer request. 
            It must be patched into the offer after the customer accepted the offer for booking
          type: string

    Trailer:
      type: object
      required:
        - weight
        - length
        - width
        - height
      properties:
        weight:
          description: weight in kg
          type: integer
          format: int32
          minimum: 0
        length:
          description: length in cm
          type: integer
          format: int32
          minimum: 0
        width:
          description: width in cm
          type: integer
          format: int32
          minimum: 0
        height:
          description: length in cm
          type: integer
          format: int32
        plate:
          description: >-
            The trailer plate is a personal data item and must not be provided in an offer request. 
            It must be patched into the offer after the customer accepted the offer for booking
          type: string

    IdentificationDocument:
      type: object
      description: >-
        Travel document data to be exchanged for border control in case of legal requirements
        PassengerDetails providing personal information only information required in the offer. 
        It is not allowed to send personal information not required in the offer reply. 
        It is legally not allowed to send these personal data already in the offer request.
      required:
        - id
        - type
      properties:
        id:
          description: Identifier on the document.
          type: string
        type:
          description: Refer to code list for values
          type: string
        name:
          description: ICAO transliteration identical as written in the document
          type: string
        nationality:
          description: ISO 3166 2A codes
          type: string
        birthCity:
          type: string
        issuingCity:
          description: place where the document is issued
          type: string
        residenceCity:
          type: string
        birthCountryCode:
          $ref: "#/components/schemas/CountryCode"
        issuingCountryCode:
          $ref: "#/components/schemas/CountryCode"
        residenceCountryCode:
          $ref: "#/components/schemas/CountryCode"
        issuingDate:
          type: string
          format: date-time
        gender:
          $ref: "#/components/schemas/Gender"
        expirationDate:
          type: string
          format: date

    CardReference:
      type: object
      required:
        - types
        - code
      properties:
        types:
          description: Types of card. One card can have multiple roles, such as loyalty and reduction
          type: array
          items:
            $ref: "#/components/schemas/CardType"
        code:
          description: Code of the card type according to issuer.
          type: string
        name:
          description: Card name for printing on fulfillments.
          type: string
        number:
          description: Unique number identifying the card.
          type: string
        issuer:
          $ref: "#/components/schemas/Company"

    CardType:
      type: string
      x-extensible-enum:
        - REDUCTION_CARD
        - LOYALTY_CARD
        - CHIP_CARD
        - PASS
      default: REDUCTION_CARD

    PaymentType:
      type: string
      x-extensible-enum:
        - CASH
        - INVOICE
        - VOUCHER
        - CARD
        - E_PAYMENT
        - DIRECT_DEBIT

    VoucherInformation:
      type: object
      required:
        - code
        - issuer
      properties:
        code:
          description: voucher code provided by the issuer
          type: string
        issuer:
          $ref: "#/components/schemas/Company"

    PaymentMethod:
      type: object
      description: >-
        Method of payment used by the customer to the distributor. On input of voucher the money attribute will not be present
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/PaymentType"
        voucherInformation:
          $ref: "#/components/schemas/VoucherInformation"
        money:
          $ref: "#/components/schemas/Price"

    Quantity:
      type: object
      description: Generic quantity entity
      properties:
        value:
          type: number
          format: float
        unit:
          description: Unit of the measured quantity
          type: string
          example: "kg"

    #### Common elements end
