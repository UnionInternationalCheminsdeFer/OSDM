openapi: 3.0.3
servers:
  - description: fsm dummy server
    url: 'https://virtserver.swaggerhub.com/Real-IT/FSM_MVP/1.0.0'
info:
  title: UIC 90918-10 - OSDM
  version: 0.9.8
  description: |
    Specifications for the OSDM API standard. The OSDM specification supports two
    modes of operation: Distributor Mode and Allocator Mode. The API works the same in 
    both mode, except that in allocator mode the API also returns fare information.
    The OSDM specification combines the allocator and distributor modes into one aligned
    API interface.
  contact:
    name: Nicolas Selleslagh, Clemens Gantert and Andreas Schlapbach
    url: https://confluence.sbb.ch/display/FSM20
    email: Nicolas.Selleslagh@benerail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Trips
    description: >-
      resources to search for trips and locations
  - name: Offers
    description: >-
      resources to get bookable offers
  - name: Offer Parts
    description: >-
      resources to manipulate parts of an offer consisting of, e.g., admissions, reservations,
      or ancillaries; if permitted, also fares are offered. 
  - name: Bookings
    description: >-
      resources to manipulate bookings
  - name: Passengers
    description: >-
      resources to manipulate a passenger's information at every stage of the flow
  - name: Products
    description: >-
      resources to retrieve products information on one or more products
  - name: Fulfillments  
    description: >-
      resources to retrieve fulfillments, e.g. tickets
  - name: RefundOffers
    description: >-
      resources to get and accept a refund offer
  - name: ExchangeOffers
    description: >-
      resources to get and accept an exchange offer
  - name: CoachLayouts
    description: >-
      resources to get the layout of a coach
paths:
  /locations:
    get:
      tags:
        - Trips
      summary: >-
        The GET locations service returns matching locations for a given match value based on MatchType.
      operationId: getLocations
      parameters:
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - name: access-token 
          in: header
          required: true
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          schema:
            type: string
        - name: matchValue
          in: query
          schema:
            type: string
          required: true
        - name: matchType
          in: query
          description: >-
            Defines the search token type in matchValue (TEXT for names;
            ANY_CODE fallbacks to the code supported by the underlying system
            (like UIC, EVA or RESARAIL); UIC/EVA/RESARAIL forces stations
            defined by the appropriate code-system explicitly (national
            aspect); COORDS given as "lat,lon").
          schema:
            type: string
            default: NAME
            enum:
              - NAME
              - ANY_CODE
              - CODE_LIST
              - COORDS
        - name: codeListForMatch
          in: query
          description: >-
            In case match-value is CODE_LIST, indicates the code-list to search into for the matchValue
          schema:
            type: string
          required: false
        - name: countryCode
          in: query
          description: >-
            Search locations for a specific country (ISO 3166, 2-chars). Meant
            for autocomplete functionality. A separate endpoint or channel would
            be provided for mass downloads
          required: false
          schema:
            $ref: '#/components/schemas/CountryDef'
        - name: limit
          in: query
          description: 'The number of locations to be returned ([1..50]).'
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only. 
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - NONE
            default: ALL
      responses:
        '200':
          description: the set of stations matching the provided input
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  locations:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/LocationRef'
                        - $ref: '#/components/schemas/Location'
                    description: >-
                      Depending on the embed either references or full location definitions are returned. 
        '400':
          description: bad input parameter
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
                
  '/locations/{locationId}':
    get:
      tags:
        - Trips
      summary: >-
        The GET locations service retrieves a location element.
      operationId: getLocationsId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: locationId
          schema:
            type: string
            description: opaque and unique (on this server) id for the location
           
          required: true
          description: ID of the location resource to be retrieved.
      responses:
        '200':
          description: the retrieved location resource
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'public, max-age=43200'
                description: >-
                  A location resource is persistent and has a long time to live to allow long-term caching. Any update of
                  the location information leads to the creation of a new resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  location:
                    $ref: '#/components/schemas/Location'
        '400':
          description: bad input parameter
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
  '/trips/{tripId}':
    get:
      tags:
        - Trips
      summary:
        The GET trips service retrieves a trip element representing a train travel made of one or more
        segments. Depending on the embed either references or full location definitions will be returned.
      operationId: getTripsId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: tripId
          schema:
            type: string
            description: unique (on this server) and opaque id of the trip
          required: true
          description: ID of the trip to get.
        - in: query
          name: stopBehavior
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
              - ORIGIN_DESTINATION_ONLY
              - REAL_BOARDING_ALIGHTING
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only. 
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - NONE
            default: ALL
      responses:
        '200':
          description: the requested trip
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'public, max-age=10000'
                description: >-
                  A trip resource is fairly persistent and has a medium time to live to allow short-term caching.
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  trip:
                    $ref: '#/components/schemas/Trip'
        '400':
          description: bad input parameters
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
  '/trips-collection/{tripsCollectionId}':
    get:
      tags:
        - Trips
      summary: >-
        The GET trips-collection service returns a collection of different trips for a specified
        origin and destination (and via). The unique codes of the origin and
        destination can be resolved using the locations service.
      operationId: getTripsCollectionId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation 
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: tripsCollectionId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the trip to get.
        - name: scrollContext
          in: query
          description: >-
            Based on a previous search-response, earlier or later connections
            for the same trip can be retrieved by scrolling back and forth (by
            a pointer-context). You must use the same request parameters as in
            the original trips-request and the given values in the response for
            either "scrollBackContext" or "scrollForwardContext" for optional
            scrolling.
          schema:
            type: string
          required: false
        - in: query
          name: stopBehavior
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
              - ORIGIN_DESTINATION_ONLY
              - REAL_BOARDING_ALIGHTING
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only. 
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - TRIPS
                - TRIPS.LOCATIONS
                - NONE
            default: ALL
      responses:
        '200':
          description: Trip(s) found
          
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  tripsCollection:
                    $ref: '#/components/schemas/TripsCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /trips-collection:
    post:
      tags:
        - Trips
      summary: >-
        The GET tripsCollection service returns different trips for a specified
        origin and destination (and via). The unique codes of the origin and
        destination can be resolved using the locations service.
      operationId: postTripsCollection
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4).
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripRequest'
      responses:
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  tripsCollection:
                    $ref: '#/components/schemas/TripsCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /trip-offers-collection/{tripOffersCollectionId}:
    get:
      tags:
        - Offers
      summary: >-
        The GET tripOffersCollection service returns different offers and trips for a
        specified origin and destination (and via). The unique codes of the
        origin and destination can be resolved using the locations service.
      operationId: getTripOffersCollectionId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: tripOffersCollectionId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the trip to get.
        - name: scrollContext
          in: query
          description: >-
            Based on a previous search-response, earlier or later connections
            for the same trip can be retrieved by scrolling back and forth (by
            a pointer-context). You must use the same request parameters as in
            the original trips-request and the given values in the response for
            either "ScrollBack-Context" or "ScrollForward-Context" for optional
            scrolling.
          schema:
            type: string
          required: false
        - in: query
          name: stopBehavior
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops within a segment;
            ALL_STOPS returns additionally intermediate stops within segments).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
              - ORIGIN_DESTINATION_ONLY
              - ALL_STOPS                    
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only. 
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - TRIPOFFERS
                - TRIPOFFERS.TRIPS
                - TRIPOFFERS.TRIPS.LOCATIONS
                - TRIPOFFERS.OFFERS
                - TRIPOFFERS.OFFERS.OFFERPARTS
                - TRIPOFFERS.PASSENGERS
                - NONE
            default: [ALL]
      responses:
        '200':
          description: Trip Offer Collection(s) found
          content:
            application/json:
              schema:
               type: object
               properties:
                 warnings:
                   $ref: '#/components/schemas/WarningMessageList'
                 tripOffersCollection:
                   $ref: '#/components/schemas/TripOffersCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'          
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
          
  /trip-offers-collection:
    post:
      tags:
        - Offers
      summary: >-
        The POST tripsOffersCollection service returns different trip offers for a
        specified origin and destination (and via) locations. 
      operationId: postTripOffersCollection
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4).
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripOfferRequest'
      responses:
        '200':
          description: Collection of trip offers found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  tripOffersCollection:
                    $ref: '#/components/schemas/TripOffersCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error        
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /trip-offers/{tripOfferId}:
    get:
      tags:
        - Offers
      summary: >-
        The GET trip-offers service returns different offers for a specified trip offer id.
      operationId: getTripOffersId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response 
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false  
        - in: path
          name: tripOfferId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the trip to get.
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only. 
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL              
                - TRIPS
                - TRIPS.LOCATIONS
                - OFFERS
                - OFFERS.OFFERPARTS
                - PASSENGERS
                - NONE
              default: ALL
      responses:
        '200':
          description: Trip offer found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  tripOffer:
                    $ref: '#/components/schemas/TripOffer'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'         
        '501':
          description: Not implemented     
          
          
  '/offers/{offerId}':
    get:
      tags:
        - Offers
      summary: >-
         The GET offers service returns the offer with the requested included sub resources in a given state.
      operationId: getOffersId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the trip to get.
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - OFFERPARTS
                - TRIP
                - TRIP.LOCATIONS
                - NONE
              default: ALL
      responses:
        '200':
          description: Offer found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  offer:
                    $ref: '#/components/schemas/Offer'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
         
  '/offers/{offerId}/passengers/{passengerId}':
    get:
      tags:
        - Passengers
      summary: >-
       The GET passenger service returns the passenger's information.
      operationId: getOfferPassengersId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer the passenger is in.
        - in: path
          name: passengerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the passenger to get.
      responses:
        '200':
          description: Passenger found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - Passengers
      summary: 
        The PATCH passenger service allows updating a passenger's information.
      operationId: patchOfferPassenger
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer the passenger is in.
        - in: path
          name: passengerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the passenger to get.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passenger'
      responses:
        '200':
          description: Passenger successfully patched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  
  '/bookings/{bookingId}/passengers/{passengerId}':
    get:
      tags:
        - Passengers
      summary: >-
       The GET passenger service returns the passenger's information.
      operationId: getBookingPassengersId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking the passenger is in.
        - in: path
          name: passengerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the passenger to get.
      responses:
        '200':
          description: Passenger found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - Passengers
      summary: 
        The PATCH passenger service allows updating a passenger's information.
      operationId: patchBookingPassenger
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking the passenger is in.
        - in: path
          name: passengerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the passenger to get.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passenger'
      responses:
        '200':
          description: Passenger successfully patched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/products/{productId}':
    get:
      tags:
        - Products
      summary: >-
        The GET product service returns the information on products with the id provided.
      operationId: getProductsId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: productId
          schema:
            type: string
            description: unique and opaque ID of the product
          required: true
          description: ID of the product to get.
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'public, max-age=43200'
                description: >-
                  A product resource has a long time to live to allow long-term caching. Any update of the product 
                  information will lead to the creation of a new resource.
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/offers/{offerId}/admissions/{admissionId}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The GET admission service returns the information on the admission with the id provided.
      operationId: getAdmissionId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: admissionId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the admission to get.
      responses:
        '200':
          description: Admission found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  admission:
                    $ref: '#/components/schemas/Admission'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/offers/{offerId}/reservations/{reservationId}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The GET reservation service returns the information on the reservation with the id provided.
      operationId: getReservationsId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: reservationId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the reservation to get.
      responses:
        '200':
          description: Reservation found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  reservation:
                    $ref: '#/components/schemas/Reservation'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - Offer Parts
      summary: >-
        The PATCH of the place selections service allows updating reservation elements, to update the desired
        selection of places and to retrieve selectable places for a graphical display
      description: >-
        The patch can be used to update the selection of place properties, the available places for graphical 
        displays, the selected optional place properties for a subsequent booking and the selected places from
        a graphical display. The update response will show the available/accepted properties. An update with
        empty available places will update the available places list in the reply.
      operationId: patchReservationId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer to patch.
        - in: path
          name: reservationId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the reservation to patch.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationPatch'
      responses:
        '200':
          description: Place successfully selected
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  reservation:
                    $ref: '#/components/schemas/Reservation'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented        
  
  '/offers/{offerId}/ancillaries/{ancillaryId}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The GET ancillaries service returns the information on the ancillary with the id provided.
      operationId: getAncillariesId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: ancillaryId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the ancillary to get.
      responses:
        '200':
          description: Ancillary found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  ancillary:
                    $ref: '#/components/schemas/Ancillary'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

  '/offers/{offerId}/fares/{fareId}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The GET fares service returns the information on the ancillary with the id provided.
      description: >-
        For the fares only the start and the end location are considered.
        Fares are only returned if the API is called as allocator with the correct grants.
        Otherwise a forbidden message is returned. 
      operationId: getFaresId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: fareId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the fares to get.
      responses:
        '200':
          description: Fare found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  fare:
                    $ref: '#/components/schemas/FareOnlineDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - Offer Parts
      summary: >-
        The PATCH of the place selections service allows updating reservation elements, to update the desired
        selection of places and to retrieve selectable places for a graphical display
      description: >-
        The patch can be used to update the selection of place properties, the available places for graphical 
        displays, the selected optional place properties for a subsequent booking and the selected places from
        a graphical display. The update response will show the available/accepted properties. An update with
        empty available places will update the available places list in the reply.
      operationId: patchFareId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer to patch.
        - in: path
          name: fareId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the fare to patch.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FareOnlineDef'
      responses:
        '200':
          description: Place successfully selected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented        
 

  /bookings/search:       
    post:
      tags:
        - Bookings
      summary: >-
        *** NOT-MVP *** The POST bookings search service allows to search for and find bookings based on a set of criteria. It
        returns a list of booking ids.
      description: >-
        There are searching criteria that need to be supported. by passenger 
        attributes (first name, name, date-of-birth), by booking reference (e.g. PNR, 
        Auftragsnummer) or by fulfillment reference (e.g. ticket number).
      operationId: getBookings
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - BOOKINGS
                - BOOKINGS.BOOKEDOFFERS.TRIP
                - BOOKINGS.BOOKEDOFFERS.TRIP.LOCATIONS
                - BOOKINGS.BOOKEDOFFERS
                - BOOKINGS.BOOKEDOFFERS.OFFERPARTS
                - BOOKINGS.PASSENGERS
                - BOOKINGS.TICKETS  
                - NONE
              default: ALL
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingSearchParameterDef'          
      responses:
        '200':
          description: Booking ids found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  searchResults:
                    $ref: '#/components/schemas/BookingSearchReplyDef'  
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/bookings':       
    post:
      tags:
        - Bookings
      summary: >-
        The POST bookings create service allows to create a booking based on a previously requested offer. 
        The offer id is provided in the query.
      operationId: postBookings
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4). 
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'      
      responses:
        '200':
          description: >- 
            Booking prebooked
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  booking:
                    $ref: '#/components/schemas/Booking'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

  '/bookings/{bookingId}':
    get:
      tags:
        - Bookings
      summary: >-
        The GET booking service returns the information on the booking with the id provided.
      operationId: getBookingsId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the product to get.
        - in: query
          name: embed
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - BOOKEDOFFERS.TRIP
                - BOOKEDOFFERS.TRIP.LOCATIONS
                - BOOKEDOFFERS
                - BOOKEDOFFERS.OFFERPARTS
                - PASSENGERS
                - TICKETS
                - REFUND_PROPOSITIONS
                - NONE
              default: ALL
      responses:
        '200':
          description: booking found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  booking:
                    $ref: '#/components/schemas/Booking'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    delete:
      tags:
        - Bookings
      summary: >-
        The DELETE booking service deletes the booking with the id provided. It
        is only possible before the booking is confirmed or in case of a technical problem in confirming multiple independent bookings within a sales transaction. Deletes on a confirmed booking must be documented and evidence on the issue must be provided on request. The delete on a confirmed booking is allowed immediately after the confirmation of the booking, but must be repeated according to the error handling rules in case the delete fails.
      operationId: deleteBookingsId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking to delete.
      responses:
        '200':
          description: Booking successfully cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: >-
             Conflict - the state of the server or resource does not allow the action (e.g. the booking was already confirmed)
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'          
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - Bookings
      summary: >-
        The PATCH bookings service allows updating the fulfillment type of the booking
      operationId: confirmBooking
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking to be patched      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingPatchRequest'
      responses:
        '200': 
          description: booking fulfillment type updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  booking:
                    $ref: '#/components/schemas/Booking'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
   
  '/bookings/{bookingId}/fulfillments':
    post:
      tags:
        - Fulfillments
      summary: >-
        The POST fulfillments service triggers the fulfillment of the booking based on the information 
        currently contained in the provided booking.
      operationId: postFulfillments
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking to be patched        
      responses:
        '200':
          description: >-
            Fulfillment successfully completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  fulfillments:
                    $ref: '#/components/schemas/FulfillmentsDef'
        '202': 
          description: >- 
            Fulfillment successfully initiated, retrieve booking to retrieve the fulfillment documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: >-
             Conflict - the state of the server or resource does not allow the action (e.g. the booking was not confirmed)
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'            
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - Fulfillments
      summary: >-
        The PATCH fulfillments service allows the effective fulfillment of one ore more confirmed fulfillment. 
      operationId: patchFulfillment
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking to be patched        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FulfillmentsPatch'
      responses:
        '200':
          description: >-
            Fulfillment successfully completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  fulfillments:
                    $ref: '#/components/schemas/FulfillmentsDef'
        '202': 
          description: >- 
            Fulfillment successfully initiated, retrieve booking to retrieve the fulfillment documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: >-
             Conflict - the state of the server or resource does not allow the action (e.g. the booking was not confirmed)
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'            
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/fulfillments/{fulfillmentId}':
    get:
      tags:
        - Fulfillments
      summary: >-
        The GET ticket service returns the information on the ticket with the id provided.
      operationId: getFulfillmentId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: fulfillmentId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the product to get.
      responses:
        '200':
          description: fulfillment found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  fulfillment:
                    $ref: '#/components/schemas/Fulfillment'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/bookings/{bookingId}/refundOffers':
    post:
      tags:
        - RefundOffers
      summary: >-
        The POST refundOffers initiates a refund process by creating a RefundOffer resource
        containing the needed information on the potential operation. One refund offer can then be 
        accepted via a PATCH, deleted or left to die at the end of its lifetime.
      operationId: postRefundOffersBookingId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking.      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundOfferRequest'
      responses:
        '200': 
          description: Refund offer created
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  refundOffersCollection:
                    $ref: '#/components/schemas/RefundOffersCollection'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: >-
             Conflict - the state of the server or resource does not allow the action (e.g. the booking was not confirmed)
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'            
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
        
  '/bookings/{bookingId}/refundOffers/{refundOfferId}':
    get:
      tags:
        - RefundOffers
      summary: >-
        The GET refundOffer service returns the refund offer with the id provided.
      operationId: getRefundOffersId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking  
        - in: path
          name: refundOfferId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the refund offer to get.
      responses:
        '200':
          description: RefundOffer found
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  refundOffer:
                    $ref: '#/components/schemas/RefundOffer'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

    patch:
      tags:
        - RefundOffers
      summary: >-
        The PATCH refundOffers action allows to accept and confirm a refund operation. 
      operationId: patchRefundOffersId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer the offerPart is part of.      
        - in: path
          name: refundOfferId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the product to get.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundOfferConfirm'
      responses:
        '200':
          description: RefundOffer confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  refundOffer:
                    $ref: '#/components/schemas/RefundOffer'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    delete:
      tags:
        - RefundOffers
      summary: >-
        The DELETE refundOffers action allows to cancel a refundOffer without waiting for expiry. 
      operationId: deleteRefundOffersId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer the offerPart is part of.      
        - in: path
          name: refundOfferId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the product to delete.
      responses:
        '200':
          description: RefundOffer removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  fulfillments:
                    $ref: '#/components/schemas/FulfillmentsDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/bookings/{bookingId}/exchangeOffers':
    post:
      tags:
        - ExchangeOffers
      summary: >-
        *** NOT-MVP *** The POST exchangeOffers initiates an exchange process by creating a ExchangeOffer resource
        containing the needed information on the potential operation. The proposition can then be 
        accepted via a PATCH, deleted or left to die at the end of its lifetime. 
      operationId: postExchangeOffersBookingId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the offer the offerPart is part of.      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExchangeOfferRequest'
      responses:
        '200': 
          description: Refund offer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeOffersCollectionDef'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented   
          
  '/bookings/{bookingId}/exchangeOffers/{exchangeOfferId}':          
    patch:
      tags:
        - ExchangeOffers
      summary: >-
        *** NOT-MVP *** The PATCH exchangeOffers action allows to accept and confirm an exchange operation. 
      operationId: patchExchangeOffersId
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking to be exchanged.  
        - in: path
          name: exchangeOfferId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the exchange offer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExchangeOfferConfirmDef'
      responses:
        '200':
          description: Exchange successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

  '/coachLayouts':
    get:
      tags:
        - CoachLayouts 
      description: get coach layouts
      summary: >-
        *** NOT-MVP ***Retrieve the coach layout description needed for graphical reservation    
      operationId: getCoachLayouts
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response 
            to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
      responses:
        '200':
          description: coach layouts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayoutsDef'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

  '/offers':
    post:
      tags:
        - Offers 
      description: >- 
        Get offers based on key words or regional information not linked to trips
      summary: >-
        Get offers not linked to trips based on key words or regional information (e.g. for passes or seasonal tickets)          
      operationId: searchOffers
      parameters:
        - name: access-token 
          in: header
          description: >-
            OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
            for information on how to get a token.
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred for localized text in the response to the request (see RFC2616-sec14.4). 
            Supporting English (en) is a must.
          schema:
            type: string
          required: false
        - in: query
          name: version
          description: schema version
          required: true
          schema:
            type: string
      requestBody:
        description: request parameter for offer search
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferSearchDef'
      responses:
        '200':
          description: offer collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    $ref: '#/components/schemas/WarningMessageList'
                  nonTripOfferCollection:
                    $ref: '#/components/schemas/NonTripOfferCollectionDef'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

## Components
components:
  schemas:
    WarningMessageList:
      type: array
      items:
        type: object
        properties:
          code:
            type: string
          text:
            type: string
          elementList:
            type: array
            items:
              $ref: '#/components/schemas/ResourceRef'
        description: >-
         This element can be used to pass non-blocking information or events,
         such as a price difference with the initially offered price at booking time.
    ResourceRef:
      type: object
      properties:
        id:
          type: string
          description: unique id of this resource on this server.
        type:
          type: string
          enum:
            - LOCATION
            - TRIP
            - TRIPOFFER
            - OFFER
            - OFFERPART
            - PASSENGER
            - BOOKING
            - FULFILLMENT
            - REFUNDOFFER
        href:
          type: string
          format: url
          example: 'http://some.provider/location/2345'
        title:
          type: string
          example: Bruxelles-Midi    
      description: used to represent a non-specified resource in the API.
    
    BookingSearchParameterDef:
      type: object
      description: >-
        parameter to be used to search for a booking. Contains personal data. 
        For a search via personal data an exact match of all elements 
        - first name, last name and date of birth - is mandatory. 
        In case a ticket holder is indicated the parameter must match the ticket holder. 
        TODO - legal check by CIT
      properties:
        passengerFirstName:
          type: string
          description: >-
            First name of a passenger in the booking.      
        passengerLastName:
          type: string
          description: >-
            Last name of a passenger in the booking.
        passengerDateOfBirth:
          type: string
          format: date
          description: >-
            Date of birth of a passenger in the booking.
        bookingReference:
          type: string
          format: date
          description: >-
            Human-readable booking reference for the booking, e.g. PNR.
        fulfillmentReference:
          type: string
          description: >-
            Human-readable fulfillment reference for the booking, e.g. ticket number.
        travelDateBegin:
          type: string
          format: date-time
          description: >-
            Begin date for the travel date range to search.
        travelDateEnd:
          type: string
          format: date-time
          description: >-
            End date for the travel date range to search.
        originId: 
          $ref: '#/components/schemas/LocationRef'
        destinationId:
          $ref: '#/components/schemas/LocationRef'

    BookingSearchReplyDef:
      type: object
      description: >-
        Reply on a search for bookings
      properties:
        bookings:
          type: array
          items: 
            oneOf:
            - $ref: '#/components/schemas/BookingRef'
            - $ref: '#/components/schemas/Booking'

    Link:
      type: object
      description: >-
        The underlying system may provide additional links pointing on further
        information (such as HTML download links, web sites or extended APIs).
        Mechanism to add flexible extensions specific to an underlying system.
      properties:
        contentTypes:
          type: array
          example: '["application/json", "application/pdf"]'
          description: Possible content types of the resource.
          items:
            type: string
        href:
          type: string
          format: uri
          description: URL to the linked resource (no parameters needed).
          example: 'https://www.brussels.info/train-stations/'
        method:
          type: string
          example: GET
          description: HTTP method to call the action
        relation:
          type: string
          example: Get Map
          description: Relation of this link to the current entity.
        version:
          type: integer
          format: int32
          example: 1
          description: Version of the current relation.
      required:
        - contentTypes
        - href
        - relation
        
    Segment:
      type: object
      description: >-
        A segment represents a subsection of a trip that is realized with the same transport. In railways it is typically one
        train (between the moment traveller steps on-board until stepping out of that train), but could be using a different means
        of transportation. 
      properties:
        index:
          type: integer
          format: int32
          description: sequence number of the segment in the ordering of all segments of the trip
        origin:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
          description: departure point of the segment
        destination:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
          description: arrival point of the segment
        duration: 
          description: duration of the segment in  ISO 8601 Durations
          type: string
          example: P2DT3H4M
        transfer:
          description: Transfer to the next vehicle not included in the request
          type: object
          properties:
            duration:
              description: Duration forseen to transfer to the next section  ISO 8601 Durations
              type: string
              example: P2DT3H4M
            transferType:
              description: 'WALK,... refer to the transfer type code list'
              type: string
          required:
            - duration
            - transferType
        vehicle:
          type: object
          properties:
            numbers:
              description: >-
                Id of the vehicle, In case of two train s running in parallel
                there might be two train numbers.
              type: array
              items:
                type: string
            line:
              description: >-
                Line number in case the vehicle does not have a number
              type: string
            serviceBrand:
              $ref: '#/components/schemas/ServiceBrandCodeDef'
            transportMode:
              description: >-
                Transport mode (code list of MERITS). Optional for offer
                requests, included for alignment with FSM
              type: string
        stops:
          description: >-
            The list of stops encountered between origin and destination. origin is the first stop mentioned and destination the last 
            one. This list is only returned when the stopBehavior is set to REAL_BOARDING_ALIGHTING
          type: array
          items:
            type: object
            properties:
              station:
                oneOf:
                  - $ref: '#/components/schemas/LocationRef'
                  - $ref: '#/components/schemas/Location'
              departureDateTime:
                description: date and time in the time zone of the station
                type: string
                format: date-time
              arrivalDateTime:
                description: date and time in the time zone of the station
                type: string
                format: date-time
              index:
                type: integer
                format: int32
                example: 5
                description: >-
                  Unique value [0..*] within the segment, guaranteeing an
                  ascending order, though the value may jump non-continuously.
              departureTrack:
                type: string
                example: 13A
                description: >-
                  The info about the departure-track of the stop. Format depends
                  on operator.
              arrivalTrack:
                type: string
                example: 13B
                description: >-
                  The info about the arrival-track of the stop. Format depends
                  on operator.
            description: >-
              Represents a location or station. Either a departure, arrival
              or intermediate stop along a segment of a trip.
            required:
              - station
      required:
        - seqId
        - vehicle
      
    StationDetailsDef:
      type: object
      description: >-
        Details of a station. In some countries stations have
        multiple names depending on the countries local languages.
      properties:
        localCode:
          description: code unique with in the country only
          type: string
        country:
          $ref: '#/components/schemas/CountryDef'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/StationCode'
          description: >-
            The codes that can be used to represent the given station on the system.
            There can be several codes, in which case  it is relevant to have a list
            of couples.
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'
        names:
          description: names of the station depending on language
          type: array
          items:
            $ref: '#/components/schemas/TranslationDef'
      required:
        - country
        - codes
    
    StationCode:
      type: object
      properties:
        codeList:
          $ref: '#/components/schemas/StationCodeListDef'
        code:
          type: string
          description: the code representing the station in the specified code-list     
      required:
        - code
        - codeList
    
    LocationRef:
      type: object
      properties:
        id:
          type: string
          description: unique id of this location on this server.
        href:
          type: string
          format: url
          example: 'http://some.provider/location/2345'
        title:
          type: string
          example: Bruxelles-Midi

    Location:
      type: object
      properties:
        id:
          type: string
          description: unique id of this location on this server.
        type:
          oneOf:
            - $ref: '#/components/schemas/StationDetailsDef'
            - $ref: '#/components/schemas/Poi'
            - $ref: '#/components/schemas/Address'
            - $ref: '#/components/schemas/GeoCoordinate'
        links:
          type: array
          description: Context information required by the services.
          items:
            $ref: '#/components/schemas/Link'
      required:
        - id
     
    StationCodeListDef:
      description: >-
        Code list used for the station codes: UIC = UIC codes as used by merits
        (UIC country code + local code) = Default// UIC-R = UIC codes for
        reservation (UIC country code + local code reservation) // ERA = future
        ERA station code
      type: string
      default: UIC

    Address:
      type: object
      description: used to encode an address using the standard street address attributes
      properties:
        street_nr:
          type: string
          description: the street name and house number (if applicable)
          example: Segantinistrasse 23
        city:
          description: city
          type: string
          example: Bern
        postalCode:
          description: postal code
          type: string
          example: 3006
        country:
          $ref: '#/components/schemas/CountryDef'
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'
      required:
         - street
         - city
         - postalCode

    PoiCodeList:
      description: Code list used for the POI codes.
      type: string
      default: UIC

    TripRef:
      type: object
      properties:
        id:
          type: string
          description: unique id of this trip on this server.
        href:
          type: string
          format: url
          example: 'http://some.provider/trip/2345'
        title:
          type: string
          example: Bruxelles-Midi - Paris-Nord 2020/07/01 10:05

    Trip:
      type: object
      properties:
        id:
          type: string
          description: unique id of this trip on this server.
        segments:
          type: array
          items:
            $ref: '#/components/schemas/Segment'
        origin:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
        destination:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
        duration:
          type: string
          description: >-
            Total duration over all segment's (format see
            https://www.w3.org/TR/xmlschema11-2/#duration)
          example: P2DT3H4M
        direction:
          description: indicates the trip direction
          type: string
          x-extensible-enum:
            - SINGLE
            - OUTWARD
            - INWARD
            - UNSPECIFIED
          default: UNSPECIFIED
        links:
          type: array
          description: Context information required by the services.
          items:
            $ref: '#/components/schemas/Link'
      required:
        - id  
        - origin
        - destination

    ServiceBrandCodeDef:
      description: >-
        Service brand codes allowed in response, code list can be found on 
        [https://uic.org/passenger/passenger-services-group/article/service-brand-code-list]
        (https://uic.org/passenger/passenger-services-group/article/service-brand-code-list)
      type: integer
      format: int32

    Poi:
      type: object
      description: >-
        POI (for point of Interest) represent a location that is not a train station but still relevant to the 
        description of the trip. It could be a public transport stop, an exhibition, an event hall, a shopping mall etc.
      properties:
        codes:
          type: array
          items:
            type: object
            properties:
              codeList:
                $ref: '#/components/schemas/PoiCodeList'
              poiCode:
                type: string
                description: the code representing the POI in the specified code list
          description: >-
            The codes that can be used to represent the given POI on the system. There can be several codes, 
            in which case it is relevant to have a list of couples.
        country:
          $ref: '#/components/schemas/CountryDef'
        names:
          description: names of the point of interest depending on language
          type: array
          items:
            $ref: '#/components/schemas/TranslationDef'
          example: Bern Baerengraben (Denkmal), 'DE'
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'
      required:
        - localCode
      
    TripsCollection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tripsCollection:
          type: array
          items:
            oneOf:
             - $ref: '#/components/schemas/TripRef'
             - $ref: '#/components/schemas/Trip'
        scrollBackContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll backward. 
            (Value depends on underlying system.)
        scrollForwardContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll forward.
            (Value depends on underlying system.)
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - id
        - tripsCollection

    GeoCoordinate:
      type: object
      description: >-
        Used to provide any geo-encoded location, regardless of environment, using longitude and latitude coordinates.
      properties:
        system:
          description: >-
            geo coordinate system indication: 
             - WGS84 = WGS 84 standard system,
             - GRS80 = (outdated) GRS 80 coordinate system
          type: string
          x-extensible-enum:
            - WGS84
            - GRS80
          default: WGS84
        accuracy:
          description: accuracy of the provided coordinates to be used when comparing coordinates
          type: number
          format: float
          example: 0.00002
        latitude:
          description: >-
            Geographic coordinate that specifies the north-south position of a point on the earths surface
          type: number
          format: float
          example: 46.948825
        longitude:
          description: >-
            Geographic coordinate that specifies the east-west position of a point on the earths surface.            
          type: number
          format: float
          example: 7.439122
      required:
        - latitude
        - longitude
      
    TripRequest:
      type: object
      properties:
        tripSearchCriteria: 
          $ref: '#/components/schemas/TripSearchCriteria'
        embed:
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          type: array
          items:
            type: string
            enum:
              - TRIPS
              - TRIPS.LOCATIONS
              - NONE
              - ALL
            default: ALL
            
    TripSearchCriteria:
      type: object
      properties:
        stopBehavior:
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          type: string
          default: ORIGIN_DESTINATION_ONLY
          enum:
            - ORIGIN_DESTINATION_ONLY
            - REAL_BOARDING_ALIGHTING
        origin:
          oneOf:
            - $ref: '#/components/schemas/StationCode'
            - type: string
              format: uuid
              description: id of the location to use as origin
        destination:
          oneOf:
            - $ref: '#/components/schemas/StationCode'
            - type: string
              format: uuid
              description: id of the location to use as destination
        viaValues:
          description: >-
            Ordered list of via locations within the trip. Unique code value has
            to be set according to valueType. Max number of via stations depends on the
            underlying system.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/StationDetailsDef'
              - type: string
                format: uuid
                description: id of the location to use as origin
        travelDateTime:
          type: string
          format: date-time
        isArrival:
          description: >-
            Defines whether or not the given travel date/time is the latest
            arrival (true arriving at given time; false departing at given
            time).
          type: boolean
          default: false
        transportMode:
          description: >-
            transport mode (code list of MERITS). Optional for offer requests, included for alignment with FSM. If not set, no restriction is applied
          type: array
          items:
            type: string
        serviceBrands:
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
        maxChanges:
          description: >-
            Max amount of transport-product changes (0 for direct
            connection, default/max=11)
          type: integer
          format: int32
        extendedChangeTime:
          description: >-
            OOS MVP Indicates additional transfer time required where a transfer
            is present in the resulting trip. Expressed in minutes.
          type: integer
          format: int32
        needsPRMAssistance:
          description: >-
            OOS MVP indicates a need for an itinerary where end-to-end PMR
            assistance and accessibility is possible.
          type: boolean
          default: false
      required:
        - origin
        - destination
        - travelDateTime

    OfferSearchCriteria:
      type: object
      properties:
        flexibilities:
          description: >-
            Defines the flexibility levels desired of the fares returned.
            This refers to the after sales flexibility levels as defined in IRS-90918-10
          type: array
          items:
            $ref: '#/components/schemas/Flexibility'
        comfortClasses:
          type: array
          items:
            $ref: '#/components/schemas/ComfortClassDef'
          description: >-
            The classes returned might be different from the requested classes.
        serviceClassIds:
          type: array
          items:
            $ref: '#/components/schemas/ServiceClassIdDef'
          description: >-
            The classes returned might be different from the requested classes.
        reservationOffersOnly:
          type: boolean
          default: false
        currency:
          $ref: '#/components/schemas/CurrencyDef'
          description:
            The currency returned might be different from the one requested.

    TripOfferRequest:
      type: object      
      description: >-
        Defines the parameters needed to request an offer, either based on either an
        existing trip (that is then passed by Id, Ref or in full) plus a set of offer search
        criterias, or based on tripsearch and offer search criteria. At least one
        of the tripId, tripRef,trip elements or tripSearchCriteria must be set.
      properties:
        tripSearch:
          oneOf:
            - type: array
              items:
                type: object
                properties:
                  trip:
                    $ref: '#/components/schemas/Trip'
                  requestedSection:
                   $ref: '#/components/schemas/TravelSectionDef'
                required:
                  - trip
            - $ref: '#/components/schemas/TripSearchCriteria'
        returnSearchParameters:
          type: object
          description: >-
            This property can be used in case a return trip is being requested. 
            This will allow to benefit from return-specific fares or product
          properties:
            inwardReturnDate:
              type: string
              format: date-time
              description: >-
                Needs to be provided when creating the collection of outward travels so that the
                provider knows when a return travel can be expected and propose appropriate
                product and fares.
            outwardTripOfferCollectionId: 
               type: string
               format: uuid
               description: >-
                 Needs to be provided when creating the collection of inward travels so that the provider
                 can relate the inward travels to the outward travels context.
            outwardSelectedOfferId:
               type: string
               format: uuid
               description: >-
                 Needs to be provided when creating the collection of inward travels so that the provider
                 knows what the outward offer is and and propose compatible offers only if desired or mandatory.
        requestedFulfillmentOptions:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentOption'
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/Passenger'
        offerSearchCriteria:
          $ref: '#/components/schemas/OfferSearchCriteria'
        embed:
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          type: array
          items:
            type: string
            enum:
              - ALL
              - TRIPOFFERS
              - TRIPOFFERS.TRIP
              - TRIPOFFERS.TRIP.LOCATIONS
              - TRIPOFFERS.OFFERS
              - TRIPOFFERS.OFFERS.OFFERPARTS
              - TRIPOFFERS.PASSENGERS
              - NONE
            default: ALL
      required:
        - tripSearch
        - passengers

    TripOffer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        trip:
          oneOf:
            - $ref: '#/components/schemas/TripRef'
            - $ref: '#/components/schemas/Trip'
        offers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/OfferRef'
              - $ref: '#/components/schemas/Offer'
        passengers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerRef'
              - $ref: '#/components/schemas/Passenger'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required: 
        - id
        - trip
        - offers
        - passengers

    TripOfferRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
        href:
          type: string
          format: url
          example: 'http://some.provider/tripOffer/2345'
        title:
          type: string
          example: 'Bruxelles-Midi 10:05 20200701'

    RequestedInformation:
      type: string
      description: >-
        Boolean-expression indicating the data that must be set in the data
        model in order to proceed to next step of the process.
        
    OfferSummary:
      type: object
      description: >-
        The offer summary indicates the major service class, level or flexibility.
        This does not imply that this service class or level applies to all parts 
        of the whole offer. 
      properties:
        minimalPrice:
          $ref: '#/components/schemas/CurrencyPriceDef'
        overallServiceClassId:
          $ref: '#/components/schemas/ServiceClassIdDef'
        overallComfortClass:
          $ref: '#/components/schemas/ComfortClassDef'
        overallAccommodationType:
          $ref: '#/components/schemas/AccommodationType'
        overallFlexibility:
          $ref: '#/components/schemas/Flexibility'
      required:
        - minimalPrice
        - overallServiceClassId
        - overallFlexibility

    Offer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        offerSummary:
          $ref: '#/components/schemas/OfferSummary'
        offerHash:
          type: object
          properties:
            isMandatory:
              type: boolean
              default: false
            offerHash:
              type: string
          description: >-
            The offerHash can/must (depending on the mandatory flag) be used in some cases to restrict the set of
            offers returned in a subsequent and related offer search to only compatible ones.
            Note the offerHash does not need to be unique.
        combinationHashes:
          type: array
          items:
            type: object
            properties:
              combinationType: 
                type: string
                x-extensible-enum:
                  - RETURN
              hash: 
                type: string
          description: >-
            List of hashes (and their type) that allow identifying sets of compatible offers,
            for example when booking a return trip with specific return fares. 
            If no hash is provided, there is no constraint on this specific offer.
        requestedInformation:
          $ref: '#/components/schemas/RequestedInformation'
        availableFulfillmentTypes:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentType'
        trip:
          oneOf:
            - $ref: '#/components/schemas/TripRef'
            - $ref: '#/components/schemas/Trip'
          description: Note that trip element cannot be embedded in tripoffer context as the TRIPOFFERS.OFFERS.TRIP value is not a possible embed value for TripOffers.
        validFrom:
          type: string
          format: date-time
          description: defines the minimum validity period of the trip booked, meaning the period during which it will be possible to travel with the fulfillments for this offer 
        validUntil:
          type: string
          format: date-time 
          description: defines the minimum validity period of the trip booked, meaning the period during which it will be possible to travel with the fulfillments for this offer
        admissions:
          type: array        
          items: 
            $ref: '#/components/schemas/Admission'
        reservations:
          type: array        
          items:              
            $ref: '#/components/schemas/Reservation'
        ancillaries:
          type: array        
          items:  
            $ref: '#/components/schemas/Ancillary'
        fares:
          type: array
          items:
            $ref: '#/components/schemas/FareOnlineDef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - id
        - offerSummary

    OfferRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
        href:
          type: string
          format: url
          example: 'http://some.provider/offer/2345'
        title:
          type: string
          example: 'Bruxelles-Midi - Paris-Nord 10:05 20200701 NF 50 EUR'

    TripOffersCollection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tripOffers:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/TripOfferRef'
            - $ref: '#/components/schemas/TripOffer'
        scrollBackContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll backward. (Value
            depends on underlying system.)
        scrollForwardContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll forward.
            (Value depends on underlying system.)
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - id
        - tripOffers

    CurrencyDef:
      description: ISO4217 currency codes
      type: string

    CurrencyPriceDef:
      type: object
      minProperties: 1
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyDef'
        amount:
          description: amount in cents
          type: integer
          format: int32
        scale: 
          description: scale of the amount - the number of positions after the comma
          type: integer
          default: 2
        vatDetails:
          type: array
          items:
            $ref: '#/components/schemas/VatDetailDef'
      required:
        - currency
        - amount
      
    VatDetailDef:
      type: object
      properties:
        country:
          $ref: '#/components/schemas/CountryDef'
        amount:
          description: amount in cents
          type: integer
          format: int32
        scale: 
          description: scale of the amount - the number of positions after the comma
          type: integer
          default: 2          
        percentage:
          type: number
          format: float
        taxId:
          type: string
        scope:
           $ref: '#/components/schemas/VatScopeDef'
      required:
        - country
        - amount
      
    VatScopeDef:
      description: scope where the VAT applies
      type: string
      x-extensible-enum:
       - INTERNATIONAL
       - NATIONAL
       - SHORT_DISTANCE
       - LONG_DISTANCE

    GenderDef:
      description: >- 
        The gender of the passenger, which is important in the case of night trains.
      type: string
      enum:
        - MALE
        - FEMALE
        - X
        
    ReductionCardReferenceDef:
      type: object
      properties:
        code:
          description: code of the card type according to code list
          type: string
        codeList:
          description: code list for the code of the card provided
          type: string
          default: UIC
        name:
          description: card name for printing on fulfillments
          type: string
        issuer:
          type: string
          description: >-
            RICS company code or the upcoming compatible ERA company code. In
            case proprietary codes are used on a bilateral base the codes must
            have at least 5 positions and start with x.
      required:
        - code
        - codeList
        - name
      additionalProperties: false
      
    LoyaltyCardReferenceDef:
      type: object
      properties:
        code:
          description: code of the card type according to code list
          type: string
        codeList:
          description: code list for the code provided
          type: string
        name:
          description: card name for printing on fulfillments
          type: string
        number:
          type: string
          description: the unique number identifying the loyalty card.
        issuer:
          type: string
          description: >-
            RICS company code or the upcoming compatible ERA company code. In
            case proprietary codes are used on a bilateral base the codes must
            have at least 5 positions and start with x.
      required:
        - codeList
        - code
      
    CardIdentificationDef:
      description: >-
        card issuer - RICS code in case of Railways, otherwise starting with
      type: object
      properties:
        cardId:
          type: string
        cardIssuer:
          $ref: '#/components/schemas/CompanyDef'
        cardType:
          description: Code table to be defined in tariff description data
          type: string
        leadingCardId:
          type: string
        trailingCardId:
          type: string
        cardNumber:
          type: string
      required:
        - cardIssuer
        - cardType
      
    Passenger:
      type: object
      description: >-
        passenger or transportable (e.g. bicycle)
      properties:
        id: 
          type: string
          format: uuid
          description: >-
           id of the passenger resource in case service to patch a single passenger is provided.
        reference:
          description: >-
            stable reference to passengers from other elements, or from caller
            system.
          type: string
        abstract:
          $ref: '#/components/schemas/PassengerAbstractDef'
        details:
          $ref: '#/components/schemas/PassengerDetailsDef'
        passport:
          $ref: '#/components/schemas/PassportDef'
        cardIdentification:
          $ref: '#/components/schemas/CardIdentificationDef'
        transportableDetails:
          $ref: '#/components/schemas/TransportableDef'          
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - reference
        
    PassengerAbstractDef:
      type: object
      properties:
        dateOfBirth:
          description: date of birth of the passenger
          type: string
          format: date
        reductionCards:
          description: reduction cards owned by the passenger 
          type: array
          items:
            $ref: '#/components/schemas/ReductionCardReferenceDef'
        loyaltyCards:
          description: loyalty cards owned by the passenger 
          type: array
          items:
            $ref: '#/components/schemas/LoyaltyCardReferenceDef'
        gender:
          $ref: '#/components/schemas/GenderDef'
        prmNeeds:
          type: string
          x-extensible-enum:
            - WHEELCHAIR
            - ACCOMPDOG
            - COMPANIONSEAT
            - COMPANION
        
    PassportDef:
      type: object
      description: >- 
        Travel document data to be exchanged for border control in case of legal requirements
        PassengerDetails providing personal information only information required in the offer. 
        It is not allowed to send personal information not required in the offer reply. 
        It is legally not allowed to send these personal data already in the offer request.
      properties:
        cityOfBirth:
          type: string
        cityOfIssue:
          description: place where the document is issued
          type: string
        cityOfResidence:
          type: string
        countryOfBirth:
          $ref: '#/components/schemas/CountryDef'
        countryOfIssue:
          $ref: '#/components/schemas/CountryDef'
        countryOfResidence:
          $ref: '#/components/schemas/CountryDef'
        dateOfIssue:
          type: string
          format: date-time
        documentId:
          type: string
        documentType:
          description: Refer to code list for values
          type: string
        gender:
          $ref: '#/components/schemas/GenderDef'
        limitOfValidity:
          type: string
          format: date-time
        name:
          description: ICAO transliteration identical as written in the document
          type: string
        nationality:
          $ref: '#/components/schemas/CountryDef'
      required:
        - documentType
        - name
      
    PassengerDetailsDef:
      type: object
      description: >- 
        PassengerDetails providing personal information only information required in the offer.
        It is not allowed to send personal information not required in the offer reply.
        It is not allowed to send these personal data already in the offer request.
      properties:
        eMails:
          type: array
          items:
            type: string
            format: email
        language:
          type: array
          items:
            type: string
            description: Languages spoken by the traveler (ISO Language code)
        firstName:
          type: string
        firstNameICAO:
          description: ICAO transliteration
          type: string
        lastName:
          type: string
        lastNameICAO:
          description: ICAO transliteration
          type: string
        title:
          type: string
        phones:
          type: array
          items:
            type: string
        socialMediaAccount:
          type: array
          items:
            type: object
            properties:
              account:
                type: string
              accountType:
                description: >-
                  Example types: FACEBOOK, WHATSAPP, SKYPE, WECHAT,...
                type: string
            required:
              - account
              - accountType
        trainStaffInfo:
          description: >-
            Information text provided by the issuing system in a controlled way (e.g. VIP customer).
          type: array
          items:
            $ref: '#/components/schemas/TranslationDef'
      
    ServiceClassDef:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ServiceClassIdDef'
        carrierName:
          type: string
          description: >-
            the name the carrier itself uses to designate this specific service class
      required:
        - id
      
    ComfortClassDef:
      description: >-
            Generic class classification, mostly used to harmonize choice and
            representation across multiple carriers
      type: string
      x-extensible-enum:
        - FIRST
        - SECOND 
      
    TravelSectionDef:
      type: object
      properties:
        start:
          oneOf:
            - $ref: '#/components/schemas/Location'
            - $ref: '#/components/schemas/ConnectionPointDef'
        end:
          oneOf:
            - $ref: '#/components/schemas/Location'
            - $ref: '#/components/schemas/ConnectionPointDef'
      required:
        - start
        - end
      
    PassengerRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
        href:
          type: string
          format: url
          example: 'http://some.provider/passenger/2345'
        title:
          type: string
          example: Andreas Dupont
          
    AccommodationType:
      type: string
      description:  >-
        Accommodation type definition out of AccoTypeCodeList
      
    ServiceLevelIdDef:
      type: string
      description: >-
        Code of the service level, code-list in IRS 90918-1.
    Flexibility:
      type: string
      x-extensible-enum:
        - FULLFLEX
        - MIDFLEX
        - NONFLEX

    CommonOfferPartAttributes:
      type: object
      properties:
        price:
          $ref: '#/components/schemas/CurrencyPriceDef'
        pricingMode:
          type: string
          enum:
            - COLLECTIVE
            - INDIVIDUAL 
        reductionsApplied:
          type: array
          items:
            $ref: '#/components/schemas/ReductionCardReferenceDef'
        passengerRefs:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerRef'
              - $ref: '#/components/schemas/Passenger'
        providerBookingReference:
          type: string
          description: the booking reference of the booking the offer part is in on the provider side
        finalProviderBookingReference:
          type: string
          description: the booking reference of the order the offer part is in on the final provider side = the provider actually hosting or allocating  the product
        availableFulfillmentOptions:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentOption'
        validFrom:
          type: string
          format: date-time
          description: >-
            Validity of offer towards passenger 
        validUntil:
          type: string
          format: date-time
          description: >-
            Validity of offer towards passenger 
        refundable:
          type: string
          enum:
            - YES
            - NO
            - WITH_CONDITIONS
        exchangeable:
          type: string
          enum:
            - YES
            - NO
            - WITH_CONDITIONS
        productRefs:
          type: array
          items:
            type: object
            properties:
              productRef:
                oneOf:
                  - $ref: '#/components/schemas/ProductRef'
                  - $ref: '#/components/schemas/Product'
              segmentIndices:
                description: indices of the segments in the trip given by the provider of the offer
                type: array
                items:
                  type: integer
                  format: int32
      required:
        - price
        - passengerRefs
        - validFrom
        - refundable
        - exchangeable
            
    ProductRef:
      type: object
      properties:
        id:
          type: string
          description: unique id of this product on this server.
        href:
          type: string
          format: url
          example: 'http://some.provider/product/2345'
        title:
          type: string
          example: TGV Lyria Loisir 2

    Product:
      type: object
      description: >-
         Structured description of the product , its name, comfort and sales / after-sales conditions
      properties:
        id:
          type: string
          description: unique id of this product on this server.
        code:
          type: string
          description: >-
            The product code expressed in the provider system (could be a
            mapping from an even lower-level provider).
          example: PT00AD
        description:
          type: array
          items:
            $ref: '#/components/schemas/TranslationDef'
          description: the textual description of the product
          example: Loisir Non-flex Adult Fare
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/ProductCondition'
          description: >-
            Structured description of the sales or after-sales conditions.
        serviceClass:
          $ref: '#/components/schemas/ServiceClassDef'
        comfortClass:
          $ref: '#/components/schemas/ComfortClassDef'
        isTrainBound:
          type: boolean
        isReturnProduct:
          type: boolean
          default: false
        fulfillmentOptions:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentOption'
        serviceConstraintText:
          type: string
        carrierConstraintText:
          type: string
      required:
        - id
        - description
        - conditions
        - refundable
        - exchangeable
        - fulfillmentOptions
          
    FulfillmentMediaTypeDef:
       type: string
       description: >-
         Fulfillment types. RCT2, RCCST and UIC-PDF are official UIC standards.     
       x-extensible-enum:
         - RCT2
         - RCCST
         - UIC_PDF
         - PDF_A4
         - PKPASS
         - TICKETLESS
         - ALLOCATOR_APP
         - SOCIAL_MEDIA_ACCOUNTS

    ProductCondition:
      type: object
      description: >-
        Describes sales and after sales conditions applicable to the product. 
        For a product to be refundable or exchangeable, at least one refund or exchange 
        (respectively) condition must be present.
      properties:
        type:
          type: string
          x-extensible-enum:
            - SALE
            - EXCHANGE
            - REFUND
        description:
          type: array
          items:
            $ref: '#/components/schemas/TranslationDef'
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        afterSalesFee:
          $ref: '#/components/schemas/CurrencyPriceDef'
      required:
        - type
        - description

    Admission:
      type: object
      description:
        An admission represents a travel right, or the entitlement to travel onboard a train between 
        the given origin and destination, following the given route. It does not include a seat reservation. 
      properties:
        id:
          type: string
          format: uuid
        commonOfferPartAttributes:
          $ref: '#/components/schemas/CommonOfferPartAttributes'
        isReservationRequired:
          type: boolean
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/OfferPartRef'
        ancillaries:
          type: array
          items:
            type: object
            properties:
              relationType:
                type: string
                x-extensible-enum:
                  - OPTIONAL
                  - INCLUDED
              ancillary:
                $ref: '#/components/schemas/OfferPartRef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - id
        - commonOfferPartAttributes
                
    PlaceSelectionPatch:
      type: object
      description: >-
        place selection options and selected options in an offer
        - selected optional place properties (selectedOptions)
        - selectedPlaces from a graphical place selection (selectedPlaces)
        - reference place for adjacent reservation (referencePlace)
      properties:
        referencePlace: 
          type: object    
          description: selected place for an adjacent reservation (NEARBY)
          properties:
            placeNumber:
              type: string
            coachNumber:
              type: string
        selectedOptions:
          type: array
          items: 
            $ref: '#/components/schemas/PlaceOptionsBundleDef'
        selectedPlaces:
          $ref: '#/components/schemas/SelectedPlacesDef'

    PlaceSelectionDef:
      type: object
      description: >-
        Place selection options and selected options in an offer
        - optional place properties to choose from
        - selected optional place properties (selectedOptions)
        - selectable places for a graphical place selection 
        - selectedPlaces from a graphical place selection (selectedPlaces)
        - reference place for adjacent reservation (referencePlace)
      properties:
        reservationOptions:
          $ref: '#/components/schemas/ReservationOnlineOptionDef' 
        vehicle:
          description: vehicle / train number is necessary in  case of train parts with different train numbers
          type: string           
        referencePlace: 
          type: object    
          description: selected place for an adjacent reservation (NEARBY)
          properties:
            placeNumber:
              type: string
            coachNumber:
              type: string
        selectedOptions:
          type: array
          items: 
            $ref: '#/components/schemas/PlaceOptionsBundleDef'
        selectablePlaces:
          $ref: '#/components/schemas/PlaceAvailabilityDef'
        selectedPlaces:
          $ref: '#/components/schemas/SelectedPlacesDef'
      required:
        - id      
                
    PlaceOptionsBundleDef:
      type: object
      description: >-
        selection of places for reservation linked to passengers
      properties:
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/PassengerRef'
        selectedPlaceProperties: 
          type: array
          items:
            description: selection from the optional place properties provided in the offer
            type: string
      required:
        - id              
   
    PlaceAvailabilityDef:
      type: object
      description: \*** NOT-MVP *** structure used for graphical place selection
      properties:
        coaches:
          description: >-
            list of the coaches in a train run ordered according to the physical
            ordering of the train
          type: array
          items:
            type: object
            properties:
              compartments:
                description: >-
                  areas within a coach that holds places. Areas might be selectable
                  as a whole. Usual areas would be classic compartments.
                type: array
                items:
                  type: object
                  properties:
                    places:
                      type: array
                      items:
                        type: object
                        properties:
                          number:
                            description: >-
                              the place number as indicated at the place in the
                              coach
                            type: string
                          status:
                            description: status of the place
                            type: string
                            x-extensible-enum:
                               - ALLOCATED
                               - FREE
                               - RESTRICTED                        
                          isSelectable:
                            description: >-
                              to indicate individual places as non-selectable in
                              case complete compartments must be selected
                            type: boolean
                            default: true
                        required:
                          - number
                        
                    status:
                      type: string
                    isSelectable:
                      description: to indicate compartments selectable as a whole only
                      type: boolean
                      default: false
                  
              number:
                description: coach number
                type: string
              status:
                description: >-
                  status of the coach if the status applies to all places of the coach
                type: string
                x-extensible-enum:
                   - ALLOCATED
                   - FREE
                   - RESTRICTED
              layoutId:
                description: id to identify the coach layout
                type: string
              layoutIdUpperDeck:
                description: id to identify a layout for the upper deck in a double deck coach
                type: string
              layoutIdLowerDeck:
                description: id to identify a layout for the lower deck in a double deck coach
                type: string
              direction:
                description: >-
                  indication of the direction of travel standard direction is left
                  to right with ascending coordinates in the layout values  U =
                  unspecified
                          in direction of the layout
                          opposite to direction of the layout
                          changing
                          starting in direction but changing later
                type: string
                x-extensible-enum:
                 - IN_DIRECTION
                 - OPPOSITE_DIRECTION
                 - CHANGING
                 - STARING_IN_DIRECTION
              coachOwner:
                $ref: '#/components/schemas/CompanyDef'
              specialCoach:
                description: >-
                  indication of special coach 
                type: string
                x-extensible-enum: 
                  - RESTAURANT_COACH
                  - BICYCLE_COACH
                  - LUGGAGE_COACH
                  - TRAIN_HEAD                
            required:
              - number
              - layoutId                    
                
    Reservation:
      type: object
      description: >-
        Reservation includes the reference to the in the initial offer. 
        The offer needs to be updated with the selected places before the confirmation
        which creates the reservation details including the reserved places.
      properties:
        id:
          type: string
          format: uuid
        commonOfferPartAttributes:
          $ref: '#/components/schemas/CommonOfferPartAttributes'
        reservationDetails:
          $ref: '#/components/schemas/ReservationDetails'          
        placeSelection:
          $ref: '#/components/schemas/PlaceSelectionDef'
        optionality:
          description: >-
            INCLUDED: the reservation is included in the offer
            MANDATORY: the reservation is mandatory for the booking
            OPTIONAL: the reservation is not included but can be added optionally
          type: string
          x-extensible-enum:
            - INCLUDED
            - MANDATORY
            - OPTIONAL
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - id
        - commonOfferPartAttributes
        - reservationDetails
        
    ReservationPatch:
      type: object
      description: >-
        reservationPatch is the structure used to modify reservations. It is a subset of the complete reservation element
      properties:
        placeSelection:
          $ref: '#/components/schemas/PlaceSelectionPatch'

    SelectedPlacesDef:
      description: \*** NOT-MVP *** place selection from a graphical display of coaches
      type: object
      properties:
        selectedCoaches:
          description: selected coach and places in case of graphical reservation
          type: array
          items:
            minItems: 1
            type: object
            properties:
              coachNr: 
                type: string
              selectedPlaces:
                description: selected places in case of graphical booking
                type: array
                items:
                  minItems: 1              
                  type: object
                  properties:
                    passengerReference: 
                      description: >-
                        reference of the passenger for this place. 
                        passengers might need to be assigned to specific places in case of multiple compartments in night trains 
                      type: string
                    place: 
                      type: string  
      required:
        - selectedCoach
        - selectedPlaces

    ReservationDetails:
      type: object
      description: segmentIndex references a segmentIndex in the trip part within the offer reply
      properties:
         accommodationType:
            $ref: '#/components/schemas/AccommodationType'  
         reservedPlaces:
          description: reserved places in a confirmed reservation. Multiple place packs are needed to combined person and bicycle reservations
          type: array
          items:
              $ref: '#/components/schemas/PlacePackDef'
  
    PlacePackDef:
      type: object
      description: >-
          selection of places with common properties
          description element - textual description of the places
          placeProperties is mandatory for allocator mode, for distributors the textual description is used
      properties:
        id:
          type: string
        passengerReferences:
          description: reference of the traveller / reservation holder
          type: string
        vehicle:
          description: vehicle number (e.g. train number)
          type: string  
        coach:
          type: string
        places:
          description: descriptive string of the places (e.g. 11-35,51)
          type: string
        placeIds:
          description: list of individual place numbers
          type: array
          items:
            type: string
        placeProperties:
          description: place properties to be indicated to the customer
          type: array
          items:
            type: object
            description: place properties of places in the place pack. Properties without a  number refer to all places
            properties:
              placeProperty:
                description: see code list
                type: string
              number:
                description: number of places with this property
                type: integer
                format: int32
              priority:
                description: priority for displaying a list of properties
                type: integer
                format: int32
            required:
              - placeProperty
      required:         
        - id
        - reference
        - vehicle
        - coach
        - places
             
    Ancillary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        commonOfferPartAttributes:
          $ref: '#/components/schemas/CommonOfferPartAttributes'
        optionality:
          description: >-
            INCLUDED: the ancillary is included in the offer but is not mandatory 
            OPTIONAL: the ancillary is not included but can be optionally added
          type: string
          x-extensible-enum:
            - INCLUDED
            - OPTIONAL
        category:
          type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required :
        - id
        - commonOfferPartAttributes
          
    OfferPartRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
        href:
          type: string
          format: url
          example: >-
            http://some.provider/ancillary/2345 or
            http://some.provider/reservation/2345'
        title:
          type: string
          example: ICE wifi onboard 2020-07-11 or ICE Bruxelles-Frankfurt child 2020-07-12
      description: >-
        References all the offer part elements in an uniform format. an
        offerPartRef can therefore refer to reservation,
        admission or ancillary (in its href)
        
    BookingRequest:
      type: object
      properties:
        selectedOffers:
          type: array
          items:
            type: object
            properties:
              selectedOfferId:
                type: string
                format: uuid
                description: id of the selected offer
              selectedOptionalReservationsIds:
                type: array
                items:
                  type: string
                  format: uuid
                  description: >-
                    If relevant, ids of the selected optional reservations.
              selectedOptionalAncillaries:
                type: array
                items:
                  type: object
                  properties:
                    ancillaryId:
                      type: string
                      format: uuid
                      description: >-
                        If relevant, ids of the selected optional ancillaries.
                    passengerIds:
                      type: array
                      items:
                        type: string
                        format: uuid
                        description: >-
                          Id of the passengers the selected optional ancillaries are for.
            description: the list of offer ids that need to be provisionally booked, with possibly the reservations and ancillaries associated that should be booked as well. It has to be a list in case of return trip (2 offers would be booked)
            required:
              - selectedOfferId
        embed:
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          type: array
          items:
            type: string
            enum:
              - ALL
              - BOOKEDOFFERS
              - BOOKEDOFFERS.TRIPS
              - BOOKEDOFFERS.TRIPS.LOCATIONS
              - BOOKEDOFFERS.OFFERPARTS
              - PASSENGERS
              - REFUND_PROPOSITIONS
              - NONE
            default: ALL

    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        reference:
          type: string
          description: >-
            The unique booking reference in the provider system. Usually refers to an order number or PNR.
        status:
          type: string
          enum:
            - PREBOOKED
            - CONFIRMED
            - FULFILLED
            - CANCELLED
            - REFUNDED
            - EXCHANGED
            - ERROR
        provisionalBalance: 
          $ref: '#/components/schemas/CurrencyPriceDef'
        confirmedBalance: 
          $ref: '#/components/schemas/CurrencyPriceDef'
        requestedInformation:
          $ref: '#/components/schemas/RequestedInformation'
        ticketTimeLimit:
          type: string
          format: date-time
        fulfillmentType:
          $ref: '#/components/schemas/FulfillmentType'
        bookedOffers:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/OfferRef'
            - $ref: '#/components/schemas/Offer'
        passengers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerRef'
              - $ref: '#/components/schemas/Passenger'
        fulfillments:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/FulfillmentRef'
              - $ref: '#/components/schemas/Fulfillment'
        refundOffers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/RefundOfferRef'
              - $ref: '#/components/schemas/RefundOffer'
          description: >-
            Refund offer is created with the details of the to-be-confirmed refund operation. 
            One refund offer can then be confirmed, which turns it into a refund.
        exchange:
            $ref: '#/components/schemas/ExchangeDef'
        exchangeOffers:
          type: array
          items:
            $ref: '#/components/schemas/ExchangeOfferDef'
          description: >-
            Exchange offer is created with the details of the to-be-confirmed refund operation. 
            One exchange offer can then be confirmed, which turns it into an exchange and
            confirms the new booking.         
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - id
        - status
        - passengers

    BookingRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/booking/2345'
        title:
          type: string
          example: booking 2345
          
    FulfillmentType:
      type: string      
      x-extensible-enum:
          - ETICKET
          - CIT_PAPER

    BookingPatchRequest:
      type: object
      description: >-
        Allows setting the required fulfillment type, e.g. value paper
        or e-ticket and preferred fulfillment media. 
        The latter is optional and relevant in some cases only.
      properties:
        requestedFulfillmentType:
          $ref: '#/components/schemas/FulfillmentType'
        preferredFulfillmentMedia:
          $ref: '#/components/schemas/FulfillmentMediaTypeDef'

    FulfillmentOption:
      type: object
      description: >-
        CIT paper implies printing on value paper which is stock controlled.
      properties:
        fulfillmentType:
          $ref: '#/components/schemas/FulfillmentType'
        media: 
          type: array
          items:
           $ref: '#/components/schemas/FulfillmentMediaTypeDef'
           
    FulfillmentsDef:
      type: object
      description: >-
        list of fulfillments in a booking
      properties:
        fulfillments:
          type: array
          items:
            $ref: '#/components/schemas/Fulfillment'
        
    FulfillmentsPatch:
      type: object
      description: >-
        Changes the fulfillment to status FULFILLED.
      properties:
        fulfillmentUpdates:
          type: array
          items:
            type: object
            properties:
              fulfilledFulfillmentId:
                type: string
                format: uuid
                
    Fulfillment:
      type: object
      description: >-
        a fulfillment is a document (or part of a document in allocator mode) that
        - allows the passenger to prove his travel right
        - provides easier access to trains and stations
        - allows an exchange for other services (voucher)
        a fulfillment refers to services of one or multiple offer parts or a fare (allocator mode).
      properties:
        id:
          type: string
          format: uuid
        status: 
          type: string
          enum: 
            - CONFIRMED
            - FULFILLED
            - CHECKEDIN
            - REFUNDED
        price:
          $ref: '#/components/schemas/CurrencyPriceDef'
          description: >-
            Note the price is present here as an optional element as future evolution indicate a possible
            separation between fulfillment info and financial information. Please refer to UIC leaflet XXX
            for more information on current status
        controlNumber:
          type: string
          description: >-
            Ticket Control Number
        offerParts:
          type: array
          items:
            $ref: '#/components/schemas/OfferPartRef'
        documents:
          description: >-
            complete document created for fulfillment
          type: array
          items: 
            $ref: '#/components/schemas/FulfillmentDocumentDef'
        fulfillmentItems:
          description: >-
            fulfillment items to be integrated into tickets (allocator mode)
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentItemDef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    
    FulfillmentDocumentDef:
      type: object
      description: >-
        document created for fulfillment
      properties:
        medium: 
          $ref: '#/components/schemas/FulfillmentMediaTypeDef'
        documentType:
         type: string
         x-extensible-enum:
            - BOOKING_RECEIPT
            - TICKET
            - BOARDING_PASS
            - INFORMATION
            - VOUCHER
        documentLink:
          type: string
          format: uri    
    
    FulfillmentItemDef:
      type: object
      description: >-
       Fulfillment items to be integrated in to tickets, 
       e.g. visual security elements, additional bar codes, control keys
      properties:
        fulfillmentMedia:
          description: >-
           list of fulfillment media where this item applies
          type: array
          items:
           $ref: '#/components/schemas/FulfillmentMediaTypeDef'
        travelerReference:
          description: reference to a traveler
          type: string
        controlId:
          type: string
        securityFeatures:
          description: 'visual elements, bar codes'
          type: array
          items:
            type: object
            properties:
              type:
                $ref: '#/components/schemas/SecurityFeatureTypeDef'
              data:
                description: base 64 encoded data
                type: string
        securityFeatureLinks:
          type: array
          items:
            type: object
            properties:
              type:
                $ref: '#/components/schemas/SecurityFeatureTypeDef'
              uri:
                description: link to download the security feature
                type: string
                format: uri
        isMandatory:
          description: >-
            The use of the provided features is mandatory
          type: boolean
          default: false
        securePaperOnly:
          description: >-
            The security feature must be used on secure paper
          type: boolean
          default: false
  
    SecurityFeatureTypeDef:
      description: >-
        Possible formats:
         - "RAW_BAR_CODE" binary data too be included in an bar code, 
         - "MATRIX_BAR_CODE" binary data of the black and white pixel matrix of a square bar code,
         - "PNG_BAR_CODE" png image data of a bar code,
         - "JPG_BAR_CODE" jpg data of a bar code, 
         - "PNG_VISUAL_ELEMENT" png image data of a visual element, 
         - "JPG_VISUAL_ELEMENT" jpg data of a visual element, 
         - "GIF_VISUAL_ELEMENT" gif data of a visual element
      type: string
      x-extensible-enum:
        - RAW_BAR_CODE
        - MATRIX_BAR_CODE
        - PNG_BAR_CODE
        - JPG_BAR_CODE
        - PNG_VISUAL_ELEMENT
        - JPG_VISUAL_ELEMENT
        - GIF_VISUAL_ELEMENT
  
    FulfillmentRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
        href:
          type: string
          format: url
          example: 'http://some.provider/ticket/2345'
        title:
          type: string
          example: Ticket Paris-Barcelona Andre Dupont 2020-07-23
   
    AfterSaleReasonDef:
      description: >-
        Reason for and type of an after sale, Code list in IRS 90918-10.
      type: string
      
    RefundOffersCollection:
      type: object
      properties:
        refundOffers:
          type: array
          items:
            $ref: '#/components/schemas/RefundOffer'
  
    RefundOffer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: id of the refund offer
        validUntil:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PROPOSED
            - CONFIRMED
        reimbursementStatus:
          description: >-
            If set to IMMEDIATE the distributor is allowed to return the 
            reimbursement amount immediately.
          type: string
          enum:
            - IMMEDIATE
            - DELAYED
        reimbursementDateTime:
          type: string
          format: date-time
        appliedOverruleCode:
          $ref: '#/components/schemas/AfterSaleReasonDef'
        fulfillments:
          type: array
          items: 
            $ref: '#/components/schemas/FulfillmentRef'
        refundFee:
          $ref: '#/components/schemas/CurrencyPriceDef'
        refundableAmount:
          $ref: '#/components/schemas/CurrencyPriceDef'
      required:
       - id
       - validUntil
       - status
       - reimbursementStatus
       - refundFee
       - refundableAmount
       
    RefundOfferRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
        href:
          type: string
          format: url
          example: 'http://some.provider/bookings/2345/refundOffers/123'
        title:
          type: string
          example: Refund Paris-Barcelona Andre Dupont 2020-07-23
          
    TicketRequest:
      type: object
      properties:
        bookingId:
          type: string
          format: uuid
          description: id of the booking to fulfill (no partial fulfillment)
      required:
        - bookingId
        
    RefundOfferRequest:
      type: object
      description: 
        Request for a refund. Fulfillments can be provided in case the booking contains multiple individual fulfillments
      properties:
        fulfillmentIds:
          type: array
          items:
            type: string
            format: uuid
            description: id of the fulfillment to refund
        overruleCode: 
          $ref: '#/components/schemas/AfterSaleReasonDef'

    ExchangeOfferRequest:
      type: object
      description: 
        Request for an exchange. Fulfillments can be provided in case the booking contains multiple individual fulfillments
      properties:
        fulfillmentIds:
          type: array
          items:
            type: string
            format: uuid
            description: id of the fulfillment to exchange
        overruleCode: 
          $ref: '#/components/schemas/AfterSaleReasonDef'

    ExchangeOffersCollectionDef:
      type: array
      items:
        $ref: '#/components/schemas/ExchangeOfferDef'
        
    ExchangeOfferDef:
      type: object
      description: >-
       offer to exchange the referenced booking
      properties:
        id:
          type: string
          format: uuid
          description: id of the exchange offer
        validUntil:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PROPOSED
            - CONFIRMED
          default: PROPOSED
        reimbursementStatus:
          description: >-
            If set to IMMEDIATE the distributor is allowed to return the 
            reimbursement amount immediately.
          type: string
          enum:
            - IMMEDIATE
            - DELAYED
        reimbursementDateTime:
          type: string
          format: date-time
        appliedOverruleCode:
          $ref: '#/components/schemas/AfterSaleReasonDef'
        fulfillments:
          description: >-
            affected fulfillments. In case of secure paper these need to be collected from the passenger.
          type: array
          items: 
            $ref: '#/components/schemas/FulfillmentRef'
        exchangeFee:
          $ref: '#/components/schemas/CurrencyPriceDef'
        refundableAmount:
          $ref: '#/components/schemas/CurrencyPriceDef'
        offer:
          oneOf:
           - $ref: '#/components/schemas/TripOffer'  
           - $ref: '#/components/schemas/TripOfferRef'
           - $ref: '#/components/schemas/NonTripOfferDef'
      required:
       - id
       - validUntil
       - status
       - reimbursementStatus
       - exchangeFee
       - exchangeOffer

    ExchangeOfferConfirmDef:
      type: object
      description: >-
        Changes the exchange offer to the status CONFIRMED.
      properties:
        confirmedExchangeOfferId:
          type: string
          format: uuid
          description: id of the exchange offer
            
    ExchangeDef:
      type: object
      description: >- 
        Result of a successful confirmation of an exchange. 
        The new booking and the original booking are returned.
      properties:
        reimbursementStatus:
          description: >-
            If set to IMMEDIATE the distributor is allowed to return the 
            reimbursement amount immediately.
          type: string
          enum:
            - IMMEDIATE
            - DELAYED
        reimbursementDateTime:
          type: string
          format: date-time
        appliedOverruleCode:
          $ref: '#/components/schemas/AfterSaleReasonDef'
        exchangeFee:
          $ref: '#/components/schemas/CurrencyPriceDef'
        refundableAmount:
          $ref: '#/components/schemas/CurrencyPriceDef'    
        newBooking: 
          oneOf:
            - $ref: '#/components/schemas/Booking'
            - $ref: '#/components/schemas/BookingRef'
      required:
        - reimbursementStatus
        - exchangeFee
        - refundableAmount
        - newBooking

    RefundOfferConfirm:
      type: object
      description: >-
        Changes the refund offer to status CONFIRMED
      properties:
        confirmedRefundOfferId:
          type: string
          format: uuid
          description: id of the refund offer
            
    RefundDef:
      type: object
      description: >- 
        result of a successful confirmation of a refund. 
      properties:
        reimbursementStatus:
          description: >-
            If set to IMMEDIATE the distributor is allowed to return the 
            reimbursement amount immediately.
          type: string
          enum:
            - IMMEDIATE
            - DELAYED
        reimbursementDateTime:
          type: string
          format: date-time
        appliedOverruleCode:
          $ref: '#/components/schemas/AfterSaleReasonDef'
        refundFee:
          $ref: '#/components/schemas/CurrencyPriceDef'
        refundableAmount:
          $ref: '#/components/schemas/CurrencyPriceDef'    
        newBooking: 
          oneOf:
            - $ref: '#/components/schemas/Booking'
            - $ref: '#/components/schemas/BookingRef'
      required:
        - reimbursementStatus
        - refundFee
        - refundableAmount

    OfferSearchDef:
      type: object
      description: >-
        Search parameter for an offer search on offers not based on a trip (e.g. passes)
      properties:
        searchTags:
          description: >-
            list of tags to search for
          type: array
          items:
            type: string
        nutsCodes:
          description: >-
            Nomenclature des units territoriales statistiques COMMISSION REGULATION (EU) No 31/2011
          type: array
          items:
            type: string
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'
        travelPeriod:
          type: array
          items:
            type: string
            format: date-time
        passengers:
          type: array
          items:
            $ref:  '#/components/schemas/Passenger'  
        requestedFulfillmentOptions: 
          type: array
          items:
            $ref:  '#/components/schemas/FulfillmentOption' 
        offerSearchCriteria:
            $ref:  '#/components/schemas/OfferSearchCriteria'
        embed:
          description: >-
            Influences whether referenced resources are returned in full or as references only. 
          type: array
          items:
            type: string
            enum:
              - OFFERPARTS
              - NONE
              - ALL
            default: ALL
              
    NonTripOfferCollectionDef:
      type: array
      items:
        $ref: '#/components/schemas/NonTripOfferDef'
    
    NonTripOfferDef:
      type: object
      description: >-
        Non trip offers do not reference a trip, thus no reservations can be offered by definition.
      properties:
        offerSummary:
          $ref: '#/components/schemas/OfferSummary'
        requestedInformation:
          $ref: '#/components/schemas/RequestedInformation'
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time 
        availableFulfillmentTypes:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentType'
        admissions:
          type: array        
          items: 
            $ref: '#/components/schemas/Admission'
        ancillaries:
          type: array        
          items:  
            $ref: '#/components/schemas/Ancillary'
        fares:
          type: array
          items:
            $ref: '#/components/schemas/FareOnlineDef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
            
    TransportableDef:
      type: object
      description: >- 
        Transportables which are handled similar to passengers like dogs, bicycles, car transport.
        These transportables might need a ticket or reservation.
      properties:
        type:
          $ref: '#/components/schemas/TravelerTypeDef'
        car:
          type: object
          properties:
            weight:
              type: integer
              format: int32
            length:
              type: integer
              format: int32
            width:
              type: integer
              format: int32
            height:
              type: integer
              format: int32
            model:
              type: string
              description: >-
                free text description of the model (e.g. BMW X5)       
            attachedItems:
              description: >-
                indication of items attached to the car
              type: array
              items:
                type: string
                x-extensible-enum:
                 - ROOF_RACK
                 - BICYCLE_STAND
            plate:
              description: >-
                The trailer plate is a personal data item and must not be provided in an offer request. 
                It must be patched into the offer after the customer accepted the offer for booking.
              type: string
          required:
            - weight
            - length
            - width
            - height
            - model
        motorCycle:
          type: object
          properties:
            includingSideCar:
              type: boolean
              default: false
            plate:
              description: >-
                The trailer plate is a personal data item and must not be provided in an offer request. 
                It must be patched into the offer after the customer accepted the offer for booking 
              type: string   
          required:
            - includingSideCar
        trailer:
          type: object
          properties:
            weight:
              description: weight in kg
              type: integer
              format: int32
            length:
              description: length in cm
              type: integer
              format: int32
            width:
              description: width in cm
              type: integer
              format: int32
            height:
              description: length in cm
              type: integer
              format: int32
            plate:
              description: >-
                The trailer plate is a personal data item and must not be provided in an offer request. 
                It must be patched into the offer after the customer accepted the offer for booking 
              type: string
          required:
            - weight
            - length
            - width
            - height

    Problem:
      type: object
      description: >-
        Problem Details for HTTP APIs (RFC 7807) defines a "problem detail" as a way
        to carry machine-readable details of errors in a HTTP response to avoid
        the need to define new error response formats for HTTP APIs.
        See: https://tools.ietf.org/html/rfc7807
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://example.com/probs/passenger-too-young'
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.
    #### Fare-specific elements begin

    FareOnlineDef:
      type: object
      properties:
        id:
          description: unique id of the fare item to be included in accounting
          type: string
        type:
          $ref: '#/components/schemas/FareTypeDef'
        name:
          $ref: '#/components/schemas/TextDef'
        fareDetailDescription:
          $ref: '#/components/schemas/TextDef'
        price:
          $ref: '#/components/schemas/PriceOnlineDef'
        regionalConstraint:
          $ref: '#/components/schemas/RegionalConstraintOnlineDef'
        serviceConstraint:
          $ref: '#/components/schemas/ServiceConstraintOnlineDef'
        carrierConstraint:
          $ref: '#/components/schemas/CarrierConstraintOnlineDef'
        regulatoryConditions:
          $ref: '#/components/schemas/RegulatoryConditionsDef'
        serviceClass:
          $ref: '#/components/schemas/ServiceClassDef'
        serviceLevel:
          $ref: '#/components/schemas/ServiceLevelOnlineDef'
        afterSalesCondition:
          $ref: '#/components/schemas/AfterSalesConditionOnlineDef'
        combinationConstraint:
          $ref: '#/components/schemas/FareCombinationConstraintOnlineDef'
        fulfillmentConstraint:
          $ref: '#/components/schemas/FulfillmentConstraintOnlineDef'
        reductionConstraint:
          $ref: '#/components/schemas/ReductionConstraintOnlineDef'
        legacyAccountingIdentifier:
          $ref: '#/components/schemas/LegacyAccountingIdentifierDef'
        travelValidityConstraint:
          $ref: '#/components/schemas/TravelValidityConstraintOnlineDef'
        reservationDetails:
          $ref: '#/components/schemas/ReservationDetails'            
        placeSelection:
          $ref: '#/components/schemas/PlaceSelectionDef' 
        reservationLegacyParameter:
          $ref: '#/components/schemas/LegacyReservationParameterDef'
        coveredSection:
          $ref: '#/components/schemas/TravelSectionDef'
        requiredPersonalData:
          $ref: '#/components/schemas/PersonalDataConstraintOnlineDef'
      required:
        - id
        - type
        - regionalConstraint
        - combinationConstraint
        - travelValidityConstraint
        - afterSalesCondition
        
    RegulatoryConditionsDef:
      description: >- 
         General conditions applied to cover legal regulations within the area of validity. allocators must reflect these terms and
         conditions in the conditions of combined offers and indicate them to the customer where required. Which indications are
         mandatory to be shown to the customer will be defined in the SCICs
          - CIV: terms and conditions according to COTIV regulation
          - MD:  terms and conditions according to SMPS regulation
          - EU-PRR: terms and conditions according to EU-PRR regulation
      type: array
      items: 
         type: string
         enum:
         - CIV
         - MD
         - EU-PRR
        
    LegacyAccountingIdentifierDef:
      description: identifier of the fare in the current 301 accounting file
      type: object
      properties:
        serialId:
          description: sequential number of regional validities
          type: integer
          format: int32
          minimum: 0
          maximum: 99999
        addId:
          description: >-
            Sequential number of regional validities (leading positions in case the series is too short
          type: integer
          format: int32
          minimum: 0
          maximum: 99
        tariffId:
          description: sequential number of the fares for one regional validity
          type: integer
          format: int32
          minimum: 0
          maximum: 9999
      
    CalendarOnlineDef:
      type: object
      properties:
        fromDate:
          type: string
          format: date-time
        untilDate:
          type: string
          format: date-time
        dates:
          description: >-
            dates included in the calendar. In case no dates are provided the range is assumed to be valid
          type: array
          items:
            type: string
            format: date-time
        utcOffset:
          description: >- 
            offset to UTC in minutes (number of minutes to be added to get UTC dates)
          type: integer
          format: int32
        
    TravelValidityConstraintOnlineDef:
      type: object
      description: >-
        travel validity data are needed to create barcode and control data (ETCD)
        in allocator mode even in case they have been checked during the online sale
      properties:
        validTravelDates:
          $ref: '#/components/schemas/CalendarOnlineDef'
        validityRange:
          type: object
          properties:
            timeUnit:
              type: string
              enum:
                - DAYS
                - HOURS
                - MINUTES
            value:
              type: integer
              format: int32
            hoursAfterMidnight:
              description: validity extended after midnight
              type: integer
              format: int32
          required:
            - timeUnit
            - value  
        excludedTimeRange:
          description: time ranges excluded from the validity (e.g. off peak fulfillments)
          type: array
          items:
            type: object
            properties:
              from:
                description: minutes of the day in the time zone of travel
                type: integer
                format: int32
              until:
                description: minutes of the day in the time zone of travel
                type: integer
                format: int32
              scope:
                description: 'START_OF_TRAVEL,COMPLETE_RANGE'
                type: string
            required:
              - from
              - until
              - scope
        numberOfTravelDays:
          description: number of allowed travel days (e.g. 3 travel days within 2 weeks)
          type: integer
          format: int32
        returnConstraint:
          description: a return trip with the same carrier must be sold in combination
          type: object
          properties:
            latestReturn:
              description: number of days after departure or start of validity of the last return
              type: integer
              format: int32
            earliestReturn:
              description: number of days after departure or start of validity of the earliest return
              type: integer
              format: int32
            excludedWeekdays:
              description: weekdays (ISO day of the week, 1 = Monday) between travel and return where travel is not allowed
              type: array
              items:
                type: integer
                format: int32
          required:
            - latestReturn
            - earliestReturn
      required:
        - validityRange
      
    TravelerTypeDef:
      description: >- 
        Subset of the values from the traveler type code list IRS 90918-10 
      type: string
    
    LayoutsDef:
      type: object
      properties:
        layouts:
          type: array
          items:
            $ref: '#/components/schemas/CoachLayoutDef'
      
    CoachLayoutDef:
      type: object
      description: >-
        coach layout providing data to draw a coach layout. The items of a coach
        are located via coordinates with (0,0) in the upper left corner. All
        coordinates are given without sign. 
      properties:
        id:
          type: string
        places:
          description: list of places included in the layout
          type: array
          items:
            type: object
            properties:
              x:
                description: >-
                  horizontal coordinate of the center of the place
                type: integer
                format: int32
              y:
                description: >-
                  vertical coordinate of the center of the place
                type: integer
                format: int32
              id:
                description: >-
                  id of the graphical item type. Code list according to UIC90918-1
                  graphical item type e.g. seat = 1, berth = 2, couchette = 3
                type: string
              number:
                description: place number as displayed physically on the place
                type: string
              direction:
                description: >-
                  Direction of a place, defined optional as it might be omitted in
                  case of berths in future. 
                  Code list according to UIC90918-1
                   - value R: to right
                   - value L: to left
                   - value U: up (from right side of a coach pointing to the middle of the aisle)
                   - value D: down (from right side of the coach pointing to the middle of the aisle)
                type: string
              remarkId:
                description: >-
                  Remark concerning the place (e.g. to be used in a tool tip).
                  Code list according to UIC90918-1 
                   - value 1: place might have a table
                   - value 2: table at the place might be missing 
                   - value 3: place might have a different direction 
                   - value 4: place might have a table and a different direction 
                   - value 5: table at the place might be missing and place might have a different direction
                   - value 6: place might be in compartment
                   - value 7: place might be in open space  
                type: string
              zOrder:
                description: >-
                  Graphical layer where this item has to be placed. 
                  Code list according to UIC90918-1
                   - value 0: lowest layer usually used for walls 
                   - value 1: middle layer usually used by places
                   - value 2: top layer usually used by icons
                type: string
            required:
              - x
              - y
              - id
              - number
        signs:
          type: array
          items:
            type: object
            properties:
              x:
                description: >-
                  horizontal coordinate of the center of the place
                type: integer
                format: int32
              y:
                description: >-
                  vertical coordinate of the center of the place
                type: integer
                format: int32
              id:
                description: >-
                  id of the graphical item type. Code list according to UIC90918-1
                  graphical item type e.g. silence area sign = 116
                type: string
              zOrder:
                description: >-
                  graphical layer where this item has to be placed. 
                    0 = lowest layer usually used for walls 
                    1 = middle layer usually used by places
                    2 = top layer usually used by icons
                type: string
            required:
              - x
              - y
              - id
        internals:
          type: array
          items:
            type: object
            properties:
              x:
                description: >-
                  horizontal coordinate of the center of the place
                type: integer
                format: int32
              y:
                description: >-
                  vertical coordinate of the center of the place
                type: integer
                format: int32
              id:
                description: >-
                  id of the graphical item type. Code list according to UIC90918-1
                  graphical item type e.g. wall with angle to right height covers
                  three places = 25
                type: string
              zOrder:
                description: >-
                  graphical layer where this item has to be placed. 
                    0 = lowest layer usually used for walls 
                    1 = middle layer usually used by places
                    2 = top layer usually used by icons
                type: string
              mounting:
                description: >-
                  indicates, that the item is located at the upper border (U), the
                  lower border (L), goes from upper to lower border (E) or is
                  placed free (F)
                type: string
            required:
              - x
              - y
              - id
              - zOrder
        gridsize:
          type: object
          properties:
            x:
              type: integer
              format: int32
            y:
              type: integer
              format: int32
        containerType:
          type: string
          default: RECTANGLE
      required:
        - id

    ReductionConstraintOnlineDef:
      type: object
      properties:
        requiredCards:
          description: >-
            One of the listed cards is required to be valid at the time of travel.
          type: array
          items:
            $ref: '#/components/schemas/ReductionCardReferenceDef'
      required:
        - requiredCards
 
    CompanyDef:
      description: >-
        RICS company code or the upcoming compatible ERA company code. In case proprietary codes are used on a bilateral base the 
        codes must have at least 5 positions and start with x
      type: string

    FareCombinationModelDef:
      type: object
      properties:
        model:
          description: >-
            Possible models are SEPARATE_TICKET, SEPARATE_CONTRACT, CLUSTERING, COMBINING. 
            The models need to be supported by the allocator.
          type: string
        combinableCarrier:
          description: >-
            List of all carriers where the model can be applied, in case the list is empty
            all combinations are allowed.
          type: array
          items:
            $ref: '#/components/schemas/CompanyDef'
        isValidOnlyWhenCombined:
          description: >-
            This combination model applies only in case the fare is combined with another carrier
          type: boolean
          default: false
        referenceCluster:
          description: >-
            In case of CLUSTERING model: the cluster to which the fare belongs
          type: string
        allowedClusters:
          description: >-
            In case of CLUSTERING model: the other clusters that allow a combination
          type: array
          items:
            type: string
        allowedAllocators:
          description: >-
            List of allowed allocators. If the list is empty all allocators with a sales contract are permitted.
          type: array
          items:
            $ref: '#/components/schemas/CompanyDef'
        allowedCommonContracts:
          description: >-
            List of carriers where a common contract with separate fulfillments are allowed.
          type: array
          items:
            $ref: '#/components/schemas/CompanyDef'
      required:
        - model
 
    FareCombinationConstraintOnlineDef:
      type: object
      properties:
        combinationModels:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/FareCombinationModelDef'
      required:
        - combinationModels
 
    AfterSalesConditionOnlineDef:
      type: object
      properties:
        afterSalesRules:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AfterSalesRuleOnlineDef'
      required:
        - afterSalesRules
 
    PriceOnlineDef:
      type: object
      description: allows specifying a price in multiple currencies
      properties:
        price:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CurrencyPriceDef'
      required:
        - price
 
    RelativeTimeDef:
      type: object
      properties:
        timeUnit:
          description: >-
            Time unit in days, hours or minutes.
          type: string
          enum:
            - DAYS
            - HOURS
            - MINUTES
        timeValue:
          type: integer
          format: int32
        timeReference:
          description: >-
            Time reference.
          type: string
          x-extensible-enum:
            - BEFORE_DEPARTURE
            - AFTER_DEPARTURE
            - AFTER_SALE
            - BEFORE_START_VALIDITY
            - AFTER_END_VALIDITY
      required:
        - timeUnit
        - timeValue
        - timeReference
 
    AfterSalesRuleOnlineDef:
      type: object
      properties:
        transactionType:
          description: code list Reason for after sale
          type: string
        fee:
          $ref: '#/components/schemas/CurrencyPriceDef'
        applicationTime:
          $ref: '#/components/schemas/RelativeTimeDef'
        applicationTimeStamp:
          description: Absolute application time (UTC) in case of online services
          type: string
          format: date-time
        isCarrierFee:
          description: indicates that the fee belongs to the carrier
          type: boolean
          default: true
        supportsIndividualContracts:
          description: Indicates that the after sales of this fare can be treated independently per person.
          type: boolean
          default: false
      required:
        - transactionType
      
    RegionalValidityDef:
      type: array
      items:
        type: object
        description: >- 
          One of the elements Zone, ViaStation, TrainLink, Line, or Polygon defining the regional validity
        properties:
          seqNb:
            description: order number of the list item
            type: integer
            format: int32
          zone:
            $ref: '#/components/schemas/ZoneDef'
          viaStations:
            $ref: '#/components/schemas/ViaStationsDef'
          trainLink:
            $ref: '#/components/schemas/TrainLinkDef'
          line:
            $ref: '#/components/schemas/LineDef'
          polygon:
            $ref: '#/components/schemas/PolygonDef'
    
    LineDef:
      type: object
      description: >-
         terminalStation - in case the product requires a destination within the zone (e.g. local ticket 
         to go to the main rail station). 
         entryStation - Station to enter the zone in case the product requires to enter the zone via a 
         specific station (e.g. local zone ticket to start from the main rail station).
      properties:
        binaryLineId:
          type: string
          description: >-
            Id to support local traffic standards (e.g. VDV,...).
        carrier:
          $ref: '#/components/schemas/CompanyDef'
        city:
          type: integer
          format: int32
        entryStation:
          $ref: '#/components/schemas/StationDetailsDef'
        lineId:
          type: array
          items:
            type: string
        terminalStation:
          $ref: '#/components/schemas/StationDetailsDef'
        nutsCode:
          description: >-
            Nomenclature des units territoriales statistiques  
             COMMISSION REGULATION (EU) No 31/2011
          type: string
      required:
        - carrier
    
    TrainLinkDef:
      type: object
      properties:
        fromStation:
          $ref: '#/components/schemas/StationDetailsDef'
        toStation:
          $ref: '#/components/schemas/StationDetailsDef'
        train:
          type: string
        travelDate:
          type: string
          format: date-time
          description: >-
            date and time of the departure where the train link starts
      required:
        - fromStation
        - toStation
        - train
        - travelDate
    
    PolygonDef:
      type: object
      properties:
        edge:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/GeoCoordinate'
    
    ViaStationsDef:
      type: object
      properties:
        isBorder:
          type: boolean
          default: false
        routeId:
          type: integer
          format: int32
        seriesId:
          type: integer
          format: int32
        alternativeRoute:
          type: array
          items:
            $ref: '#/components/schemas/ViaStationsDef'
        carrier:
          $ref: '#/components/schemas/CompanyDef'
        route:
          type: array
          items:
            $ref: '#/components/schemas/ViaStationsDef'
        serviceBrand:
          description: restriction to a specific service brand
          type: string
        station:
          $ref: '#/components/schemas/StationDetailsDef'
        fareReferenceStationSet:
          type: object
          description: reference to a list of stations included in the fare
          properties:
            carrier:
              $ref: '#/components/schemas/CompanyDef'
            code:
              type: string
            name:
              type: string
          required:
            - carrier
            - code
      required:
        - station
 
    ZoneDef:
      type: object
      description: >-
        carrier - carrier responsible for the transport.
        entryStation - Station to enter the zone in case the product requires to enter the zone via a specific station
        (e.g. local zone ticket to start from the main rail station).
        terminalStation - Terminal station in case the product requires a destination within the zone (e.g. local ticket
        to go to the main rail station).
      properties:
        binaryZoneId:
          type: string
          format: base64
          description: 
            Id to support local traffic standards (e.g. VDV,...)
        carrier:
          $ref: '#/components/schemas/CompanyDef'
        city:
          type: integer
          format: int32
        entryStation:
          $ref: '#/components/schemas/StationDetailsDef'
        terminalStation:
          $ref: '#/components/schemas/StationDetailsDef'
        zoneIds:
          description: to be used in bar codes
          type: array
          items:
            type: integer
            format: int32
        nutsCode:
          description: Nomenclature des units territoriales statistiques COMMISSION REGULATION (EU) No 31/2011
          type: string
      required:
        - carrier
 
    FulfillmentConstraintOnlineDef:
      type: object
      properties:
        acceptedControlSecurityTypes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ControlSecurityTypeDef'
        acceptedBarCodes:
          description: for SiD fulfillment one of the listed bar codes is required
          type: array
          items:
            description: >-
              Item according to IRS 90918-9: FCB, TLB, SSB
            type: string
            x-extensible-enum:
              - FCB
              - TLB
              - SSB
        requiredBarCodes:
          description: >-
            One of the listed bar codes must be provided.
          type: array
          items:
            type: string
        requiredSiS:
          description: >-
            To guarantee security in system (SiS) of the fulfillment one of the listed interfaces is required.
          type: array
          items:
            description: >-
              Interface type to ticket control data. REGISTRY means submitting
              the data to the central UIC registry. PEER_TO_PEER means data exchange
              is handled between the two parties directly.
            type: string
            x-extensible-enum:
              - REGISTRY
              - PEER_TO_PEER
        individualTicketingPermitted:
          description: a separate fulfillment per traveler is permitted
          type: boolean
      required:
        - acceptedFulfillmentTypes
        - individualTicketingPermitted
 
    PersonalDataConstraintOnlineDef:
      type: object
      properties:
        requiredData:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              dataItem:
                description: see code list IRS 90918-10
                type: string
              transfer:
                description: >-
                 Transfer mode: BOOKING, SIS_CONTROL, SID_CONTROL.
                type: array
                minItems: 1
                items:
                  type: string
                  x-extensible-enum:
                    - BOOKING
                    - SIS_CONTROL
                    - SID_CONTROL
              ticketHolderOnly:
                type: boolean
                default: false
              crossBorder:
                description: the data are required only in case one of the cross border conditions apply
                type: array
                items:
                  $ref: '#/components/schemas/CrossBorderConditionDef'
              fulfillmentType:
                description: type of fulfillment in case the personal data are required for that type only
                type: array
                items:
                  $ref: '#/components/schemas/ControlSecurityTypeDef'
            required:
              - dataItem
              - transfer
        allowedChanges:
          type: array
          items:
            type: object
            properties:
              acceptedReason:
                type: string
                x-extensible-enum:
                  - IN_GENERAL
                  - MARRIAGE
                  - DOCUMENT_CHANGE
                  - AGENT_ERROR
              timeLimit:
                description: the change is limited to n hours after booking confirmation
                type: integer
                format: int32
            required:
              - acceptedReason
 
    CrossBorderConditionDef:
      type: object
      properties:
        fromCountry:
          $ref: '#/components/schemas/CountryDef'
        toCountry:
          $ref: '#/components/schemas/CountryDef'
        affectedServiceBrands:
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
      required:
        - fromCountry
        - toCountry
 
    CountryDef:
      description: >-
        ISO 3166 2A codes
      type: string
      
    ControlSecurityTypeDef:
      description: >-
        SIP: secure paper tickets; SID: security in data (signed bar code); SIS: security in system
      type: string
      x-extensible-enum:
        - SIP
        - SID
        - SIS
    
    LegacyReservationParameterDef:
      type: object
      description: reservation parameter to support the UIC 90918-1 interface for booking
      properties:
        travelClass:
          description: 90918-1 class code in reservation
          type: string
        serviceLevelCode:
          description: service level code defined in UIC 90918-1
          type: string
        serviceCode:
          description: service code to be used in reservation
          type: string
        berthType:
          type: string
        coachTypeCode:
          type: string
        compartmentTypeCode:
          type: string
        tariff:
          type: string
      required:
        - travelClass
        - serviceLevelCode
        - serviceCode
          
    ReservationOnlineOptionDef:
      type: object
      properties:
        preferences:
          description: possible preferences to be requested in reservation without changing the fare
          type: array
          items:
            $ref: '#/components/schemas/ReservationOptionGroupDef'
        graphicalReservation:
          description: graphical reservation is supported, interface type "NO","UIC_918",..
          type: string
      
    ReservationOptionGroupDef:
      type: object
      properties:
        preferenceGroup:
          type: string
          example: 'SEAT_DIRECTION'
        preferences:
          type: array
          minItems: 1
          items:
            type: string
            example: 'FORWARD_FACING'
      required:
        - preferenceGroup
        - preferences
      
    CarrierConstraintOnlineDef:
      type: object
      description: >-
        Either excluded or included carriers can be set.
      properties:
        includedCarrier:
          type: array
          items:
            type: string
        excludedCarrier:
          type: array
          items:
            type: string
    
    ServiceClassIdDef:
      description: >-
       Level of quality, finer grained than the comfort class.
      type: string
      x-extensible-enum:
        - BEST
        - HIGH
        - STANDARD
        - BASIC
    
    ServiceLevelOnlineDef:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ServiceLevelIdDef'
        textRef:
          description: id of the text describing the service level
          type: string
        text:
          $ref: '#/components/schemas/TextDef'
        includesClassName:
          description: indicates that the class name is included
          type: boolean
          default: true
        reservationParameterId:
          type: string
      required:
        - id
        - text
    
    ServiceConstraintOnlineDef:
      type: object
      description: >-
        Either excluded or included service brands can be set.
      properties:
        includedServiceBrands:
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
        excludedServiceBrands:
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
    
    FareTypeDef:
      description: >-
        Basic UIC fare types used in 90918-10, 90918-4, and 90918-9.
      type: string
      x-extensible-enum:
        - ADMISSION
        - RESERVATION
        - INTEGRATED_RESERVATION
        - ANCILLARY
    
    RegionalConstraintOnlineDef:
      type: object
      description: >-
        Regional constraint of the fare- offline bulk data use the id of connection points whereas in an online environment the connection point is included
      properties:
        entryConnectionPointId:
          description: connection point connecting two fare regimes
          type: string
        entryConnectionPoint:
          $ref: '#/components/schemas/ConnectionPointDef'
        exitConnectionPointId:
          description: connection point connecting two fare regimes
          type: string
        exitConnectionPoint:
          $ref: '#/components/schemas/ConnectionPointDef'
        regionalValidity:
          $ref: '#/components/schemas/RegionalValidityDef'
        distance:
          description: Distance in km for statistics
          type: integer
          format: int32
      required:
        - regionalValidity
    
    TranslationDef:
      type: object
      properties:
        language:
          type: string
          description: language code following RFC2616-sec14.4
        text:
          type: string
        shortText:
          type: string
      required:
        - language
        - text
    
    TextDef:
      type: object
      description: directly included text in case of online services
      properties:
        id:
          type: string
        translations:
          type: array
          items:
            $ref: '#/components/schemas/TranslationDef'
        text:
          type: string
        shortText:
          type: string
      required:
        - id
        - text
    
    ConnectionPointDef:
      type: object
      description: >-
        Connection point connecting two fare regimes. The connection is possible between stations of the two provided station sets. A legacy border point code might be provided as an additional code within the stations (code list BORDER_POINT). In case the connection point is a real station this station is indicated. In case the connection point is inbetween stations for each side of the border real  stations must be provided. Multiple sets of station can be provided in the rare case that the connection point conects more than two station (A-B and A-C). Multiple stations within a set at one side of the border might be provided in case of changes (new stations build near the border). Providing the UIC code for the station is mandatory. 
      properties:
        id:
          type: string
        name:
          type: string
        stationSets:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/StationDetailsDef'
      required:
        - id
        - stationSets

    ##### Fare-specific elements end
