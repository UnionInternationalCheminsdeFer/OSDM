openapi: 3.0.3
servers:
  - description: fsm dummy server
    url: 'https://virtserver.swaggerhub.com/Real-IT/FSM_MVP/1.0.0'
info:
  title: UIC 90918-10 - OSDM
  version: 0.9.0
  description: |
    Specifications for the OSDM API standard. The OSDM specification supports two
    modes of operation: Distributor Mode and Allocator Mode. The API works the same in 
    both mode, except that in allocator mode the API also returns fare information.
    
    The OSDM specification combines the nTM as well as the FSM initiative into one aligned
    API interface.
  contact:
    name: Nicolas Selleslagh
    url: https://confluence.sbb.ch/display/FSM20
    email: Nicolas.Selleslagh@benerail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Journey
    description: >-
      resources to access timetable-only information
  - name: Offers
    description: >-
      resources to get bookable offers
  - name: Offer Parts
    description: >-
      resources to manipulate parts of an offer consisting of, e.g., admissions, reservations,
      integrated reservations or ancillaries 
  - name: Bookings
    description: >-
      resources to manipulate bookings
  - name: Passengers
    description: >-
      resources to manipulate a passenger's information at every stage of the flow
  - name: Products
    description: >-
      resources to retrieve products information on one or more products
  - name: Fulfillments  
    description: >-
      resources to retrieve fulfillments, e.g. tickets
  - name: RefundOffers
    description: >-
      resources to get and accept a refund offer
paths:
  /locations:
    get:
      tags:
        - Journey
      summary: >-
        The GET locations service returns matching locations for a given match value based on MatchType.
      operationId: getLocations
      parameters:
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4). 
            Supporting locations in English (en) is a most.
          schema:
            type: string
          required: false
        - name: matchValue
          in: query
          schema:
            type: string
          required: true
        - name: matchType
          in: query
          description: >-
            Defines the search token type in matchValue (TEXT for names;
            ANY_CODE fallbacks to the code supported by the underlying system
            (like UIC, EVA or RESARAIL); UIC/EVA/RESARAIL forces stations
            defined by the appropriate code-system explicitly (national
            aspect); COORDS given as "lat,lon").
          required: true
          schema:
            type: string
            default: NAME
            enum:
              - NAME
              - ANY_CODE
              - CODELIST
              - COORDS
        - name: matchCodeList
          in: query
          description: >-
            In case match-value is code-list, the code-list to search into
            TODO clarify
          schema:
            type: string
          required: false
        - name: countryCode
          in: query
          description: >-
            Search locations for a specific country (ISO 3166, 2-digits). Meant
            for autocomplete functionality. A separate endpoint or channel would
            be provided for mass downloads
          required: false
          schema:
            type: string
            example: CH
        - name: limit
          in: query
          description: 'The number of locations to be returned ([1..50]).'
          required: false
          schema:
            type: number
            format: int32
            default: 10
        - in: query
          name: includeBehavior
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - LOCATIONS
      responses:
        '200':
          description: the set of stations matching the provided input
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/LocationRef'
                        - $ref: '#/components/schemas/Location'
                    description: >-
                      Depending on the includeBehavior either references or full location definitions are returned.
        '400':
          description: bad input parameter
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
                
  '/locations/{locationId}':
    get:
      tags:
        - Journey
      summary: >-
        The GET locations service retrieves a location element.
      operationId: getLocationsId
      parameters:
        - in: path
          name: locationId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the location resource to be retrieved.
      responses:
        '200':
          description: the retrieved location resource
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'public, max-age=43200'
                description: >-
                  A location resource is persistent and has a long time to live to allow long-term caching. Any update of
                  the location information will lead to the creation of a new resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: bad input parameter
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
  '/trips/{tripId}':
    get:
      tags:
        - Journey
      summary:
        The GET trips service retrieves a trip element representing a train travel made of one or more
        segments. Depending on the includeBehavior either references or full location definitions will be returned
      operationId: getTripsId
      parameters:
        - in: path
          name: tripId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the trip to get.
        - in: query
          name: stopBehavior
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
              - ORIGIN_DESTINATION_ONLY
              - REAL_BOARDING_ALIGHTING
        - in: query
          name: includeBehavior
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - LOCATIONS
      responses:
        '200':
          description: the requested trip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripDef'
        '400':
          description: bad input parameters
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
  '/trips-collection/{tripsCollectionId}':
    get:
      tags:
        - Journey
      summary: >-
        The GET trips-collection service returns a collection of different trips for a specified
        origin and destination (and via). The unique codes of the origin and
        destination can be resolved using the locations service.
      operationId: getTripsCollectionId
      parameters:
        - in: path
          name: tripsCollectionId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the trip to get.
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4).
          schema:
            type: string
          required: false
        - name: scrollContext
          in: query
          description: >-
            Based on a previous search-response, earlier or later connections
            for the same trip can be retrieved by scrolling back and forth (by
            a pointer-context). You must use the same request parameters as in
            the original trips-request and the given values in the response for
            either "scrollBackContext" or "scrollForwardContext" for optional
            scrolling.
          schema:
            type: string
          required: false
        - in: query
          name: stopBehavior
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
              - ORIGIN_DESTINATION_ONLY
              - REAL_BOARDING_ALIGHTING
        - in: query
          name: includeBehavior
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - TRIPS
                - TRIPS.LOCATIONS
      responses:
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripsCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /trips-collection:
    post:
      tags:
        - Journey
      summary: >-
        The GET tripsCollection service returns different trips for a specified
        origin and destination (and via). The unique codes of the origin and
        destination can be resolved using the locations service.
      operationId: postTripsCollection
      parameters:
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4).
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripSearchCriteria'
      responses:
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripsCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /trip-offers-collection/{tripOffersCollectionId}:
    get:
      tags:
        - Offers
      summary: >-
        The GET tripOffersCollection service returns different offers and trips for a
        specified origin and destination (and via). The unique codes of the
        origin and destination can be resolved using the locations service.
      operationId: getTripOffersCollectionId
      parameters:
        - in: path
          name: tripOffersCollectionId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the trip to get.
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4).
          schema:
            type: string
          required: false
        - name: scrollContext
          in: query
          description: >-
            Based on a previous search-response, earlier or later connections
            for the same trip can be retrieved by scrolling back and forth (by
            a pointer-context). You must use the same request parameters as in
            the original trips-request and the given values in the response for
            either "ScrollBack-Context" or "ScrollForward-Context" for optional
            scrolling.
          schema:
            type: string
          required: false
        - in: query
          name: stopBehavior
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops within a segment;
            ALL_STOPS returns additionally intermediate stops within segments).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
              - ORIGIN_DESTINATION_ONLY
              - ALL_STOPS                    
        - in: query
          name: includeBehavior
          description: >-
            Influences whether referenced resources are returned in full or as references only.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - TRIPOFFERS
                - TRIPOFFERS.TRIPS
                - TRIPOFFERS.TRIPS.LOCATIONS
                - TRIPOFFERS.OFFERS
                - TRIPOFFERS.OFFERS.OFFERPARTS
                - TRIPOFFERS.PASSENGERS
      responses:
        '200':
          description: Trip Offer Collection(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripOffersCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'          
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
          
  /trip-offers-collection:
    post:
      tags:
        - Offers
      summary: >-
        The POST tripsOffersCollection service returns different trip offers for a
        specified origin and destination (and via) locations. 
      operationId: postTripOffersCollection
      parameters:
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4).
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripOfferRequest'
      responses:
        '200':
          description: Collection of trip offers found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripOffersCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error        
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /trip-offers/{tripOfferId}:
    get:
      tags:
        - Offers
      summary: >-
        The GET trip-offers service returns different offers for a specified trip offer id.
      operationId: getTripOffersId
      parameters:
        - in: path
          name: tripOfferId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the trip to get.
        - in: query
          name: includeBehavior
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL              
                - TRIPS
                - TRIPS.LOCATIONS
                - OFFERS
                - OFFERS.OFFERPARTS
                - PASSENGERS
      responses:
        '200':
          description: Trip offer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripOffer'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'         
        '501':
          description: Not implemented     
          
          
  '/offers/{offerId}':
    get:
      tags:
        - Offers
      summary: >-
         The GET offers service returns the offer with the requested included sub resources in a given state.
      operationId: getOffersId
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the trip to get.
        - in: query
          name: includeBehavior
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - OFFERPARTS
                - TRIP
                - TRIP.LOCATIONS
      responses:
        '200':
          description: Offer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
         
  '/offers/{offerId}/passengers':
    get:
      tags:
        - Passengers
      summary: >-
        The GET passenger service retrieves passenger's information in an offer. The same informatiojn can be retrieved via getOffer.
      operationId: getPassengerInOffer
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer holding the passengers
      responses:
        '200':
          description: Passenger found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PassengerDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented         
   
    patch:
      tags:
        - Passengers
      summary: >-
        The PATCH passenger service allows updating passenger's information in an offer immediately before confirmation. 
      description: >-
        The passengers updated are provided as a list. The PATCH allows to change attributes but not to add or remove passengers.
      operationId: patchPassengerInOffer
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer holding the passengers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PassengerDef'
      responses:
        '200':
          description: Passenger successfully patched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PassengerDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented      
          
  '/bookings/{bookingId}/passengers':
    get:
      tags:
        - Passengers
      summary: >-
        The GET passenger service retrieves the passenger information within a booking. The same informatiojn can be retrieved via getBooking.
      operationId: getPassengersInBooking
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the booking holding the passengers
      responses:
        '200':
          description: Passenger found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PassengerDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented      
    patch:
      tags:
        - Passengers
      summary: >-
        The PATCH passenger service allows updating passenger's information in a booking. The passengers updated are provided as a list. The PATCH allows to change attributes but not to add or remove passengers.
      operationId: patchPassengersInBooking
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer holding the passengers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PassengerDef'
      responses:
        '200':
          description: Passenger successfully patched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PassengerDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented           
          
  '/passengers/{passengerId}':
    get:
      tags:
        - Passengers
      summary: >-
       The GET passenger service returns the passenger's information.
      operationId: getPassengersId
      parameters:
        - in: path
          name: passengerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the passenger to get.
      responses:
        '200':
          description: Passenger found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassengerDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - Passengers
      summary: 
        The PATCH passenger service allows updating a passenger's information.
      operationId: patchPassenger
      parameters:
        - in: path
          name: passengerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the passenger to get.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassengerDef'
      responses:
        '200':
          description: Passenger successfully patched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassengerDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/products/{productId}':
    get:
      tags:
        - Products
      summary: >-
        The GET product service returns the information on products with the id provided.
      operationId: getProductsId
      parameters:
        - in: path
          name: productId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'public, max-age=43200'
                description: >-
                  A product resource has a long time to live to allow long-term caching. Any update of the product 
                  information will lead to the creation of a new resource.
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/offers/{offerId}/admissions/{admissionId}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The GET admission service returns the information on the admission with the id provided.
      operationId: getAdmissionId
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: admissionId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the admission to get.
      responses:
        '200':
          description: Admission found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admission'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/offers/{offerId}/placeSelections/{placeSelectionId}':
    patch:
      tags:
        - Offer Parts
      summary: >-
        The PATCH of the place selections service allows updating reservation elements, to update the desired
        selection of places and to retrieve selectable places for a graphical display
      description: >-
        The patch can be used to update the selection of place properties, the available places for graphical 
        displays, the selected optional place properties for a subsequent booking and the selected places from
        a graphical display. The update response will show the available/accepted properties. An update with
        empty available places will update the available places list in the reply.
      operationId: patchPlaceSelectionId
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer to patch.
        - in: path
          name: placeSelectionId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the placeSelection object to be patched.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceSelectionDef'
      responses:
        '200':
          description: Place successfully selected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceSelectionDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented        
          
          
  '/offers/{offerId}/reservations/{reservationId}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The GET reservation service returns the information on the reservation with the id provided.
      operationId: getReservationsId
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: reservationId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the reservation to get.
      responses:
        '200':
          description: Reservation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/offers/{offerId}/integrated-reservations/{integratedReservationId}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The GET integrated-reservation service returns the information on the
        IntegratedReservation with the id provided.
      operationId: getIntegratedReservationsId
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.      
        - in: path
          name: integratedReservationId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the IntegratedReservation to get.
      responses:
        '200':
          description: Integrated reservation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegratedReservation'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/offers/{offerId}/ancillaries/{ancillaryId}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The GET ancillaries service returns the information on the ancillary with the id provided.
      operationId: getAncillariesId
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: ancillaryId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the ancillary to get.
      responses:
        '200':
          description: Ancillary found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ancillary'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

  '/offers/{offerId}/fares/{fareId}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The GET fares service returns the information on the ancillary with the id provided.
      description: >-
        For the fares only the start and the end location are considered.
        Fares are only returned if the API is called as allocator with the correct grants.
        Otherwise a forbidden message is returned. 
      operationId: getFaresId
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: fareId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the fares to get.
      responses:
        '200':
          description: Fare found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FareOnlineDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

  /bookings/search:       
    post:
      tags:
        - Bookings
      summary: >-
        The POST bookings search service allows to search for and find bookings based on a set of criteria. It
        returns a list of booking ids.
      description: >-
        There are searching criteria that need to be supported. by passenger 
        attributes (first name, name, date-of-birth), by booking reference (e.g. PNR, 
        Auftragsnummer) or by fulfillment reference (e.g. ticket number).
      operationId: getBookings
      parameters:
        - in: query
          name: includeBehavior
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - BOOKEDOFFERS.TRIP
                - BOOKEDOFFERS.TRIP.LOCATIONS
                - BOOKEDOFFERS
                - BOOKEDOFFERS.OFFERPARTS
                - PASSENGERS
                - TICKETS      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingSearchParameterDef'          
      responses:
        '200':
          description: Booking ids found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingSearchReplyDef'  

        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/bookings/create':       
    post:
      tags:
        - Bookings
      summary: >-
        The POST bookings create service allows to create a booking based on a previously requested offer. The offer id is provided in the query.
      operationId: postBookings
      parameters:
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4). 
          schema:
            type: string
          required: false
        - name: offerId
          in: query
          description: >-
            id of the offer to be booked
          schema:
            type: string
          required: true
      responses:
        '200':
          description: >- 
            Booking prebooked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

  '/bookings/{bookingId}':
    get:
      tags:
        - Bookings
      summary: >-
        The GET booking service returns the information on the booking with the id provided.
      operationId: getBookingsId
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
        - in: query
          name: includeBehavior
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - BOOKEDOFFERS.TRIP
                - BOOKEDOFFERS.TRIP.LOCATIONS
                - BOOKEDOFFERS
                - BOOKEDOFFERS.OFFERPARTS
                - PASSENGERS
                - TICKETS
      responses:
        '200':
          description: booking found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    delete:
      tags:
        - Bookings
      summary: >-
        The DELETE booking service deletes the booking with the id provided. It
        is only possible before the booking is confirmed.
      operationId: deleteBookingsId
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the booking to delete.
      responses:
        '200':
          description: Booking successfully cancelled
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: >-
             Conflict - the state of the server or resource does not allow the action (e.g. the booking was already confirmed)
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'          
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - Bookings
      summary: >-
        The PATCH bookings service triggers the confirmation of the booking
      operationId: confirmBooking
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the booking to be patched      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingPatchRequest'
      responses:
        '202': 
          description: Booking confirmed
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
   
  '/bookings/{bookingId}/fulfillments':
    patch:
      tags:
        - Fulfillments
      summary: >-
        The POST fulfillments service triggers the fulfillment of the booking based on the information 
        currently contained in the provided booking.
      operationId: postFulfillments
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the booking to be patched        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FulfillmentRequestDef'
      responses:
        '200':
          description: >-
            Fulfillment successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FulfillmentsDef'
        '202': 
          description: >- 
            Fulfillment successfully initiated, retrieve booking to retrieve the fulfillment documents
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: >-
             Conflict - the state of the server or resource does not allow the action (e.g. the booking was not confirmed)
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'            
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/fulfillments/{fulfillmentId}':
    get:
      tags:
        - Fulfillments
      summary: >-
        The GET ticket service returns the information on the ticket with the id provided.
      operationId: getFulfillmentId
      parameters:
        - in: path
          name: fulfillmentId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
      responses:
        '200':
          description: fulfillment found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fulfillment'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/bookings/{bookingId}/refundOffers':
    post:
      tags:
        - RefundOffers
      summary: >-
        The POST refundOffers initiates a refund process by creating a RefundOffer resource
        containing the needed information on the potential operation. One refund offer can then be 
        accepted via a PATCH, deleted or left to die at the end of its lifetime.
      operationId: postRefundOffersBookingId
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the booking.      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundOfferRequest'
      responses:
        '200': 
          description: Refund offer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundOffersCollection'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: >-
             Conflict - the state of the server or resource does not allow the action (e.g. the booking was not confirmed)
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'            
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
        
  '/bookings/{bookingId}/refundOffers/{refundOfferId}':
    get:
      tags:
        - RefundOffers
      summary: >-
        The GET refundOffer service returns the refund offer with the id provided.
      operationId: getRefundOffersId
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the booking  
        - in: path
          name: refundOfferId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the refund offer to get.
      responses:
        '200':
          description: RefundOffer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundOffer'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

    patch:
      tags:
        - RefundOffers
      summary: >-
        The PATCH refundOffers action allows to accept and confirm a refund operation. 
      operationId: patchRefundOffersId
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.      
        - in: path
          name: refundOfferId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundOfferConfirm'
      responses:
        '200':
          description: RefundOffer confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundOffer'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/bookings/{bookingId}/exchangeOffers':
    post:
      tags:
        - ExchangeOffers
      summary: >-
        The POST exchangeOffers initiates an exchange process by creating a ExchangeOffer resource
        containing the needed information on the potential operation. The proposition can then be 
        accepted via a PATCH, deleted or left to die at the end of its lifetime. 
      operationId: postExchangeOffersBookingId
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExchangeOfferRequestDef'
      responses:
        '200': 
          description: Refund offer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeOffersCollectionDef'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented   
          
  '/bookings/{bookingId}/exchangeOffers/{exchangeOfferId}':          
    patch:
      tags:
        - ExchangeOffers
      summary: >-
        The PATCH exchangeOffers action allows to accept and confirm an exchange operation. 
      operationId: patchExchangeOffersId
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the booking to be exchanged.  
        - in: path
          name: exchangeOfferId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the exchange offer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExchangeOfferConfirmDef'
      responses:
        '200':
          description: Exchange successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeDef'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

  '/coachLayouts':
    get:
      tags:
        - CoachLayouts 
      description: get coach layouts
      summary: >-
        Retrieve the coach layout description needed for graphical reservation    
      operationId: getCoachLayouts
      responses:
        '200':
          description: coach layouts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayoutsDef'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

  '/offers':
    post:
      tags:
        - Offers 
      description: >- 
        Get offers based on key words or regional information not linked to trips
      summary: >-
        Get offers not linked to trips based on key words or regional information (e.g. for passes or seasonal tickets)          
      operationId: searchOffers
      parameters:
        - in: query
          name: version
          description: schema version
          required: true
          schema:
            type: string
      requestBody:
        description: request parameter for offer search
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferSearchDef'
      responses:
        '200':
          description: offer collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonTripOfferCollectionDef'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

## Components

components:
  schemas:
    BookingSearchParameterDef:
      type: object
      description: >-
        parameter to be used to search for a booking. Contains personal data. 
        For a search via personal data an exact match of all elements 
        - first name, last name and date of birth - is mandatory. 
        In case a ticket holder is indicated the parameter must match the ticket holder. 
        TODO - legal check by CIT
      properties:
        passengerFirstName:
          type: string
          description: >-
            First name of a passenger in the booking.      
        passengerLastName:
          type: string
          description: >-
            Last name of a passenger in the booking.
        passengerDateOfBirth:
          type: string
          format: date
          description: >-
            Date of birth of a passenger in the booking.
        bookingReference:
          type: string
          format: date
          description: >-
            Human-readable booking reference for the booking, e.g. PNR.
        fulfillmentReference:
          type: string
          description: >-
            Human-readable fulfillment reference for the booking, e.g. ticket number.
        travelDateBegin:
          type: string
          format: date-time
          description: >-
            Begin date for the travel date range to search.
        travelDateEnd:
          type: string
          format: date-time
          description: >-
            End date for the travel date range to search.
        originId: 
          $ref: '#/components/schemas/LocationRef'
        destinationId:
          $ref: '#/components/schemas/LocationRef'

    BookingSearchReplyDef:
      description: >-
        Reply on a search for bookings
      type: object
      properties:
        bookings:
          type: array
          items: 
            $ref: '#/components/schemas/BookingRef'

    Link:
      type: object
      required:
        - contentTypes
        - href
        - relation
      properties:
        contentTypes:
          type: array
          example: '["application/json", "application/pdf"]'
          description: Possible content types of the resource.
          items:
            type: string
        href:
          type: string
          format: uri
          description: URL to the linked resource (no parameters needed).
          example: 'https://www.brussels.info/train-stations/'
        method:
          type: string
          example: GET
          description: HTTP method to call the action
        relation:
          type: string
          example: Get Map
          description: Relation of this link to the current entity.
        version:
          type: number
          format: int32
          example: 1
          description: Version of the current relation.
      description: >-
        The underlying system may provide additional links pointing on further
        information (such as HTML download links, web sites or extended APIs).
        Mechanism to add flexible extensions specific to an underlying system.
        
    Segment:
      description: >-
        A segment represents a subsection of a trip that is realized with the same transport. In railways it is typically one
        train (between the moment traveller steps on-board until stepping out of that train), but could be using a different means
        of transportation. 
      type: object
      properties:
        index:
          type: number
          format: int32
        origin:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
          description: departure point of the segment
        destination:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
          description: arrival point of the segment
        seqId:
          description: sequence number of the segment in the ordering of all segments of the trip
          type: number
          format: int32
        transfer:
          description: Transfer to the next vehicle not included in the request
          type: object
          properties:
            duration:
              description: Duration forseen to transfer to the next section
              type: number
              format: int32
            transferType:
              description: 'WALK,...'
              type: string
          required:
            - duration
            - transferType
          additionalProperties: false
        vehicle:
          type: object
          properties:
            numbers:
              description: >-
                Id of the vehicle, In case of two train s running in parallel
                there might be two train numbers.
              type: array
              items:
                type: string
            line:
              description: >-
                Line number in case the vehicle does not have a number
              type: string
            serviceBrand:
              $ref: '#/components/schemas/ServiceBrandCodeDef'
            transportMode:
              description: >-
                Transport mode (code list of MERITS). Optional for offer
                requests, included for alignment with FSM
              type: string
              additionalProperties: false
        stops:
          description: >-
            The list of stops encountered between origin and destination. origin is the first stop mentioned and destination the last 
            one. This list is only returned when the stopBehavior is set to REAL_BOARDING_ALIGHTING
          type: array
          items:
            type: object
            properties:
              station:
                oneOf:
                  - $ref: '#/components/schemas/LocationRef'
                  - $ref: '#/components/schemas/Location'
              departureDateTime:
                description: date and time in the time zone of the station
                type: string
                format: date-time
              arrivalDateTime:
                description: date and time in the time zone of the station
                type: string
                format: date-time
              index:
                type: number
                format: int32
                example: 5
                description: >-
                  Unique value [0..*] within the segment, guaranteeing an
                  ascending order, though the value may jump non-continuously.
              departureTrack:
                type: string
                example: 13A
                description: >-
                  The info about the departure-track of the stop. Format depends
                  on operator.
              arrivalTrack:
                type: string
                example: 13B
                description: >-
                  The info about the arrival-track of the stop. Format depends
                  on operator.
            description: >-
              Represents a location or station. Either a departure, arrival
              or intermediate stop along a segment of a trip.
            required:
              - station
            additionalProperties: false
      required:
        - seqId
        - vehicle
      additionalProperties: false
      
    StationDetailsDef:
      description: >-
        Details of a station. Station names are not translated but provided in some
        cases in multiple character sets in case stations are named in local
        characters and additionally in latin characters. In some countries stations have
        multiple names depending on the countries local languages.
      type: object
      properties:
        codeList:
          $ref: '#/components/schemas/StationCodeListDef'
        localCode:
          description: code unique with in the country only
          type: string
        code:
          type: string
        country:
          type: string
          description: the country the station is located in
        codes:
          type: array
          items:
            type: object
            properties:
              codeList:
                $ref: '#/components/schemas/StationCodeListDef'
              stationCode:
                type: string
                description: the code representing the station in the specified code-list
          description: >-
            The codes that can be used to represent the given station on the system.
            There can be several codes, in which case  it is relevant to have a list
            of couples.
        name:
          description: station name in local character set
          type: string
        nameLatin:
          description: station name in Latin character representation
          type: string
        nameAscIi:
          description: >-
            station name in ASCII characters (a-z,A-Z,0-9,/,:,(,) ) for legacy
            systems
          type: string
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinateDef'
        names:
          description: names depending on a local language of the country
          type: array
          items:
            type: object
            properties:
              language:
                type: string
              name:
                type: string
            additionalProperties: false
      additionalProperties: false

    StationDef:
      description: >-
        Used to represent a station location. This is a location that can be used as origin and destination for a train journey
      type: object
      properties:
        codeList:
             $ref: '#/components/schemas/StationCodeListDef'
        code:
          type: string
          description: the code representing the station in the specified code-list           
        country:
          type: string
          description: the country the station is located in
        name:
          type: string
          description : name of the station in the requested language
      required:
        - country
        - code
      additionalProperties: false

    LocationRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/location/2345'
        title:
          type: string
          example: Bruxelles-Midi
        station:
          $ref: '#/components/schemas/StationDef'

    Location:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          oneOf:
            - $ref: '#/components/schemas/StationDetailsDef'
            - $ref: '#/components/schemas/POI'
            - $ref: '#/components/schemas/Address'
            - $ref: '#/components/schemas/GeoCoordinateDef'
        links:
          type: array
          description: Context information required by the services.
          items:
            $ref: '#/components/schemas/Link'
      required:
        - country
        - LocationCode
      additionalProperties: false

    StationCodeListDef:
      description: >-
        Code list used for the station codes: UIC = UIC codes as used by merits
        (UIC country code + local code) = Default// UIC-R = UIC codes for
        reservation (UIC country code + local code reservation) // ERA = future
        ERA station code
      type: string
      default: UIC

    Address:
      type: object
      description: used to encode an address using the standard street address attributes
      properties:
        street:
          type: string
          example: Segantinistrasse
        houseNr:
          description: house number
          type: string
          example: 7
        city:
          description: city
          type: string
          example: Bern
        postalCode:
          description: postal code
          type: string
          example: 3006
        country:
          $ref: '#/components/schemas/CountryDef'
      required:
         - street,
         - city,
         - postalCode,
         - country

    POICodeList:
      description: Code list used for the POI codes.
      type: string
      default: UIC

    TripRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/trip/2345'
        title:
          type: string
          example: Bruxelles-Midi - Paris-Nord 2020/07/01 10:05

    TripDef:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        segments:
          type: array
          items:
            $ref: '#/components/schemas/Segment'
        origin:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
        destination:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
        duration:
          type: string
          description: >-
            Total duration over all segment's (format see
            https://www.w3.org/TR/xmlschema11-2/#duration)
          example: P2DT3H4M
        links:
          type: array
          description: Context information required by the services.
          items:
            $ref: '#/components/schemas/Link'
      additionalProperties: false

    ServiceBrandCodeDef:
      description: >-
        Service brand codes allowed in response, code list can be found on 
        [https://uic.org/passenger/passenger-services-group/article/service-brand-code-list]
        (https://uic.org/passenger/passenger-services-group/article/service-brand-code-list)
      type: number
      format: int32

    POI:
      description: >-
        POI (for point of Interest) represent a location that is not a train station but still relevant to the 
        description of the trip. It could be a public transport stop, an exhibition, an event hall, a shopping mall etc.
      type: object
      properties:
        codes:
          type: array
          items:
            type: object
            properties:
              codeList:
                $ref: '#/components/schemas/POICodeList'
              stationCode:
                type: string
                description: the code representing the POI in the specified code list
          description: >-
            The codes that can be used to represent the given POI on the system. There can be several codes, 
            in which case it is relevant to have a list of couples.
        country:
          description: country
          type: string
          example: Schweiz 
        name:
          description: name of the point of interest
          type: string
          example: Bern Baerengraben (Denkmal)
      required:
        - country
        - localCode
      additionalProperties: false

    TripsCollection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        tripsCollection:
          type: array
          items:
            oneOf:
             - $ref: '#/components/schemas/TripRef'
             - $ref: '#/components/schemas/TripDef'
        scrollBackContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll backward. 
            (Value depends on underlying system.)
        scrollForwardContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll forward.
            (Value depends on underlying system.)
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    GeoCoordinateDef:
      description: >-
        Used to provide any geo-encoded location, regardless of environment, using longitude and latitude coordinates.
      type: object
      properties:
        system:
          description: >-
            geo coordinate system indication: 
             - WGS84 = WGS 84 standard system,
             - GRS80 = (outdated) GRS 80 coordinate system
          type: string
          enum:
            - WGS84
            - GRS80
          default: WGS84
        accuracy:
          description: to be provided in degree. TODO clarify semantics
          type: number
          format: float
        latitude:
          description: >-
            Geographic coordinate that specifies the north-south position of a point on the earths surface
          type: number
          format: float
          example: 46.948825
        longitude:
          description: >-
            Geographic coordinate that specifies the east-west position of a point on the earths surface.            
          type: number
          format: float
          example: 7.439122
      required:
        - latitude
        - longitude
      additionalProperties: false

    TripSearchCriteria:
      type: object
      properties:
        includeBehavior:
          description: >-
            Influences whether referenced resources are returned in full or as references only
          type: array
          items:
            type: string
            enum:
              - TRIPS
              - TRIPS.LOCATIONS
        stopBehavior:
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          type: string
          default: ORIGIN_DESTINATION_ONLY
          enum:
            - ORIGIN_DESTINATION_ONLY
            - REAL_BOARDING_ALIGHTING
        origin:
          $ref: '#/components/schemas/Location'
        destination:
          $ref: '#/components/schemas/Location'
        viaValues:
          description: >-
            Ordered list of via locations within the trip. Unique code value has
            to be set according to valueType. Max number of via stations depends on the
            underlying system.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        travelDateTime:
          type: string
          format: date-time
        isArrival:
          description: >-
            Defines whether or not the given travel date/time is the latest
            arrival (true arriving at given time; false departing at given
            time).
          type: boolean
          default: false
        transportMode:
          description: >-
            transport mode (code list of MERITS). Optional for offer requests,
            included for alignment with FSM
          type: string
        serviceBrands:
          type: array
          items:
            type: string
        maxChanges:
          description: >-
            Max amount of transport-product changes (0 for direct
            connection, default/max=11)
          type: number
          format: int32
        extendedChangeTime:
          description: >-
            OOS MVP Indicates additional transfer time required where a transfer
            is present in the resulting trip. Expressed in minutes.
          type: number
          format: int32
        PRMAssistance:
          description: >-
            OOS MVP indicates a need for an itinerary where end-to-end PMR
            assistance and accessibility is possible.
          type: boolean
          default: false
      required:
        - originValue
        - destinationValue

    OfferSearchCriteria:
      type: object
      properties:
        flexibilities:
          description: Defines the flexibility levels desired in the fares returned
          type: array
          items:
            $ref: '#/components/schemas/Flexibility'
        serviceClasses:
          type: array
          items:
            $ref: '#/components/schemas/ServiceClassIdDef'
          description: >-
            The classes returned might be different from the requested classes.
        reservationOffersOnly:
          type: boolean
          default: false
        languages:
          type: array
          items:
            type: string
          description: >-
            The language returned might be different from the languages request. The list is a prioritized list.
        currency:
          $ref: '#/components/schemas/CurrencyDef'
          description:
            The currency returned might be different from the one requested.
        includeBehavior:
          description: >-
            Influences whether referenced resources are returned in full or as references only
          type: array
          items:
            type: string
            enum:
              - OFFERPARTS

    TripOfferRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: >-
            optionally used instead of tripSearchCriteria element, if the offers
            are to be constructed for a previously built trip
        tripRef:
          type: string
          format: url
          example: 'http://some.provider/trip/2345'
        trip:
          $ref: '#/components/schemas/TripDef'
        requestedSection:
          $ref: '#/components/schemas/TravelSectionDef'
        requestedFulfillmentOptions:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentOption'
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/PassengerDef'
        tripSearchCriteria:
          $ref: '#/components/schemas/TripSearchCriteria'
        offerSearchCriteria:
          $ref: '#/components/schemas/OfferSearchCriteria'
        includeBehavior:
          description: >-
            Influences whether referenced resources are returned in full or as references only
          type: array
          items:
            type: string
            enum:
              - ALL
              - TRIPOFFERS
              - TRIPOFFERS.TRIP
              - TRIPOFFERS.OFFERS
              - TRIPOFFERS.PASSENGERS
      required:
        - passengers
      description: >-
        Defines the parameters needed to request a trip, standalone or in the context of an offer request. Note at least one
        of the tripId, tripRef or trip elements must be set.
    TripOffer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        trip:
          oneOf:
            - $ref: '#/components/schemas/TripRef'
            - $ref: '#/components/schemas/TripDef'
        offers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/OfferRef'
              - $ref: '#/components/schemas/Offer'
        passengers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerRef'
              - $ref: '#/components/schemas/PassengerDef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    TripOfferRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/tripOffer/2345'
        title:
          type: string
          example: 'Bruxelles-Midi 10:05 20200701'

    RequestedInformation:
      type: string
      description: >-
        regular-expression indicating the data that must be set in the data
        model in order to proceed to next step of the process
    OfferSummary:
      type: object
      description: >-
        The offer summary indicates the major service class, level or flexibility.
        This does not imply that this service class or level applies to all parts 
        of the whole offer. 
      properties:
        minimalPrice:
          $ref: '#/components/schemas/CurrencyPriceDef'
        overallServiceClass:
          $ref: '#/components/schemas/ServiceClassDef'
        overallServiceLevel:
          $ref: '#/components/schemas/ServiceLevelIdDef'
        overallFlexibility:
          $ref: '#/components/schemas/Flexibility'
      required:
        - minimalPrice
        - overallServiceClass
        - overallServiceLevel
        - overallFlexibility

    Offer:
      type: object
      properties:
        offerSummary:
          $ref: '#/components/schemas/OfferSummary'
        requestedInformation:
          $ref: '#/components/schemas/RequestedInformation'
        trip:
          oneOf:
            - $ref: '#/components/schemas/TripRef'
            - $ref: '#/components/schemas/TripDef'
        validFrom:
          type: string
          format: date-time
        validTo:
          type: string
          format: date-time 
        supportedMediaTypes:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentMediaTypeDef'
        offerPartRefs:
          type: array        
          items:
            $ref: '#/components/schemas/OfferPartRef'
        admissions:
          type: array        
          items: 
            $ref: '#/components/schemas/Admission'
        reservations:
          type: array        
          items:              
            $ref: '#/components/schemas/Reservation'
        integratedReservations:
          type: array        
          items:  
            $ref: '#/components/schemas/IntegratedReservation'
        ancillaries:
          type: array        
          items:  
            $ref: '#/components/schemas/Ancillary'
        fares:
          type: array
          items:
            $ref: '#/components/schemas/FareOnlineDef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    OfferRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/offer/2345'
        title:
          type: string
          example: 'Bruxelles-Midi - Paris-Nord 10:05 20200701 NF 50 EUR'

    TripOffersCollection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        tripOffers:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/TripOfferRef'
            - $ref: '#/components/schemas/TripOffer'
        scrollBackContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll backward. (Value
            depends on underlying system.)
        scrollForwardContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll forward.
            (Value depends on underlying system.)
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    CurrencyDef:
      description: ISO4217 currency codes
      type: string

    CurrencyPriceDef:
      type: object
      minProperties: 1
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyDef'
        amount:
          description: amount in cents
          type: number
          format: int32
        vatDetails:
          type: array
          items:
            $ref: '#/components/schemas/VatDetailDef'
      required:
        - currency
        - amount
      additionalProperties: false
      
    VatDetailDef:
      type: object
      properties:
        country:
          type: string
        amount:
          description: amount
          type: number
          format: float
        percentage:
          type: number
          format: float
        taxId:
          type: string
        scope:
           $ref: '#/components/schemas/VatScopeDef'
      required:
        - country
      additionalProperties: false
      
    VatScopeDef:
      description: scope where the VAT applies
      type: string
      enum:
       - INTERNATIONAL
       - NATIONAL
       - SHORT_DISTANCE
       - LONG_DISTANCE

    GenderDef:
      description: >- 
        The gender of the passenger, which is important in the case of night trains.
      type: string
      enum:
        - MALE
        - FEMALE
        - X
        
    ReductionCardReferenceDef:
      type: object
      properties:
        cardValue:
          description: code of the card type according to code list
          type: string
        cardValueType:
          description: code list for the cardValue provided
          type: string
        cardName:
          description: card name for printing on fulfillments
          type: string
        issuer:
          type: string
          description: >-
            RICS company code or the upcoming compatible ERA company code. In
            case proprietary codes are used on a bilateral base the codes must
            have at least 5 positions and start with x.
        serviceClasses:
          description: >-
            list of service classes in case this class is available for
            different classes
          type: array
          items:
            $ref: '#/components/schemas/ServiceClassIdDef'
      required:
        - cardId
        - cardValueType
      additionalProperties: false
      
    CardIdentificationDef:
      description: >-
        card issuer - RICS code in case of Railways, otherwise starting with
      type: object
      properties:
        cardId:
          type: string
        cardIssuer:
          $ref: '#/components/schemas/CompanyDef'
        cardType:
          description: Code table to be defined in tariff description data
          type: string
        leadingCardId:
          type: string
        trailingCardId:
          type: string
        cardNumber:
          type: string
      required:
        - cardIssuer
        - cardType
      additionalProperties: false
      
    PassengerReferenceDef:
      description: >- 
       stable reference to a passenger within the offer and booking
      type: string
      
    PassengerDef:
      type: object
      description: >-
        passenger of transportable (e.g. bicycle)
      properties:
        id: 
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          $ref:  '#/components/schemas/TravelerTypeDef'  
        reference:
          description: >-
            stable reference to passengers from other elements, or from caller
            system.
          type: string
        passengerAbstract:
          $ref: '#/components/schemas/PassengerAbstractDef'
        passengerDetails:
          $ref: '#/components/schemas/PassengerDetailsDef'
        passengerPassport:
          $ref: '#/components/schemas/PassengerPassportDef'
        cardIdentification:
          $ref: '#/components/schemas/CardIdentificationDef'
        transportableDetails:
          $ref: '#/components/schemas/TransportableDef'          
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - type
        - reference
        - id
      additionalProperties: false    
        
    PassengerAbstractDef:
      type: object
      properties:
        dateOfBirth:
          description: date of birth of the passenger
          type: string
          format: date
        reductionCards:
          description: reduction cards owned by the passenger 
          type: array
          items:
            $ref: '#/components/schemas/ReductionCardReferenceDef'
        gender:
          $ref: '#/components/schemas/GenderDef'
      required:
        - dateOfBirth
        - reductionCards
        - gender
      additionalProperties: false  
      
    PassengerPassportDef:
      description: >- 
        Travel document data to be exchanged for border control in case of legal requirements
        PassengerDetails providing personal information only information required in the offer. 
        It is not allowed to send personal information not required in the offer reply. 
        It is legally not allowed to send these personal data already in the offer request.
      type: object
      properties:
        cityOfBirth:
          type: string
        cityOfIssue:
          description: place where the document is issued
          type: string
        cityOfResidence:
          type: string
        countryOfBirth:
          $ref: '#/components/schemas/CountryDef'
        countryOfIssue:
          $ref: '#/components/schemas/CountryDef'
        countryOfResidence:
          $ref: '#/components/schemas/CountryDef'
        dateOfIssue:
          type: string
          format: date-time
        documentId:
          type: string
        documentType:
          description: 'values: passport,id-card,diplomatic passport,refugee travel document'
          type: string
        gender:
          $ref: '#/components/schemas/GenderDef'
        limitOfValidity:
          type: string
          format: date-time
        name:
          description: ICAO transliteration identical as written in the document
          type: string
        nationality:
          $ref: '#/components/schemas/CountryDef'
      required:
        - documentType
        - name
      additionalProperties: false
      
    PassengerDetailsDef:
      type: object
      description: >- 
        PassengerDetails providing personal information 
        only information required in the offer. It is not allowed to send personal information not required in the offer reply. It is not allowed to send tehse personal data already in the offer request.
      properties:
        eMails:
          type: array
          items:
            type: string
            format: email
        language:
          type: array
          items:
            type: string
            description: Languages spoken by the traveler (ISO Language code)
        firstName:
          type: string
        firstNameICAO:
          description: ICAO transliteration
          type: string
        lastName:
          type: string
        lastNameICAO:
          description: ICAO transliteration
          type: string
        title:
          type: string
        phones:
          type: array
          items:
            type: string
        socialMediaAccount:
          type: array
          items:
            type: object
            properties:
              account:
                type: string
              accountType:
                description: >-
                  Example types: FACEBOOK, WHATSAPP, SKYPE, WECHAT,...
                type: string
            required:
              - account
              - accountType
            additionalProperties: false
        trainStaffInfo:
          description: >-
            Information text provided by the issuing system in a controlled way (e.g. VIP customer).
          type: string
      additionalProperties: false
      
    ServiceClassDef:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ServiceClassIdDef'
        carrierName:
          type: string
          description: >-
            the name the carrier itself uses to designate this specific service class
        comfortClass:
          $ref: '#/components/schemas/ComfortClassDef'
      required:
        - id
      additionalProperties: false
     
    ComfortClassDef:
      description: >-
            Generic class classification, mostly used to harmonize choice and
            representation across multiple carriers
      type: string
      enum:
        - FIRST
        - SECOND 
      
    TravelSectionDef:
      type: object
      properties:
        start:
          oneOf:
            - $ref: '#/components/schemas/Location'
            - $ref: '#/components/schemas/ConnectionPointDef'
        end:
          oneOf:
            - $ref: '#/components/schemas/Location'
            - $ref: '#/components/schemas/ConnectionPointDef'
        segmentId:
          description: >-
            Reference to a trip segment in case the section corresponds to a
            segment in the trip and the trip is part of the offer
          type: string
      required:
        - start
        - end
      additionalProperties: false
      
    PassengerRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/passenger/2345'
        title:
          type: string
          example: Andreas Dupont
        reference:
          $ref: '#/components/schemas/PassengerReferenceDef'
          
    ServiceLevelIdDef:
      description: >-
        Code of the service level, code-list in IRS 90918-1.
      type: string
      
    Flexibility:
      type: string
      enum:
        - FULLFLEX
        - MIDFLEX
        - NONFLEX

    PricingModeDef:
      type: string
      enum:
        - COLLECTIVE
        - INDIVIDUAL        
        
    OfferPart:
      type: object
      properties:
        price:
          $ref: '#/components/schemas/CurrencyPriceDef'
        pricingMode:
          $ref: '#/components/schemas/PricingModeDef'
        reductionsApplied:
          type: array
          items:
            $ref: '#/components/schemas/ReductionCardReferenceDef'
        passengerRefs:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerRef'
              - $ref: '#/components/schemas/PassengerDef'
        requiredPersonalData:
          $ref: '#/components/schemas/PersonalDataConstraintDef'
        validFrom:
          type: string
          format: date-time
          description: >-
            Validity of offer towards passenger 
        validTo:
          type: string
          format: date-time
          description: >-
            Validity of offer towards passenger 
        productRefs:
          type: array
          items:
            type: object
            properties:
              productRef:
                oneOf:
                  - $ref: '#/components/schemas/ProductRef'
                  - $ref: '#/components/schemas/Product'
              segmentIndices:
                description: indices of the segments in the trip given by the provider of the offer
                type: array
                items:
                  type: string
                  
    ProductRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/product/2345'
        title:
          type: string
          example: TGV Lyria Loisir 2

    Product:
      type: object
      required:
        - id
        - description
        - conditions
        - refundable
        - exchangeable
        - fulfillmentTypes
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        code:
          type: string
          description: >-
            The product code expressed in the provider system (could be a
            mapping from an even lower-level provider).
          example: PT00AD
        description:
          type: string
          description: the textual description of the product
          example: Loisir Non-flex Adult Fare
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/ProductCondition'
          description: >-
            Structured description of the sales or after-sales conditions.
        refundable:
          $ref: '#/components/schemas/RefundTypeDef'
        exchangeable:
          $ref: '#/components/schemas/ExchangeTypeDef'
        serviceClass:
          $ref: '#/components/schemas/ServiceClassDef'
        fulfillmentMediaTypes:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentMediaTypeDef'
        serviceConstraintText:
          type: string
        carrierConstraintText:
          type: string
          
    FulfillmentMediaTypeDef:
       description: >-
         Fulfillment types. RCT2, RCCST and UIC-PDF are official UIC standards.
       type: string        
       enum:
         - RCT2
         - RCCST
         - UIC_PDF
         - PDF_A4
         - PKPASS
         - TICKETLESS
         - ALLOCATOR_APP
         - SOCIAL_MEDIA_ACCOUNTS

    ProductCondition:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ConditionTypeDef'
        description:
          type: string
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        afterSalesFee:
          $ref: '#/components/schemas/AfterSalesFeeDef'
      required:
        - type
        - description
        - afterSalesFee
        - validFrom
        - validUntil
  
    AfterSalesFeeDef:
      type: object
      properties:
        price:
          $ref: '#/components/schemas/CurrencyPriceDef'
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time     
      required:
       - price
       - validFrom
       - validUntil           

    RefundTypeDef:
          type: string
          enum:
            - YES
            - NO
            - WITH_CONDITIONS
            
    ExchangeTypeDef:
          type: string
          enum:
            - YES
            - NO
            - WITH_CONDITIONS

    ConditionTypeDef:
          type: string
          enum:
            - SALE
            - EXCHANGE
            - REFUND

    Admission:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        offerPart:
          $ref: '#/components/schemas/OfferPart'
        reservationRequired:
          type: boolean
        reservations:
          type: array
          items:
            type: object
            properties:
              relationType:
                description: MANDATORY - the booking can not be made without reservation, INCLUDED - reservation is included in the offer but is not mandatory, OPTIONAL reservation is not included but can be integrated in the same ticket
                type: string
                enum:
                  - OPTIONAL
                  - MANDATORY
                  - INCLUDED
              reservation:
                $ref: '#/components/schemas/OfferPartRef'
        ancillaries:
          type: array
          items:
            type: object
            properties:
              relationType:
                type: string
                enum:
                  - OPTIONAL
                  - INCLUDED
              ancillary:
                $ref: '#/components/schemas/OfferPartRef'
                
    PlaceSelectionDef:
      type: object
      description: >-
        place selection options and selected options in an offer
        - optional place properties to choose from
        - selected optional place properties (selectedOptions)
        - selectable places for a graphical place selection 
        - selectedPlaces from a graphical place selection (selectedPlaces)
        - reference place for adjacent reservation (referencePlace)
      properties:
        id:
          description: id if the place selection unique within an offer
          type: string
        reservationOptions:
          $ref: '#/components/schemas/ReservationOnlineOptionDef' 
        vehicle:
          description: vehicle / train number is necessary in  case of train parts with different train numbers
          type: string           
        referencePlace: 
          description: selected place for an adjacent reservation (NEARBY)
          type: object    
          properties:
            placeNumber:
              type: string
            coachNumber:
              type: string
        selectedOptions:
          type: array
          items: 
            $ref: '#/components/schemas/PlaceOptionsBundleDef'
        selectablePlaces:
          $ref: '#/components/schemas/PlaceAvailabilityDef'
        selectedPlaces:
          $ref: '#/components/schemas/SelectedPlacesDef'
      required:
        - id      
                
    PlaceOptionsBundleDef:
      type: object
      description: >-
        selection of places for reservation linked to passengers
      properties:
        passengers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerRef'
              - $ref: '#/components/schemas/PassengerReferenceDef'
        selectedPlaces:
             $ref: '#/components/schemas/PlaceSelectionDef'
        selectedPlaceProperties: 
          type: array
          items:
            description: selection from the optional place properties provided in the offer
            type: string
      required:
        - id              
   
    PlaceAvailabilityDef:
      type: object
      properties:
        coaches:
          description: >-
            list of the coaches in a train run ordered according to the physical
            ordering of the train
          type: array
          items:
            type: object
            properties:
              compartments:
                description: >-
                  areas within a coach that holds places. Areas might be selectable
                  as a whole. Usual areas would be classic compartments.
                type: array
                items:
                  type: object
                  properties:
                    places:
                      type: array
                      items:
                        type: object
                        properties:
                          number:
                            description: >-
                              the place number as indicated at the place in the
                              coach
                            type: string
                          status:
                            description: status of the place
                            type: string
                            enum:
                               - ALLOCATED
                               - FREE
                               - RESTRICTED                        
                          selectable:
                            description: >-
                              to indicate individual places as non-selectable in
                              case complete compartments must be selected
                            type: boolean
                            default: true
                        required:
                          - number
                        additionalProperties: false
                    status:
                      type: string
                    selectable:
                      description: to indicate compartments selectable as a whole only
                      type: boolean
                      default: false
                  additionalProperties: false
              number:
                description: coach number
                type: string
              status:
                description: >-
                  status of the coach if the status applies to all places of the
                  coach
                type: string
                enum:
                   - ALLOCATED
                   - FREE
                   - RESTRICTED
              layoutId:
                description: id to identify the coach layout
                type: string
              layoutIdUpperDeck:
                description: id to identify a layout for the upper deck in a double deck coach
                type: string
              layoutIdLowerDeck:
                description: id to identify a layout for the lower deck in a double deck coach
                type: string
              direction:
                description: >-
                  indication of the direction of travel standard direction is left
                  to right with ascending coordinates in the layout values  U =
                  unspecified
                          in direction of the layout
                          opposite to direction of the layout
                          changing
                          starting in direction but changing later
                type: string
                enum:
                 - IN_DIRECTION
                 - OPPOSITE_DIRECTION
                 - CHANGING
                 - STARING_IN_DIRECTION
              coachOwner:
                $ref: '#/components/schemas/CompanyDef'
              specialCoach:
                description: >-
                  indication of special coach 
                type: string
                enum: 
                  - RESTAURANT_COACH
                  - BICYCLE_COACH
                  - LUGGAGE_COACH
                  - TRAIN_HEAD                
            required:
              - number
              - layoutId
            additionalProperties: false                
                
    Reservation:
      type: object
      description: >-
        reservation includes the reference to the in the initial offer. The offer needs to be updated with the selected places before the confirmation which creates the reservation details including the reserved places
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        offerPart:
          $ref: '#/components/schemas/OfferPart'
        reservationDetails:
          $ref: '#/components/schemas/ReservationDetailsDef'          
        placeSelection:
          $ref: '#/components/schemas/PlaceSelectionDef'
      required:
        - id,
        - offerPart,
        - reservationDetails

    IntegratedReservation:
      description: reservation includes the reservation options in the initial offer it needs to be updated with the selected places before the confirmation which creates the reservation details including the reserved places   
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        offerPart:
          $ref: '#/components/schemas/OfferPart'
        ancillaries:
          type: array
          items:
            type: object
            properties:
              relationType:
                type: string
                enum:
                  - OPTIONAL
                  - INCLUDED
              ancillary:
                $ref: '#/components/schemas/OfferPartRef'
        reservationDetails:
          $ref: '#/components/schemas/ReservationDetailsDef'
        placeSelection:
          $ref: '#/components/schemas/PlaceSelectionDef'          
      required:
        - id,
        - offerPart
        - reservationDetails

    SelectedPlacesDef:
      description: place selection from a graphical display of coaches
      type: object
      properties:
        selectedCoach:
          description: selected coach and places in case of graphical reservation
          type: array
          items:
            minItems: 1
            type: object
            properties:
              selectedPlaces:
                description: selected places in case of graphical booking
                type: array
                items:
                  minItems: 1              
                  type: string
      additionalProperties: false
      required:
        - selectedCoach
        - selectedPlaces

    ReservationDetailsDef:
      type: object
      description: segmentIndex references a segmentIndex in the trip part within the offer reply
      properties:
         serviceClass:
            $ref: '#/components/schemas/ServiceClassDef'
         serviceLevel:
            $ref: '#/components/schemas/ServiceLevelIdDef'  
         reservedPlaces:
          description: reserved places in a confirmed reservation. Multiple place packs are needed to combined person and bicycle reservations
          type: array
          items:
              $ref: '#/components/schemas/PlacePackDef'
      required:
        - serviceLevel,
        - reservedPlaces
     
    PlacePackDef:
        type: object
        description: selection of places with common properties
        properties:
          id:
            type: string
          passengerReferences:
            description: reference of the traveller / reservation holder
            type: string
          vehicle:
            description: vehicle number (e.g. train number)
            type: string  
          coach:
            type: string
          places:
            description: descriptive string of the places (e.g. 11-35,51)
            type: string
          placeIds:
            description: list of individual place numbers
            type: array
            items:
              type: string
          placeProperties:
            description: place properties to be indicated to the customer
            type: array
            items:
              type: object
              description: place properties of places in the place pack. Properties without a  number refer to all places
              properties:
                placeProperty:
                  description: see code list
                  type: string
                number:
                  description: number of places with this property
                  type: number
                priority:
                  description: priority for displaying a list of properties
                  type: number
              required:
                - placeProperty
              additionalProperties: false
        required:         
          - id
          - reference
          - vehicle
          - coach
          - places
          - placeProperties  
        additionalProperties: false
             
    Ancillary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        offerPart:
          $ref: '#/components/schemas/OfferPart'
        category:
          type: string
          
    OfferPartRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: >-
            http://some.provider/ancillary/2345 or
            http://some.provider/integratedReservation/2345'
        title:
          type: string
          example: ICE wifi onboard 2020-07-11 or ICE Bruxelles-Frankfurt child 2020-07-12
      description: >-
        References all the offer part elements in an uniform format. an
        offerPartRef can therefore refer to reservation, integrated reservation
        admission or ancillary (in its href)
        
    BookingRequest:
      type: object
      properties:
        bookingId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the selected booking
        selectedOfferId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the selected offer
        selectedReservationsIds:
          type: array
          items:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
            description: >-
              If relevant, ids of the selected optional reservations.
        selectedAncillaries:
          type: array
          items:
            type: object
            properties:
              ancillaryId:
                type: string
                format: uuid
                example: d290f1ee-6c54-4b01-90e6-d701748f0851
                description: >-
                  If relevant, ids of the selected optional ancillaries.
              passengerIds:
                type: array
                items:
                  type: string
                  format: uuid
                  example: d290f1ee-6c54-4b01-90e6-d701748f0851
                description: >-
                  Id of the passengers the selected optional ancillaries are for.
        includeBehavior:
          description: >-
            Influences whether referenced resources are returned in full or as references only
          type: array
          items:
            type: string
            enum:
              - ALL
              - BOOKEDOFFERS
              - BOOKEDOFFERS.TRIPS
              - BOOKEDOFFERS.TRIPS.LOCATIONS
              - BOOKEDOFFERS.OFFERPARTS
              - PASSENGERS
              - TICKETS
              - REFUND_PROPOSITIONS
      required:
        - selectedOfferId
        
    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        reference:
          type: string
          description: >-
            The unique booking reference in the provider system. Usually refers to an order number or PNR.
        status:
          $ref: '#/components/schemas/BookingStatus'
        requestedInformation:
          $ref: '#/components/schemas/RequestedInformation'
        ticketTimeLimit:
          type: string
          format: date-time
        fulfillmentOptions:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentOption'
        bookedOffers:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/OfferRef'
            - $ref: '#/components/schemas/Offer'
        passengers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerRef'
              - $ref: '#/components/schemas/PassengerDef'
        fulfillments:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/FulfillmentRef'
              - $ref: '#/components/schemas/Fulfillment'
        refund:
           $ref: '#/components/schemas/RefundDef'
        refundOffers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/RefundOfferRef'
              - $ref: '#/components/schemas/RefundOffer'
          description: >-
            Refund offer is created with the details of the to-be-confirmed refund operation. 
            One refund offer can then be confirmed, which turns it into a refund.
        exchange:
            $ref: '#/components/schemas/ExchangeDef'
        exchangeOffers:
          type: array
          items:
            $ref: '#/components/schemas/ExchangeOfferDef'
          description: >-
            Exchange offer is created with the details of the to-be-confirmed refund operation. 
            One exchange offer can then be confirmed, which turns it into an exchange and
            confirms the new booking.         
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - id
        - status
        - passengers
    
    BookingStatus:
      type: string
      enum:
        - PREBOOKED
        - CONFIRMED
        - FULFILLED
        - CANCELLED
        - REFUNDED
        - EXCHANGED
        - ERROR

    BookingRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/booking/2345'
        title:
          type: string
          example: booking 2345

    BookingPatchRequest:
      type: object
      description: >-
        Allow to confirm the booking as well as to set the required fulfillment type, e.g. value paper
        or e-ticket.
      properties:
        status:
          type: string
          enum:
            - CONFIRMED
        fulfillmentOptions:
          type: array
          items: 
            $ref: '#/components/schemas/FulfillmentOption'

    FulfillmentOption:
      description: >-
        CIT paper implies printing on value paper which is stock controlled.
      type: string      
      enum:
        - ETICKET
        - CIT_PAPER

    FulfillmentRequestDef:
       description: >-
        Request parameter to initiate the fulfillment.
       type: object
       properties:
        media: 
          type: array
          items:
           $ref: '#/components/schemas/FulfillmentMediaTypeDef'
          
    FulfillmentsDef:
      description: >-
        list of fulfillments in a booking
      type: array
      items:
        $ref: '#/components/schemas/Fulfillment'

    Fulfillment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        controlNumber:
          type: string
          description: >-
            Ticket Control Number
        offerParts:
          type: array
          items:
            $ref: '#/components/schemas/OfferPartRef'
        documents:
          description: >-
            complete document created for fulfillment
          type: array
          items: 
            $ref: '#/components/schemas/FulfillmentDocumentDef'
        fulfillmentItems:
          description: >-
            fulfillment items to be integrated into tickets (allocator mode)
          type: array
          items:
              $ref: '#/components/schemas/FulfillmentItemDef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    
    FulfillmentDocumentDef:
      description: >-
        document created for fulfillment
      type: object
      properties:
        medium: 
          $ref: '#/components/schemas/FulfillmentMediaTypeDef'
        passengers:
          description: >-
            list of passengers on the booking in case the booking does not cover all passengers
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerReferenceDef'
              - $ref: '#/components/schemas/PassengerRef'
        documentType:
         type: string
         enum:
            - BOOKING_RECEIPT
            - TICKET
            - BOARDING_PASS
            - INFORMATION
            - VOUCHER
        status:
          type: string
          enum:
            - ACTIVE
            - CANCELLED
            - TRAVELLED   
        documentLink:
          type: string
          format: uri    
    
    FulfillmentItemDef:
      description: >-
       Fulfillment items to be integrated in to tickets, e.g. visual security elements, additional bar codes, control keys
      type: object
      properties:
        fulfillmentMedia:
          description: >-
           list of fulfillment media where this item applies
          type: array
          items:
           $ref: '#/components/schemas/FulfillmentMediaTypeDef'
        travelerReference:
          description: reference to a traveler
          type: string
        controlId:
          type: string
        securityFeatures:
          description: 'visual elements, bar codes'
          type: array
          items:
            type: object
            properties:
              type:
                $ref: '#/components/schemas/SecurityFeatureTypeDef'
              data:
                description: base 64 encoded data
                type: string
            additionalProperties: false
        securityFeatureLinks:
          type: array
          items:
            type: object
            properties:
              type:
                $ref: '#/components/schemas/SecurityFeatureTypeDef'
              uri:
                description: link to download the security feature
                type: string
                format: uri
                
            additionalProperties: false
        mandatory:
          description: >-
            The use of the provided features is mandatory
          type: boolean
          default: false
        securePaperOnly:
          description: >-
            The security feature must be used on secure paper
          type: boolean
          default: false
      additionalProperties: false
  
    SecurityFeatureTypeDef:
      description: >-
        "RAW_BAR_CODE" binary data too be included in an bar code, "MATRIX_BAR_CODE" binary data of the black and white pixel matrix of a square bar code, "PNG_BAR_CODE" png image data of a bar code, "JPG_BAR_CODE" jpg data of a bar code, "PNG_VISUAL_ELEMENT" png image data of a visual element, "JPG_VISUAL_ELEMENT" jpg data of a visual element, "GIF_VISUAL_ELEMENT" gif data of a visual element
      type: string
      enum:
        - RAW_BAR_CODE
        - MATRIX_BAR_CODE
        - PNG_BAR_CODE
        - JPG_BAR_CODE
        - PNG_VISUAL_ELEMENT
        - JPG_VISUAL_ELEMENT
        - GIF_VISUAL_ELEMENT
  
    FulfillmentRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/ticket/2345'
        title:
          type: string
          example: Ticket Paris-Barcelona Andre Dupont 2020-07-23
   
    AfterSaleReasonDef:
      description: >-
        Reason for and type of an after sale, Code list in IRS 90918-10.
      type: string
      
    RefundOffersCollection:
      type: array
      items:
        $ref: '#/components/schemas/RefundOffer'
        
    RefundOffer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the refund offer
        validUntil:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PROPOSED
            - CONFIRMED
          default: PROPOSED
        reimbursementStatus:
          description: >-
            If set to IMMEDIATE the distributor is allowed to return the 
            reimbursement amount immediately.
          type: string
          enum:
            - IMMEDIATE
            - DELAYED
        reimbursementDateTime:
          type: string
          format: date-time
        appliedOverruleCode:
          $ref: '#/components/schemas/AfterSaleReasonDef'
        fulfillments:
          type: array
          items: 
            $ref: '#/components/schemas/FulfillmentRef'
        refundFee:
          $ref: '#/components/schemas/CurrencyPriceDef'
        refundableAmount:
          $ref: '#/components/schemas/CurrencyPriceDef'
      required:
       - id
       - validUntil
       - status
       - reimbursementStatus
       - refundFee
       - refundableAmount
       
    RefundOfferRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/bookings/2345/refundOffers/123'
        title:
          type: string
          example: Refund Paris-Barcelona Andre Dupont 2020-07-23
          
    TicketRequest:
      type: object
      properties:
        bookingId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the booking to fulfill (no partial fulfillment)
      required:
        - bookingId
        
    RefundOfferRequest:
      description: request for a refund. Fulfillments can be provided in case the booking contains multiple individual fulfillments
      type: object
      properties:
        fulfillments:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentRef'
        overruleCode: 
          $ref: '#/components/schemas/AfterSaleReasonDef'

    ExchangeOfferRequestDef:
      description: request for a refund. Fulfillments can be provided in case the booking contains multiple individual fulfillments
      type: object
      properties:
        passengerRefs:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerRef'
              - $ref: '#/components/schemas/PassengerDef'
        fulfillments:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentRef'
        overruleCode: 
          $ref: '#/components/schemas/AfterSaleReasonDef'

    ExchangeOffersCollectionDef:
      type: array
      items:
        $ref: '#/components/schemas/ExchangeOfferDef'
        
    ExchangeOfferDef:
      type: object
      description: >-
       offer to exchange the referenced booking
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the exchange offer
        validUntil:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PROPOSED
            - CONFIRMED
          default: PROPOSED
        reimbursementStatus:
          description: >-
            If set to IMMEDIATE the distributor is allowed to return the 
            reimbursement amount immediately.
          type: string
          enum:
            - IMMEDIATE
            - DELAYED
        reimbursementDateTime:
          type: string
          format: date-time
        appliedOverruleCode:
          $ref: '#/components/schemas/AfterSaleReasonDef'
        fulfillments:
          type: array
          items: 
            $ref: '#/components/schemas/FulfillmentRef'
        exchangeFee:
          $ref: '#/components/schemas/CurrencyPriceDef'
        refundableAmount:
          $ref: '#/components/schemas/CurrencyPriceDef'
        offer:
          oneOf:
           - $ref: '#/components/schemas/TripOffer'  
           - $ref: '#/components/schemas/TripOfferRef'
           - $ref: '#/components/schemas/NonTripOfferDef'
      required:
       - id
       - validUntil
       - status
       - reimbursementStatus
       - exchangeFee
       - exchangeOffer

    ExchangeOfferConfirmDef:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the exchange offer
        status:
          type: string
          enum:
            - CONFIRMED
            
    ExchangeDef:
      description: >- 
       Result of a successful confirmation of an exchange. 
       The new booking and the original booking are returned.
      type: object
      properties:
        reimbursementStatus:
          description: >-
            If set to IMMEDIATE the distributor is allowed to return the 
            reimbursement amount immediately.
          type: string
          enum:
            - IMMEDIATE
            - DELAYED
        reimbursementDateTime:
          type: string
          format: date-time
        appliedOverruleCode:
          $ref: '#/components/schemas/AfterSaleReasonDef'
        exchangeFee:
          $ref: '#/components/schemas/CurrencyPriceDef'
        refundableAmount:
          $ref: '#/components/schemas/CurrencyPriceDef'    
        newBooking: 
          oneOf:
            - $ref: '#/components/schemas/Booking'
            - $ref: '#/components/schemas/BookingRef'
      required:
        - reimbursementStatus
        - exchangeFee
        - refundableAmount
        - newBooking

    RefundOfferConfirm:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the refund offer
        status:
          type: string
          enum:
            - CONFIRMED
            
    RefundDef:
      description: >- 
       result of a successful confirmation of a refund. 
      type: object
      properties:
        reimbursementStatus:
          description: >-
            If set to IMMEDIATE the distributor is allowed to return the 
            reimbursement amount immediately.
          type: string
          enum:
            - IMMEDIATE
            - DELAYED
        reimbursementDateTime:
          type: string
          format: date-time
        appliedOverruleCode:
          $ref: '#/components/schemas/AfterSaleReasonDef'
        refundFee:
          $ref: '#/components/schemas/CurrencyPriceDef'
        refundableAmount:
          $ref: '#/components/schemas/CurrencyPriceDef'    
        newBooking: 
          oneOf:
            - $ref: '#/components/schemas/Booking'
            - $ref: '#/components/schemas/BookingRef'
      required:
        - reimbursementStatus
        - refundFee
        - refundableAmount

    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://zalando.github.io/problem/constraint-violation'
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: number
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.
      description: >-
        Problem Details for HTTP APIs (RFC 7807) defines a "problem detail" as a way
        to carry machine-readable details of errors in a HTTP response to avoid
        the need to define new error response formats for HTTP APIs.
        See: https://tools.ietf.org/html/rfc7807
    
    #Fare-specific elements begin

    FareOnlineDef:
      type: object
      properties:
        id:
          description: unique id of the fare item to be included in accounting
          type: string
        type:
          $ref: '#/components/schemas/FareTypeDef'
        name:
          $ref: '#/components/schemas/TextDef'
        fareDetailDescription:
          $ref: '#/components/schemas/TextDef'
        price:
          $ref: '#/components/schemas/PriceDef'
        regionalConstraint:
          $ref: '#/components/schemas/RegionalConstraintDef'
        serviceConstraint:
          $ref: '#/components/schemas/ServiceConstraintDef'
        carrierConstraint:
          $ref: '#/components/schemas/CarrierConstraintDef'
        serviceClass:
          $ref: '#/components/schemas/ServiceClassDef'
        serviceLevel:
          $ref: '#/components/schemas/ServiceLevelDef'
        afterSalesCondition:
          $ref: '#/components/schemas/AfterSalesConditionDef'
        combinationConstraint:
          $ref: '#/components/schemas/FareCombinationConstraintDef'
        fulfillmentConstraint:
          $ref: '#/components/schemas/FulfillmentConstraintDef'
        reductionConstraint:
          $ref: '#/components/schemas/ReductionConstraintDef'
        legacyAccountingIdentifier:
          $ref: '#/components/schemas/LegacyAccountingIdentifierDef'
        travelValidityConstraint:
          $ref: '#/components/schemas/TravelValidityConstraintDef'
        reservationDetails:
          $ref: '#/components/schemas/ReservationDetailsDef'            
        reservationOptions:
          $ref: '#/components/schemas/PlaceSelectionDef' 
        reservationLegacyParameter:
          $ref: '#/components/schemas/LegacyReservationParameterDef'            
      required:
        - id
        - type
        - regionalConstraint
        - combinationConstraint
        - travelValidityConstraint
        - afterSalesCondition
      additionalProperties: false
      
    LegacyAccountingIdentifierDef:
      description: identifier of the fare in the current 301 accounting file
      type: object
      properties:
        serialId:
          description: sequential number of regional validities
          type: number
          format: int32
          minimum: 0
          maximum: 99999
        addId:
          description: sequential number of regional validities (leading positions in case the series is too short
          type: number
          format: int32
          minimum: 0
          maximum: 99
        tariffId:
          description: sequential number of the fares for one regional validity
          type: number
          format: int32
          minimum: 0
          maximum: 9999
      additionalProperties: false  
      
    CalendarDef:
      type: array
      items:
        type: string
        format: date-time
        
    TimeUnitDef:
       type: string
       enum:
         - DAYS
         - HOURS
         - MINUTES
                    
    TravelValidityConstraintDef:
      type: object
      properties:
        id:
          description: mandatory in bulk data exchange
          type: string
        validTravelDates:
          $ref: '#/components/schemas/CalendarDef'
        validityRange:
          type: object
          properties:
            timeUnit:
               $ref: '#/components/schemas/TimeUnitDef'
            value:
              type: number
            hoursAfterMidnight:
              description: validity extended after midnight
              type: number
          required:
            - timeUnit
            - value
          additionalProperties: false
        excludedTimeRange:
          description: time ranges excluded from the validity (e.g. off peak fulfillments)
          type: array
          items:
            type: object
            properties:
              from:
                description: minutes of the day in the time zone of travel
                type: number
                format: int32
              until:
                description: minutes of the day in the time zone of travel
                type: number
                format: int32
              scope:
                description: 'START_OF_TRAVEL,COMPLETE_RANGE'
                type: string
            required:
              - from
              - until
              - scope
            additionalProperties: false
        numberOfTravelDays:
          description: number of allowed travel days (e.g. 3 travel days within 2 weeks)
          type: number
          format: int32
        returnConstraint:
          description: a return trip with the same carrier must be sold in combination
          type: object
          properties:
            latestReturn:
              description: number of days after departure or start of validity of the last return
              type: number
              format: int32
            earliestReturn:
              description: number of days after departure or start of validity of the earliest return
              type: number
              format: int32
            excludedWeekdays:
              description: weekdays (ISO day of the week, 1 = Monday) between travel and return where travel is not allowed
              type: array
              items:
                type: number
                format: int32
          required:
            - latestReturn
            - earliestReturn
          additionalProperties: false
      required:
        - validityRange
      additionalProperties: false

    TravelerTypeDef:
      description: >- 
        Values from the traveler type code list IRS 90918-10 - TODO
        YOUNG_CHILD, CHILD, YOUTH, ADULT, SENIOR, FAMILY_CHILD, ACCOMP_PRM, PRM_CHILD, WHEELCHAIR, PERSON, PRM, DOG, LUGGAGE, BICYCLE, ACCOMP_DOG, CAR, MOTORCYCLE, TRAILER, PRAM
      type: string
      
    LayoutsDef:
      type: object
      properties:
        layouts:
          type: array
          items:
            $ref: '#/components/schemas/CoachLayoutDef'
      additionalProperties: false
      
    CoachLayoutDef:
      description: >-
        coach layout providing data to draw a coach layout. The items of a coach
        are located via coordinates with (0,0) in the upper left corner. All
        coordinates are given without sign. 
      type: object
      properties:
        id:
          type: string
        places:
          description: list of places included in the layout
          type: array
          items:
            type: object
            properties:
              x:
                description: >-
                  horizontal coordinate of the center of the place
                type: number
                format: int32
              y:
                description: >-
                  vertical coordinate of the center of the place
                type: number
                format: int32
              id:
                description: >-
                  id of the graphical item type. Code list according to UIC90918-1
                  graphical item type e.g. seat = 1, berth = 2, couchette = 3
                type: string
              number:
                description: place number as displayed physically on the place
                type: string
              direction:
                description: >-
                  Direction of a place, defined optional as it might be omitted in
                  case of berths in future. 
                  Code list according to UIC90918-1
                   - value R: to right
                   - value L: to left
                   - value U: up (from right side of a coach pointing to the middle of the aile)
                   - value D: down (from right side of the coach pointing to the middle of the aile)
                type: string
              remarkId:
                description: >-
                  Remark concerning the place (e.g. to be used in a tool tip).
                  Code list according to UIC90918-1 
                   - value 1: place might have a table
                   - value 2: table at the place might be missing 
                   - value 3: place might have a different direction 
                   - value 4: place might have a table and a different direction 
                   - value 5: table at the place might be missing and place might have a different direction
                   - value 6: place might be in compartment
                   - value 7: place might be in open space  
                type: string
              zOrder:
                description: >-
                  Graphical layer where this item has to be placed. 
                  Code list according to UIC90918-1
                   - value 0: lowest layer usually used for walls 
                   - value 1: middle layer usually used by places
                   - value 2: top layer usually used by icons
                type: string
            required:
              - x
              - y
              - id
              - number
            additionalProperties: false
        signs:
          type: array
          items:
            type: object
            properties:
              x:
                description: >-
                  horizontal coordinate of the center of the place
                type: number
                format: int32
              y:
                description: >-
                  vertical coordinate of the center of the place
                type: number
                format: int32
              id:
                description: >-
                  id of the graphical item type. Code list according to UIC90918-1
                  graphical item type e.g. silence area sign = 116
                type: string
              zOrder:
                description: >-
                  graphical layer where this item has to be placed. 
                    0 = lowest layer usually used for walls 
                    1 = middle layer usually used by places
                    2 = top layer usually used by icons
                type: string
            required:
              - x
              - y
              - id
            additionalProperties: false
        internals:
          type: array
          items:
            type: object
            properties:
              x:
                description: >-
                  horizontal coordinate of the center of the place
                type: number
                format: int32
              y:
                description: >-
                  vertical coordinate of the center of the place
                type: number
                format: int32
              id:
                description: >-
                  id of the graphical item type. Code list according to UIC90918-1
                  graphical item type e.g. wall with angle to right height covers
                  three places = 25
                type: string
              zOrder:
                description: >-
                  graphical layer where this item has to be placed. 
                    0 = lowest layer usually used for walls 
                    1 = middle layer usually used by places
                    2 = top layer usually used by icons
                type: string
              mounting:
                description: >-
                  indicates, that the item is located at the upper border (U), the
                  lower border (L), goes from upper to lower border (E) or is
                  placed free (F)
                type: string
            required:
              - x
              - y
              - id
              - zOrder
            additionalProperties: false
        gridsize:
          type: object
          properties:
            x:
              type: number
              format: int32
            y:
              type: number
              format: int32
          additionalProperties: false
        containerType:
          type: string
          default: RECTANGLE
      required:
        - id
      additionalProperties: false      
      
    PassengerConstraintDef:
      type: object
      properties:
        id:
          type: string
        passengerType:
          description: see code list travelerType
          type: string
        nameRef:
          type: string
        upperAgeLimit:
          type: number
          format: int32
        lowerAgeLimit:
          type: number
          format: int32
        ageLimitToTravelAlone:
          type: number
          format: int32
        ageLimitForReservation:
          type: number
          format: int32
        isAncillaryItem:
          type: boolean
          default: false
        combinationConstraint:
          type: array
          items:
            type: object
            properties:
              maxNumber:
                description: number of passengers allowed per accompanying passenger
                type: number
                format: int32
              passengerTypeRef:
                $ref: '#/components/schemas/TravelerTypeDef'
            required:
              - maxNumber
              - passengerTypeRef
            additionalProperties: false
        includedFreePassenger:
          type: array
          items:
            type: object
            properties:
              number:
                description: >-
                  Number of passengers that can be included with one passenger for free. The number is given in fractions. The 
                  calculation needs a precision of 1 digit fraction (e.g. with 0.33 dogs you need 3 adults to transport one dog 
                  for free).
                type: number
                format: int32
              passengerTypeRef:
                $ref: '#/components/schemas/TravelerTypeDef'
            additionalProperties: false
        passengerWeight:
          type: number
          format: int32
        maxWeightedPassengers:
          description: >-
            The total weighted number of passengers on the offer is restricted to be equal or smaller than this maximum
          type: number
          format: int32
        minWeightedPassengers:
          description: >-
            The total weighted number of passengers on the offer is restricted to equal or larger than this minimum
          type: number
          format: int32
      required:
        - id
        - passengerType
        - nameRef
      additionalProperties: false
      
    ReductionConstraintDef:
      type: object
      properties:
        id:
          description: in bulk data only
          type: string
        requiredCards:
          description: >-
            One of the listed cards is required to be valid at the time of travel.
          type: array
          items:
            $ref: '#/components/schemas/ReductionCardReferenceDef'
      required:
        - requiredCards
      additionalProperties: false

    CompanyDef:
      description: >-
        RICS company code or the upcoming compatible ERA company code. In case proprietary codes are used on a bilateral base the 
        codes must have at least 5 positions and start with x
      type: string

    FareCombinationModelDef:
      type: object
      properties:
        model:
          description: >-
            Possible models are SEPARATE_TICKET, SEPARATE_CONTRACT, CLUSTERING, COMBINING. 
            The models need to be supported by the allocator.
          type: string
        combinableCarrier:
          description: >-
            List of all carriers where the model can be applied, in case the list is empty
            all combinations are allowed.
          type: array
          items:
            $ref: '#/components/schemas/CompanyDef'
        onlyWhenCombined:
          description: >-
            This combination model applies only in case the fare is combined with another carrier
          type: boolean
          default: false
        referenceCluster:
          description: >-
            In case of CLUSTERING model: the cluster to which the fare belongs
          type: string
        allowedClusters:
          description: >-
            In case of CLUSTERING model: the other clusters that allow a combination
          type: array
          items:
            type: string
        allowedAllocators:
          description: >-
            List of allowed allocators. If the list is empty all allocators with a sales contract are permitted.
          type: array
          items:
            $ref: '#/components/schemas/CompanyDef'
        allowedCommonContracts:
          description: >-
            List of carriers where a common contract with separate fulfillments are allowed.
          type: array
          items:
            $ref: '#/components/schemas/CompanyDef'
      required:
        - model
      additionalProperties: false

    FareCombinationConstraintDef:
      type: object
      properties:
        id:
          type: string
        combinationModels:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/FareCombinationModelDef'
      required:
        - id
        - combinationModels
      additionalProperties: false

    AfterSalesConditionDef:
      type: object
      properties:
        id:
          type: string
        afterSalesRules:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AfterSalesRuleDef'
      required:
        - id
        - afterSalesRules
      additionalProperties: false

    PriceDef:
      type: object
      properties:
        id:
          description: required for bulk data transfer
          type: string
        price:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyPriceDef'
      required:
        - price
      additionalProperties: false

    RelativeTimeDef:
      type: object
      properties:
        timeUnit:
          description: >-
            Time unit in days, hours or minutes.
          type: string
          enum:
            - DAYS
            - HOURS
            - MINUTES
        timeValue:
          type: number
          format: int32
        timeReference:
          description: >-
            Time reference.
          type: string
          enum:
            - BEFORE_DEPARTURE
            - AFTER_DEPARTURE
            - AFTER_SALE
            - BEFORE_START_VALIDITY
            - AFTER_END_VALIDITY
      required:
        - timeUnit
        - timeValue
        - timeReference
      additionalProperties: false

    AfterSalesRuleDef:
      type: object
      properties:
        transactionType:
          description: code list Reason for after sale
          type: string
        feeRef:
          description: >-
            Reference to a price data item defining the fee; optional in case there is no fee but the 
            after sales transaction is allowed. Online services include fee directly in the fee tag.
          type: string
        fee:
          $ref: '#/components/schemas/PriceDef'
        applicationTime:
          $ref: '#/components/schemas/RelativeTimeDef'
        applicationTimeStamp:
          description: absolute application time (UTC) in case of online services
          type: string
          format: date-time
        carrierFee:
          description: indicates that the fee belongs to the carrier
          type: boolean
          default: true
        individualContracts:
          description: indicates that the after sales of this fare can be treated independently per person.
          type: boolean
          default: false
      required:
        - transactionType
      additionalProperties: false
      
    RegionalValidityDef:
      type: array
      items:
        description: >- 
          One of the elements Zone, ViaStation, TrainLink, Line, or Polygon defining the regional validity
        type: object
        properties:
          seqNb:
            description: order number of the list item
            type: number
            format: int32
          zone:
            $ref: '#/components/schemas/ZoneDef'
          viaStations:
            $ref: '#/components/schemas/ViaStationsDef'
          trainLink:
            $ref: '#/components/schemas/TrainLinkDef'
          line:
            $ref: '#/components/schemas/LineDef'
          polygon:
            $ref: '#/components/schemas/PolygonDef'
        additionalProperties: false
    
    LineDef:
      type: object
      description: >-
         terminalStation - in case the product requires a destination within the zone (e.g. local ticket 
         to go to the main rail station). 
         entryStation - Station to enter the zone in case the product requires to enter the zone via a 
         specific station (e.g. local zone ticket to start from the main rail station).
      properties:
        binaryLineId:
          type: string
          description: >-
            Id to support local traffic standards (e.g. VDV,...).
        carrier:
          $ref: '#/components/schemas/CompanyDef'
        city:
          type: number
          format: int32
        entryStation:
          $ref: '#/components/schemas/StationDef'
        lineId:
          type: array
          items:
            type: string
        terminalStation:
          $ref: '#/components/schemas/StationDef'
        nutsCode:
          description: >-
            Nomenclature des units territoriales statistiques  
             COMMISSION REGULATION (EU) No 31/2011
          type: string
      required:
        - carrier
      additionalProperties: false
    
    TrainLinkDef:
      type: object
      properties:
        fromStation:
          $ref: '#/components/schemas/StationDef'
        toStation:
          $ref: '#/components/schemas/StationDef'
        train:
          type: string
        travelDate:
          type: string
          format: date-time
          description: >-
            date and time of the departure where the train link starts
      required:
        - fromStation
        - toStation
        - train
        - travelDate
      additionalProperties: false
    
    PolygonDef:
      type: object
      properties:
        edge:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/GeoCoordinateDef'
      additionalProperties: false
    
    ViaStationsDef:
      type: object
      properties:
        isBorder:
          type: boolean
          default: false
        routeId:
          type: number
          format: int32
        seriesId:
          type: number
          format: int32
        alternativeRoute:
          type: array
          items:
            $ref: '#/components/schemas/ViaStationsDef'
        carrier:
          $ref: '#/components/schemas/CompanyDef'
        route:
          type: array
          items:
            $ref: '#/components/schemas/ViaStationsDef'
        serviceBrand:
          description: restriction to a specific service brand
          type: string
        station:
          $ref: '#/components/schemas/StationDef'
        fareReferenceStationSet:
          description: reference to a list of stations included in the fare
          type: object
          properties:
            carrier:
              $ref: '#/components/schemas/CompanyDef'
            code:
              type: string
            name:
              type: string
          required:
            - carrier
            - code
          additionalProperties: false
      required:
        - station
      additionalProperties: false

    ZoneDef:
      type: object
      description: >-
        carrier - carrier responsible for the transport.
        entryStation - Station to enter the zone in case the product requires to enter the zone via a specific station
        (e.g. local zone ticket to start from the main rail station).
        terminalStation - Terminal station in case the product requires a destination within the zone (e.g. local ticket
        to go to the main rail station).
      properties:
        binaryZoneId:
          type: integer
          format: Base64
          description: 
            Id to support local traffic standards (e.g. VDV,...)
        carrier:
          $ref: '#/components/schemas/CompanyDef'
        city:
          type: number
          format: int32
        entryStation:
          $ref: '#/components/schemas/StationDef'
        terminalStation:
          $ref: '#/components/schemas/StationDef'
        zoneIds:
          description: to be used in bar codes
          type: array
          items:
            type: number
            format: int32
        nutsCode:
          description: Nomenclature des units territoriales statistiques COMMISSION REGULATION (EU) No 31/2011
          type: string
      required:
        - carrier
      additionalProperties: false

    FulfillmentConstraintDef:
      type: object
      properties:
        id:
          type: string
        acceptedControlSecurityTypes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ControlSecurityTypeDef'
        acceptedBarCodes:
          description: for SiD fulfillment one of the listed bar codes is required
          type: array
          items:
            description: >-
              Item according to IRS 90918-9: FCB, TLB, SSB
            type: string
            enum:
              - FCB
              - TLB
              - SSB
        requiredBarCodes:
          description: >-
            One of the listed bar codes must be provided.
          type: array
          items:
            type: string
        requiredSiS:
          description: >-
            To guarantee security in system (SiS) of the fulfillment one of the listed interfaces is required.
          type: array
          items:
            description: >-
              Interface type to ticket control data. REGISTRY means submitting
              the data to the central UIC registry. PEER_TO_PEER means data exchange
              is handled between the two parties directly.
            type: string
            enum:
              - REGISTRY
              - PEER_TO_PEER
        individualTicketingPermitted:
          description: a separate fulfillment per traveler is permitted
          type: boolean
      required:
        - id
        - acceptedFulfillmentTypes
        - individualTicketingPermitted
      additionalProperties: false

    PersonalDataConstraintDef:
      type: object
      properties:
        id:
          type: string
        requiredData:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              dataItem:
                description: see code list IRS 90918-10
                type: string
              transfer:
                description: >-
                 Transfer mode: BOOKING, SIS_CONTROL, SID_CONTROL.
                type: array
                minItems: 1
                items:
                  type: string
                  enum:
                    - BOOKING
                    - SIS_CONTROL
                    - SID_CONTROL
              ticketHolderOnly:
                type: boolean
                default: false
              crossBorder:
                description: the data are required only in case one of the cross border conditions apply
                type: array
                items:
                  $ref: '#/components/schemas/CrossBorderConditionDef'
              fulfillmentType:
                description: type of fulfillment in case the personal data are required for that type only
                type: array
                items:
                  $ref: '#/components/schemas/ControlSecurityTypeDef'
            required:
              - dataItem
              - transfer
            additionalProperties: false
        allowedChanges:
          type: array
          items:
            type: object
            properties:
              acceptedReason:
                type: string
                enum:
                  - IN_GENERAL
                  - MARRIAGE
                  - DOCUMENT_CHANGE
                  - AGENT_ERROR
              timeLimit:
                description: the change is limited to n hours after booking confirmation
                type: number
                format: int32
            required:
              - acceptedReason
            additionalProperties: false
      additionalProperties: false

    CrossBorderConditionDef:
      type: object
      properties:
        fromCountry:
          $ref: '#/components/schemas/CountryDef'
        toCountry:
          $ref: '#/components/schemas/CountryDef'
        affectedServiceBrands:
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
      required:
        - fromCountry
        - toCountry
      additionalProperties: false

    CountryDef:
      description: >-
        ISO 3166 2A codes
      type: string
      
    ControlSecurityTypeDef:
      description: >-
        SIP: secure paper tickets; SID: security in data (signed bar code); SIS: security in system
      type: string
      enum:
        - SIP
        - SID
        - SIS
    
    LegacyReservationParameterDef:
          type: object
          description: reservation parameter to support the UIC 90918-1 interface for booking
          properties:
            travelClass:
              description: 90918-1 class code in reservation
              type: string
            serviceLevelCode:
              description: service level code defined in UIC 90918-1
              type: string
            serviceCode:
              description: service code to be used in reservation
              type: string
            berthType:
              type: string
            coachTypeCode:
              type: string
            compartmentTypeCode:
              type: string
            tariff:
              type: string
          required:
            - travelClass
            - serviceLevelCode
            - serviceCode
          additionalProperties: false
          
    ReservationOnlineOptionDef:
      type: object
      properties:
        preferences:
          description: possible preferences to be requested in reservation without changing the fare
          type: array
          items:
            $ref: '#/components/schemas/ReservationOptionGroupDef'
        graphicalReservation:
          description: graphical reservation is supported, interface type "NO","UIC_918",..
          type: string
      additionalProperties: false
      
    ReservationOptionGroupDef:
      type: object
      properties:
        preferenceGroup:
          type: string
        preferences:
          type: array
          minItems: 1
          items:
            type: string
      required:
        - preferenceGroup
        - preferences
      additionalProperties: false
      
    CarrierConstraintDef:
      type: object
      description: >-
        Either excluded or included carriers can be set.
      properties:
        id:
          type: string
        includedCarrier:
          type: array
          items:
            type: string
        excludedCarrier:
          type: array
          items:
            type: string
      additionalProperties: false
    
    ServiceRankIdDef:
      description: >-
       Service quality, finer grained than the comfort class.
       The smaller the number, the higher the service quality.
       The 1* enum indicate that they are first class services,
       the 2* enum indicate that they are second class services.
      type: string
      enum:
        - 10
        - 11
        - 12
        - 13
        - 14
        - 20
        - 21
        - 22 
        - 23
        - 24

    ServiceLevelDef:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ServiceRankIdDef'
        combiningServiceClasses:
          description: list of service class ids that can be combined with these service levels
          type: array
          items:
            $ref: '#/components/schemas/ServiceClassIdDef'
        textRef:
          description: id of the text describing the service level
          type: string
        text:
          $ref: '#/components/schemas/TextDef'
        includesClassName:
          description: indicates that the class name is included
          type: boolean
          default: true
        reservationParameterId:
          type: string
      required:
        - id
        - text
      additionalProperties: false
    
    ServiceConstraintDef:
      description: >-
        Either excluded or included service brands can be set.
      type: object
      properties:
        id:
          type: string
        includedServiceBrands:
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
        excludedServiceBrands:
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
      required:
        - id
      additionalProperties: false
    
    FareTypeDef:
      description: >-
        Basic UIC fare types used in 90918-10, 90918-4, and 90918-9.
      type: string
      enum:
        - ADMISSION
        - RESERVATION
        - INTEGRATED_RESERVATION
        - ANCILLARY
    
    RegionalConstraintDef:
      type: object
      description: >-
        regional constraint of the fare- offline bulk data use the id of connection points whereas in an online environment the connection point is included
      properties:
        id:
          type: string
        entryConnectionPointId:
          description: connection point connecting two fare regimes
          type: string
        entryConnectionPoint:
          $ref: '#/components/schemas/ConnectionPointDef'
        exitConnectionPointId:
          description: connection point connecting two fare regimes
          type: string
        exitConnectionPoint:
          $ref: '#/components/schemas/ConnectionPointDef'
        regionalValidity:
          $ref: '#/components/schemas/RegionalValidityDef'
        distance:
          description: 'distance in km for statistics '
          type: number
          format: int32
      required:
        - regionalValidity
      additionalProperties: false
    
    TranslationDef:
      type: object
      properties:
        language:
          type: string
        textUTF8:
          type: string
        text:
          description: text without special characters according to ICAO specification
          type: string
        shortTextUtf8:
          type: string
        shortText:
          description: text without special characters according to ICAO specification
          type: string
      required:
        - language
        - textUTF8
        - text
      additionalProperties: false
    
    TextDef:
      description: directly included text in case of online services
      type: object
      properties:
        id:
          type: string
        textUTF8:
          type: string
        translations:
          type: array
          items:
            $ref: '#/components/schemas/TranslationDef'
        text:
          description: text without special characters according to ICAO specification
          type: string
        shortTextUtf8:
          type: string
        shortText:
          description: text without special characters according to ICAO specification
          type: string
      required:
        - id
        - textUTF8
        - text
      additionalProperties: false
    
    ConnectionPointDef:
      description: connection point connecting two fare regimes. The connection is possible between stations of the two provided station sets.
      type: object
      properties:
        id:
          type: string
        legacyBorderPointCode:
          type: string
        name:
          type: string
        stationSets:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/StationDef'
      required:
        - id
        - stationSets
      additionalProperties: false      
      
    #Fare-specific elements end
    
    OfferSearchDef:
      description: >-
         search parameter for an offer search on offers not based on a trip (e.g. passes)
      type: object
      properties:
        searchTags:
          description: >-
            list of tags to search for
          type: array
          items:
            type: string
        nutsCodes:
          description: >-
            Nomenclature des units territoriales statistiques COMMISSION REGULATION (EU) No 31/2011
          type: array
          items:
            type: string
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinateDef'
        travelPeriod:
          $ref: '#/components/schemas/CalendarDef'
        passengers:
          type: array
          items:
            $ref:  '#/components/schemas/PassengerDef'  
        requestedFulfillmentOptions: 
          type: array
          items:
            $ref:  '#/components/schemas/FulfillmentOption' 
        offerSearchCriteria:
            $ref:  '#/components/schemas/OfferSearchCriteria'  
              
    NonTripOfferCollectionDef:
      type: array
      items:
        $ref: '#/components/schemas/NonTripOfferDef'
    
    NonTripOfferDef:
      type: object
      properties:
        offerSummary:
          $ref: '#/components/schemas/OfferSummary'
        requestedInformation:
          $ref: '#/components/schemas/RequestedInformation'
        validFrom:
          type: string
          format: date-time
        validTo:
          type: string
          format: date-time 
        supportedMediaTypes:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentMediaTypeDef'
        admissions:
          type: array        
          items: 
            $ref: '#/components/schemas/Admission'
        ancillaries:
          type: array        
          items:  
            $ref: '#/components/schemas/Ancillary'
        fares:
          type: array
          items:
            $ref: '#/components/schemas/FareOnlineDef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      description: >-
        Non trip offers do not reference a trip, thus no reservations
        or integrated reservations can be offered by definition.
            
    TransportableDef:
      description: >- 
        transportables which are handled similar to passengers like dogs, bicycles, car transport. These transportables might need a ticket or reservation.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TravelerTypeDef'
        car:
          type: object
          properties:
            weight:
              type: number
              format: int32
            length:
              type: number
              format: int32
            width:
              type: number
              format: int32
            height:
              type: number
              format: int32
            model:
              type: string
              description: >-
                free text description of the model (e.g. BMW X5)       
            attachedItems:
              description: >-
                indication of items attached to the car
              type: array
              items:
                type: string
                enum:
                 - ROOF_RACK
                 - BICYCLE_STAND
            plate:
              description: >-
                The trailer plate is a personal data item and must not be provided in an offer request. 
                It must be patched into the offer after the customer accepted the offer for booking.
              type: string
          required:
            - weight
            - length
            - width
            - height
            - model
          additionalProperties: false
        motorCycle:
          type: object
          properties:
            includingSideCar:
              type: boolean
              default: false
            plate:
              description: >-
                The trailer plate is a personal data item and must not be provided in an offer request. 
                It must be patched into the offer after the customer accepted the offer for booking 
              type: string   
          required:
            - includingSideCar
          additionalProperties: false
        trailer:
          type: object
          properties:
            weight:
              description: weight in kg
              type: number
              format: int32
            length:
              description: length in cm
              type: number
              format: int32
            width:
              description: width in cm
              type: number
              format: int32
            height:
              description: length in cm
              type: number
              format: int32
            plate:
              description: >-
                The trailer plate is a personal data item and must not be provided in an offer request. 
                It must be patched into the offer after the customer accepted the offer for booking 
              type: string
          required:
            - weight
            - length
            - width
            - height
          additionalProperties: false
      required:
        - type
      additionalProperties: false
