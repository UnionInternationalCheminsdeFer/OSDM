{
	"info": {
		"_postman_id": "3e866f0c-ff69-408e-b617-b683eb7ae6d0",
		"name": "OTST: OSDM 3.0 Admission-only with two-step refund",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20344053",
		"_collection_link": "https://turnit-team.postman.co/workspace/OTST~0a821f9a-2acb-40f3-8d35-459754deceb5/collection/20344053-3e866f0c-ff69-408e-b617-b683eb7ae6d0?action=share&creator=20344053&source=collection_link"
	},
	"item": [
		{
			"name": "Booking creation (author: Tim)",
			"item": [
				{
					"name": "4. Offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// Verify whether the correct status code is returned",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/*",
									"// Verify whether json with the correct schema is being returned",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console});",
									"",
									"const OSDM_SCHEMA = ajv.compile(JSON.parse(pm.collectionVariables.get(\"osdm_offers_schema\")));",
									"",
									"pm.test(\"Response uses a valid schema\", function() {",
									"    pm.expect(ajv.validate(pm.response.json(), OSDM_SCHEMA)).to.be.true;",
									"});*/",
									"",
									"// Verify there are bundles returned to select an offer from",
									"pm.test(\"offers are returned\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response.offers).not.to.be.empty;",
									"});",
									"",
									"//Check if there are offers with reservations",
									"var offerWithReservation = false;",
									"var offerWithReservationId = -1;",
									"pm.response.json().offers.forEach(function(tripOffer) {",
									"    if( (tripOffer.reservationOfferParts.length >0 && tripOffer.reservationOfferParts !== undefined) && tripOffer.admissionOfferParts !== undefined) {",
									"        offerWithReservation = true;",
									"        offerWithReservationId = tripOffer.offerId;",
									"        pm.collectionVariables.set(\"offerWithReservation\", offerWithReservation);",
									"        pm.collectionVariables.set(\"offerWithReservationId\", offerWithReservationId);",
									"        ",
									"        // Get the first returned passengerRef",
									"        pm.collectionVariables.set(\"passenger_ref_reservation\", tripOffer.admissionOfferParts[0].passengerRefs[0]);",
									"    }",
									"});",
									"",
									"//Check if there are offers with admissions without reservations",
									"var offerWithoutReservation = false;",
									"var offerWithoutReservationId = -1;",
									"pm.response.json().offers.forEach(function(tripOffer) {",
									"    if( (tripOffer.reservationOfferParts.length == 0 || tripOffer.reservationOfferParts === undefined) && tripOffer.admissionOfferParts !== undefined) {",
									"        offerWithoutReservation = true;",
									"        offerWithoutReservationId = tripOffer.offerId;",
									"        pm.collectionVariables.set(\"offerWithoutReservation\", offerWithoutReservation);",
									"        pm.collectionVariables.set(\"offerWithoutReservationId\", offerWithoutReservationId);",
									"",
									"        // Get the first returned passengerRef",
									"        pm.collectionVariables.set(\"passenger_ref_only_admission\", tripOffer.admissionOfferParts[0].passengerRefs[0]);",
									"    }",
									"});",
									"",
									"//Check if there are offers with ancillaries",
									"var offerWithAncillary = false;",
									"var offerWithAncillaryOfferId = -1;",
									"var offerWithAncillaryId = -1;",
									"pm.response.json().offers.forEach(function(tripOffer) {",
									"    if (tripOffer.ancillaryOfferParts !== undefined){",
									"    tripOffer.ancillaryOfferParts.forEach(function(ancillaryOfferPart) {",
									"        ancillaryOfferPart.products.forEach(function(ancillaryOfferPartProduct) {",
									"",
									"            var productId = ancillaryOfferPartProduct.productId;",
									"",
									"            if (productId.includes(\"LUGGAGE\")) {",
									"                offerWithAncillary = true;",
									"                offerWithAncillaryOfferId = tripOffer.offerId;",
									"                offerWithAncillaryId = ancillaryOfferPart.id;",
									"",
									"                pm.collectionVariables.set(\"offerWithAncillary\", offerWithAncillary);",
									"                pm.collectionVariables.set(\"offerWithAncillaryOfferId\",offerWithAncillaryOfferId);",
									"                pm.collectionVariables.set(\"offerWithAncillaryId\", offerWithAncillaryId);",
									"        ",
									"                // Get the first returned passengerRef",
									"                pm.collectionVariables.set(\"passenger_ref_ancillary\", tripOffer.admissionOfferParts[0].passengerRefs[0]);",
									"            }",
									"        });",
									"    });}",
									"});",
									"",
									"//determine routing based on returned and collected data",
									"if(offerWithReservation===true) {",
									"    postman.setNextRequest(\"5a. Booking (With Reservation)\");",
									"} else if(offerWithoutReservation===true) {",
									"    postman.setNextRequest(\"6a. Booking (No Reservation)\");",
									"} else if(offerWithAncillary===true) {",
									"    postman.setNextRequest(\"7a. Booking (With Ancillary)\");",
									"} else {",
									"    postman.setNextRequest(\"8. Get Booking\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth.token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json;version=3",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"objectType\": \"string\",\n    \"tripSpecifications\": [\n        {\n            \"externalRef\": \"string\",\n            \"legs\": [\n                {\n                    \"externalRef\": \"string\",\n                    \"timedLeg\": {\n                        \"start\": {\n                            \"stopPlaceRef\": {\n                                //\"stopPlaceRef\": \"urn:{{namespace_stations}}:stn:{{location}}\",\n                                \"stopPlaceRef\": \"{{origin_ref}}\", //replaced for initial run\n                                \"objectType\": \"StopPlaceRef\" //added\n                            },\n                            \"serviceDeparture\": {\n                                //\"timetabledTime\": \"{{departure}}\"\n                                \"timetabledTime\":\"{{next_weekday}}T{{departure_time}}\" //replaced for initial run\n                            }\n                        },\n                        \"end\": {\n                            \"stopPlaceRef\": {\n                                //\"stopPlaceRef\": \"urn:{{namespace_stations}}:stn:{{location_2}}\",\n                                \"stopPlaceRef\": \"{{destination_ref}}\", //replaced for initial run\n                                \"objectType\": \"StopPlaceRef\" //added\n                            },\n                            \"serviceArrival\": {\n                                //\"timetabledTime\": \"{{arrival}}\"\n                                \"timetabledTime\":\"{{next_weekday}}T{{arrival_time}}\" //replaced for initial run\n                            }\n                        },\n                        \"service\": {\n                            \"productCategory\": {\n                                \"name\": \"{{service_type_name}}\",\n                                \"shortName\": \"{{service_type_name}}\",\n                                \"productCategoryRef\": \"urn:{{namespace_stations}}:sbc:{{service_type_brand_code}}\"\n                            },\n                            \"publishedServiceName\": \"{{service_name}}\",\n                            \"vehicleNumbers\": [\n                                \"{{service_name}}\"\n                            ],\n                            \"carriers\": [\n                                {\n                                    \"ref\": \"{{namespace_carrier}}{{service_type_rics_code}}\",\n                                    \"name\": \"{{service_type}}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"isPartOfInternationalTrip\": false\n        }\n    ],\n    \"offerSearchCriteria\": {\n        \"currency\": \"{{currency}}\"\n    },\n    \"anonymousPassengerSpecifications\": [\n        {\n            \"externalRef\": \"{{passenger_external_ref}}\",\n            \"type\": \"{{passenger_type}}\"\n        }\n    ],\n    \"embed\": [\n        \"ALL\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/offers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "5a. Booking (With Reservation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"/*var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console});",
									"",
									"const OSDM_SCHEMA = ajv.compile(JSON.parse(pm.collectionVariables.get(\"osdm_booking_schema\")));",
									"",
									"pm.test(\"Response uses a valid schema\", function() {",
									"    pm.expect(ajv.validate(pm.response.json(), OSDM_SCHEMA)).to.be.true;",
									"});*/",
									"",
									"// Verify whether the correct status code is returned",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Store the returned booking id",
									"//postman.setEnvironmentVariable(\"bookingId\", jsonData.booking.id);",
									"pm.collectionVariables.set(\"bookingId\", jsonData.booking.id);",
									"",
									"// Store the id of the first passenger",
									"//postman.setEnvironmentVariable(\"passengerId\", jsonData.booking.passengers[0].id);",
									"pm.collectionVariables.set(\"passengerId\", jsonData.booking.passengers[0].id);",
									"",
									"// Store the id of the first booked offer",
									"//postman.setEnvironmentVariable(\"exchangeOfferIds\", jsonData.booking.bookedOffers[0].id);",
									"pm.collectionVariables.set(\"exchangeOfferIds\", jsonData.booking.bookedOffers[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth.token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json;version={{osdm-version}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"purchaser\": {\n        \"detail\": {\n            \"firstName\": \"{{purchaser_firstName}}\",\n            \"lastName\": \"{{purchaser_lastName}}\",\n            \"eMail\": \"{{purchaser_email}}\",\n            \"phoneNumber\": \"{{purchaser_phoneNumber}}\"\n        }\n    },\n    \"offers\": [\n        {\n            \"offerId\": \"{{offerWithReservationId}}\",\n            \"passengerRefs\": [\n                \"{{passenger_ref_reservation}}\"\n            ]\n        }\n    ],\n    \"passengerSpecifications\": [\n        {\n            \"externalRef\": \"{{passenger_external_ref}}\",\n            \"dateOfBirth\": \"{{passenger_dateOfBirth}}\",\n            \"id\": \"{{{passenger_ref_reservation}}}\",\n            \"summary\": \"{{passenger_ref_reservation}}\",\n            \"type\": \"{{passenger_type}}\",\n            \"detail\": {\n                \"firstName\": \"{{passenger_firstName}}\",\n                \"lastName\": \"{{passenger_lastName}}\",\n                \"eMail\": \"{{passenger_email}}\",\n                \"phoneNumber\": \"{{passenger_phonenumber}}\"\n            }\n        }\n    ],\n    \"embed\": [\n        \"ALL\"\n    ],\n    \"externalRef\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "5b. Fulfillments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// Verify whether the correct status code is returned",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"if (pm.collectionVariables.get(\"offerWithoutReservation\")=== true) {",
									"    postman.setNextRequest(\"6a. Booking (No Reservation)\");",
									"} else if(pm.collectionVariables.get(\"offerWithAncillary\")===true) {",
									"    postman.setNextRequest(\"7a. Booking (With Ancillary)\");",
									"} else {",
									"    postman.setNextRequest(\"8. Get Booking\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth.token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "version={{osdm-version}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bookings/{{bookingId}}/fulfillments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}",
								"fulfillments"
							]
						}
					},
					"response": []
				},
				{
					"name": "6a. Booking (No Reservation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"// Currently commented out until schema file is available under collection variables",
									"/*var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console});",
									"",
									"const OSDM_SCHEMA = ajv.compile(JSON.parse(pm.collectionVariables.get(\"osdm_booking_schema\")));",
									"",
									"pm.test(\"Response uses a valid schema\", function() {",
									"    pm.expect(ajv.validate(pm.response.json(), OSDM_SCHEMA)).to.be.true;",
									"});*/",
									"",
									"// Verify whether the correct status code is returned",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Store the returned booking id",
									"//postman.setEnvironmentVariable(\"bookingId\", jsonData.booking.id);",
									"pm.collectionVariables.set(\"bookingId\", jsonData.booking.id);",
									"",
									"// Store the id of the first passenger",
									"//postman.setEnvironmentVariable(\"passengerId\", jsonData.booking.passengers[0].id);",
									"pm.collectionVariables.set(\"passengerId\", jsonData.booking.passengers[0].id);",
									"",
									"// Store the id of the first booked offer",
									"//postman.setEnvironmentVariable(\"exchangeOfferIds\", jsonData.booking.bookedOffers[0].id);",
									"pm.collectionVariables.set(\"exchangeOfferIds\", jsonData.booking.bookedOffers[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth.token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json;version={{osdm-version}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"purchaser\": {\n        \"detail\": {\n            \"firstName\": \"{{purchaser_firstName}}\",\n            \"lastName\": \"{{purchaser_lastName}}\",\n            \"eMail\": \"{{purchaser_email}}\",\n            \"phoneNumber\": \"{{purchaser_phoneNumber}}\"\n        }\n    },\n    \"offers\": [\n        {\n            \"offerId\": \"{{offerWithoutReservationId}}\",\n            \"passengerRefs\": [\n                \"{{passenger_ref_only_admission}}\"\n            ]\n        }\n    ],\n    \"passengerSpecifications\": [\n        {\n            \"externalRef\": \"{{passenger_external_ref}}\",\n            \"dateOfBirth\": \"{{passenger_dateOfBirth}}\",\n            \"id\": \"{{{passenger_ref_only_admission}}}\",\n            \"summary\": \"{{passenger_ref_only_admission}}\",\n            \"type\": \"{{passenger_type}}\",\n            \"detail\": {\n                \"firstName\": \"{{passenger_firstName}}\",\n                \"lastName\": \"{{passenger_lastName}}\",\n                \"eMail\": \"{{passenger_email}}\",\n                \"phoneNumber\": \"{{passenger_phonenumber}}\"\n            }\n        }\n    ],\n    \"embed\": [\n        \"ALL\"\n    ],\n    \"externalRef\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "6b. Fulfillments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// Verify whether the correct status code is returned",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"if(pm.collectionVariables.get(\"offerWithAncillary\")===true) {",
									"    postman.setNextRequest(\"7a. Booking (With Ancillary)\");",
									"} else {",
									"    postman.setNextRequest(\"8. Get Booking\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth.token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "version={{osdm-version}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bookings/{{bookingId}}/fulfillments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}",
								"fulfillments"
							]
						}
					},
					"response": []
				},
				{
					"name": "7a. Booking (With Ancillary)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"// Currently commented out until schema file is available under collection variables",
									"/*var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console});",
									"",
									"const OSDM_SCHEMA = ajv.compile(JSON.parse(pm.collectionVariables.get(\"osdm_booking_schema\")));",
									"",
									"pm.test(\"Response uses a valid schema\", function() {",
									"    pm.expect(ajv.validate(pm.response.json(), OSDM_SCHEMA)).to.be.true;",
									"});*/",
									"// Verify whether the correct status code is returned",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Store the returned booking id",
									"//postman.setEnvironmentVariable(\"bookingId\", jsonData.booking.id);",
									"pm.collectionVariables.set(\"bookingId\", jsonData.booking.id);",
									"",
									"// Store the id of the first passenger",
									"//postman.setEnvironmentVariable(\"passengerId\", jsonData.booking.passengers[0].id);",
									"pm.collectionVariables.set(\"passengerId\", jsonData.booking.passengers[0].id);",
									"",
									"// Store the id of the first booked offer",
									"//postman.setEnvironmentVariable(\"exchangeOfferIds\", jsonData.booking.bookedOffers[0].id);",
									"pm.collectionVariables.set(\"exchangeOfferIds\", jsonData.booking.bookedOffers[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth.token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json;version={{osdm-version}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"purchaser\": {\n        \"detail\": {\n            \"firstName\": \"{{purchaser_firstName}}\",\n            \"lastName\": \"{{purchaser_lastName}}\",\n            \"eMail\": \"{{purchaser_email}}\",\n            \"phoneNumber\": \"{{purchaser_phoneNumber}}\"\n        }\n    },\n    \"offers\": [\n        {\n            \"offerId\": \"{{offerWithAncillaryOfferId}}\",\n            \"passengerRefs\": [\n                \"{{passenger_ref_ancillary}}\"\n            ],\n            \"optionalAncillarySelections\": [\n                {\n                    \"ancillaryId\": \"{{selected_ancillary_id}}\",\n                    \"passengerRefs\": [\n                        \"{{passenger_ref_ancillary}}\"\n                    ]\n                }\n            ]\n        }\n    ],\n    \"passengerSpecifications\": [\n        {\n            \"externalRef\": \"{{passenger_external_ref}}\",\n            \"dateOfBirth\": \"{{passenger_dateOfBirth}}\",\n            \"id\": \"{{{passenger_ref_ancillary}}}\",\n            \"summary\": \"{{passenger_ref_ancillary}}\",\n            \"type\": \"{{passenger_type}}\",\n            \"detail\": {\n                \"firstName\": \"{{passenger_firstName}}\",\n                \"lastName\": \"{{passenger_lastName}}\",\n                \"eMail\": \"{{passenger_email}}\",\n                \"phoneNumber\": \"{{passenger_phonenumber}}\"\n            }\n        }\n    ],\n    \"embed\": [\n        \"ALL\"\n    ],\n    \"externalRef\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "7b. Fulfillments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// Verify whether the correct status code is returned",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth.token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "version={{osdm-version}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bookings/{{bookingId}}/fulfillments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}",
								"fulfillments"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Get Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify whether the correct status code is returned",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"bookingId\", jsonData.booking.id);",
									"pm.collectionVariables.set(\"passengerId\", jsonData.booking.passengers[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth.token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "version={{osdm-version}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/{{bookingId}}?embed=ALL",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}"
							],
							"query": [
								{
									"key": "embed",
									"value": "ALL"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Two-step refund",
			"item": [
				{
					"name": "Requesting a release offer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"//postman.setEnvironmentVariable(\"release_offer_id\", jsonData.releaseOffers[0].id);\r",
									"pm.collectionVariables.set(\"release_offer_id\", jsonData.releaseOffers[0].id);\r",
									"\r",
									"pm.test(\"At least 1 release offer was provided\", function () {\r",
									"    pm.expect(jsonData.releaseOffers.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Release offer status PROPOSED\", function () {\r",
									"    pm.expect(jsonData.releaseOffers[0].status).to.eql(\"PROPOSED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token_type}} {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Requestor",
								"value": "{{requestor}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fulfillmentIds\" : [\r\n        \"{{fulfillment_id}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base}}/bookings/{{bookingId}}/release-offers",
							"host": [
								"{{base}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}",
								"release-offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking info before confirming release",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Booking details obtained\", function () {\r",
									"    var booking = jsonData.booking;\r",
									"    pm.expect(booking.id).to.eql(postman.getEnvironmentVariable(\"booking_id\"));\r",
									"});\r",
									"pm.test(\"Booked offer status still FULFILLED\", function () {\r",
									"    pm.expect(jsonData.booking.bookedOffers[0].admissions[0].status).to.eql(\"FULFILLED\");\r",
									"});\r",
									"pm.test(\"Fulfillment status still FULFILLED\", function () {\r",
									"    pm.expect(jsonData.booking.fulfillments[0].status).to.eql(\"FULFILLED\");\r",
									"});\r",
									"\r",
									"pm.test(\"No release offers yet\", function () {\r",
									"    pm.expect(jsonData.booking.releaseOffers.length).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"No refund offers yet\", function () {\r",
									"    pm.expect(jsonData.booking.refundOffers.length).to.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token_type}} {{access_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Requestor",
								"value": "{{requestor}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base}}/bookings/{{booking_id}}",
							"host": [
								"{{base}}"
							],
							"path": [
								"bookings",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm the release offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Release offer confirmed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.releaseOffer.status).to.eql(\"CONFIRMED\");\r",
									"});\r",
									"pm.test(\"Fulfillment status RELEASED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.releaseOffer.fulfillments[0].status).to.eql(\"RELEASED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token_type}} {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Requestor",
								"value": "{{requestor}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\" : \"CONFIRMED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base}}/bookings/{{bookingId}}/release-offers/{{release_offer_id}}",
							"host": [
								"{{base}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}",
								"release-offers",
								"{{release_offer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking info post-release",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Booking details obtained\", function () {\r",
									"    var booking = jsonData.booking;\r",
									"    pm.expect(booking.id).to.eql(postman.getEnvironmentVariable(\"booking_id\"));\r",
									"});\r",
									"pm.test(\"Booked offer status RELEASED\", function () {\r",
									"    pm.expect(jsonData.booking.bookedOffers[0].admissions[0].status).to.eql(\"RELEASED\");\r",
									"});\r",
									"pm.test(\"Fulfillment status RELEASED\", function () {\r",
									"    pm.expect(jsonData.booking.fulfillments[0].status).to.eql(\"RELEASED\");\r",
									"});\r",
									"pm.test(\"Release offer status RELEASED\", function () {\r",
									"    pm.expect(jsonData.booking.releaseOffers[0].fulfillments[0].status).to.eql(\"RELEASED\");\r",
									"});\r",
									"\r",
									"pm.test(\"No refund offers yet\", function () {\r",
									"    pm.expect(jsonData.booking.refundOffers.length).to.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token_type}} {{access_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Requestor",
								"value": "{{requestor}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base}}/bookings/{{booking_id}}",
							"host": [
								"{{base}}"
							],
							"path": [
								"bookings",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Requesting a Refund Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"//postman.setEnvironmentVariable(\"refund_offer_id\", jsonData.refundOffers[0].id);\r",
									"pm.collectionVariables.set(\"refund_offer_id\", jsonData.refundOffers[0].id);\r",
									"\r",
									"pm.test(\"At least 1 refund offer was provided\", function () {\r",
									"    pm.expect(jsonData.refundOffers.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Refund offer status PROPOSED\", function () {\r",
									"    pm.expect(jsonData.refundOffers[0].status).to.eql(\"PROPOSED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token_type}} {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Requestor",
								"value": "{{requestor}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fulfillmentIds\" : [\r\n        \"{{fulfillment_id}}\"\r\n    ],\r\n    \"overruleCode\": \"TECHNICAL_FAILURE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base}}/bookings/{{bookingId}}/refund-offers",
							"host": [
								"{{base}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}",
								"refund-offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking info before confirming refund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Booking details obtained\", function () {\r",
									"    var booking = jsonData.booking;\r",
									"    pm.expect(booking.id).to.eql(postman.getEnvironmentVariable(\"booking_id\"));\r",
									"});\r",
									"pm.test(\"Booked offer status still RELEASED\", function () {\r",
									"    pm.expect(jsonData.booking.bookedOffers[0].admissions[0].status).to.eql(\"RELEASED\");\r",
									"});\r",
									"pm.test(\"Fulfillment status still RELEASED\", function () {\r",
									"    pm.expect(jsonData.booking.fulfillments[0].status).to.eql(\"RELEASED\");\r",
									"});\r",
									"pm.test(\"Release offer status still RELEASED\", function () {\r",
									"    pm.expect(jsonData.booking.releaseOffers[0].fulfillments[0].status).to.eql(\"RELEASED\");\r",
									"});\r",
									"\r",
									"pm.test(\"No refund offers yet\", function () {\r",
									"    pm.expect(jsonData.booking.refundOffers.length).to.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token_type}} {{access_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Requestor",
								"value": "{{requestor}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base}}/bookings/{{booking_id}}",
							"host": [
								"{{base}}"
							],
							"path": [
								"bookings",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm the Refund Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Refund Offer was Confirmed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData.refundOffer.status).to.eql(\"CONFIRMED\");\r",
									"});\r",
									"pm.test(\"Fulfillment status REFUNDED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.refundOffer.fulfillments[0].status).to.eql(\"REFUNDED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token_type}} {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Requestor",
								"value": "{{requestor}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\" : \"CONFIRMED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base}}/bookings/{{bookingId}}/refund-offers/{{refund_offer_id}}",
							"host": [
								"{{base}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}",
								"refund-offers",
								"{{refund_offer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking info post-refund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Booking details obtained\", function () {\r",
									"    var booking = jsonData.booking;\r",
									"    pm.expect(booking.id).to.eql(postman.getEnvironmentVariable(\"booking_id\"));\r",
									"});\r",
									"pm.test(\"Booked offer status REFUNDED\", function () {\r",
									"    pm.expect(jsonData.booking.bookedOffers[0].admissions[0].status).to.eql(\"REFUNDED\");\r",
									"});\r",
									"pm.test(\"Fulfillment status REFUNDED\", function () {\r",
									"    pm.expect(jsonData.booking.fulfillments[0].status).to.eql(\"REFUNDED\");\r",
									"});\r",
									"pm.test(\"Refund offer status REFUNDED\", function () {\r",
									"    pm.expect(jsonData.booking.refundOffers[0].fulfillments[0].status).to.eql(\"REFUNDED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token_type}} {{access_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Requestor",
								"value": "{{requestor}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base}}/bookings/{{booking_id}}",
							"host": [
								"{{base}}"
							],
							"path": [
								"bookings",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "offerWithoutReservation",
			"value": ""
		},
		{
			"key": "offerWithoutReservationId",
			"value": ""
		},
		{
			"key": "passenger_ref_only_admission",
			"value": ""
		},
		{
			"key": "release_offer_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "refund_offer_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "offerWithReservation",
			"value": ""
		},
		{
			"key": "offerWithReservationId",
			"value": ""
		},
		{
			"key": "passenger_ref_reservation",
			"value": ""
		},
		{
			"key": "bookingId",
			"value": "",
			"type": "string"
		},
		{
			"key": "passengerId",
			"value": "",
			"type": "string"
		},
		{
			"key": "exchangeOfferIds",
			"value": "",
			"type": "string"
		}
	]
}